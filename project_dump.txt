=== Project Tree (JSON) ===
{
  "name": "mini-demo",
  "type": "directory",
  "children": [
    {
      "name": ".gitignore",
      "type": "file"
    },
    {
      "name": "README.md",
      "type": "file"
    },
    {
      "name": "app",
      "type": "directory",
      "children": [
        {
          "name": "__init__.py",
          "type": "file"
        },
        {
          "name": "auth.py",
          "type": "file"
        },
        {
          "name": "blueprints",
          "type": "directory",
          "children": [
            {
              "name": "reader.py",
              "type": "file"
            }
          ]
        },
        {
          "name": "comment_routes.py",
          "type": "file"
        },
        {
          "name": "list_routes.py",
          "type": "file"
        },
        {
          "name": "models.py",
          "type": "file"
        },
        {
          "name": "reader_controller.py",
          "type": "file"
        },
        {
          "name": "routes.py",
          "type": "file"
        },
        {
          "name": "static",
          "type": "directory",
          "children": [
            {
              "name": "assets",
              "type": "directory",
              "children": [
                {
                  "name": "MD-logo.png",
                  "type": "file"
                },
                {
                  "name": "auth_thmb.png",
                  "type": "file"
                },
                {
                  "name": "default_avatar.png",
                  "type": "file"
                },
                {
                  "name": "default_cover.png",
                  "type": "file"
                },
                {
                  "name": "favicon.ico",
                  "type": "file"
                }
              ]
            },
            {
              "name": "css",
              "type": "directory",
              "children": [
                {
                  "name": "add_to_list.css",
                  "type": "file"
                },
                {
                  "name": "auth.css",
                  "type": "file"
                },
                {
                  "name": "comments.css",
                  "type": "file"
                },
                {
                  "name": "creator_detail.css",
                  "type": "file"
                },
                {
                  "name": "library.css",
                  "type": "file"
                },
                {
                  "name": "list.css",
                  "type": "file"
                },
                {
                  "name": "manga_detail.css",
                  "type": "file"
                },
                {
                  "name": "reader.css",
                  "type": "file"
                },
                {
                  "name": "styles.css",
                  "type": "file"
                }
              ]
            },
            {
              "name": "flags",
              "type": "directory",
              "children": [
                {
                  "name": "af.png",
                  "type": "file"
                },
                {
                  "name": "ar.png",
                  "type": "file"
                },
                {
                  "name": "az.png",
                  "type": "file"
                },
                {
                  "name": "be.png",
                  "type": "file"
                },
                {
                  "name": "bg.png",
                  "type": "file"
                },
                {
                  "name": "bn.png",
                  "type": "file"
                },
                {
                  "name": "ca.png",
                  "type": "file"
                },
                {
                  "name": "cs.png",
                  "type": "file"
                },
                {
                  "name": "cv.png",
                  "type": "file"
                },
                {
                  "name": "da.png",
                  "type": "file"
                },
                {
                  "name": "de.png",
                  "type": "file"
                },
                {
                  "name": "el.png",
                  "type": "file"
                },
                {
                  "name": "en.png",
                  "type": "file"
                },
                {
                  "name": "eo.png",
                  "type": "file"
                },
                {
                  "name": "es-la.png",
                  "type": "file"
                },
                {
                  "name": "es.png",
                  "type": "file"
                },
                {
                  "name": "et.png",
                  "type": "file"
                },
                {
                  "name": "eu.png",
                  "type": "file"
                },
                {
                  "name": "fa.png",
                  "type": "file"
                },
                {
                  "name": "fi.png",
                  "type": "file"
                },
                {
                  "name": "flags-download.py",
                  "type": "file"
                },
                {
                  "name": "fr.png",
                  "type": "file"
                },
                {
                  "name": "ga.png",
                  "type": "file"
                },
                {
                  "name": "he.png",
                  "type": "file"
                },
                {
                  "name": "hi.png",
                  "type": "file"
                },
                {
                  "name": "hr.png",
                  "type": "file"
                },
                {
                  "name": "hu.png",
                  "type": "file"
                },
                {
                  "name": "id.png",
                  "type": "file"
                },
                {
                  "name": "it.png",
                  "type": "file"
                },
                {
                  "name": "ja-ro.png",
                  "type": "file"
                },
                {
                  "name": "ja.png",
                  "type": "file"
                },
                {
                  "name": "jv.png",
                  "type": "file"
                },
                {
                  "name": "ka.png",
                  "type": "file"
                },
                {
                  "name": "kk.png",
                  "type": "file"
                },
                {
                  "name": "ko-ro.png",
                  "type": "file"
                },
                {
                  "name": "ko.png",
                  "type": "file"
                },
                {
                  "name": "la.png",
                  "type": "file"
                },
                {
                  "name": "lt.png",
                  "type": "file"
                },
                {
                  "name": "mn.png",
                  "type": "file"
                },
                {
                  "name": "ms.png",
                  "type": "file"
                },
                {
                  "name": "my.png",
                  "type": "file"
                },
                {
                  "name": "ne.png",
                  "type": "file"
                },
                {
                  "name": "nl.png",
                  "type": "file"
                },
                {
                  "name": "no.png",
                  "type": "file"
                },
                {
                  "name": "pl.png",
                  "type": "file"
                },
                {
                  "name": "pt-br.png",
                  "type": "file"
                },
                {
                  "name": "pt.png",
                  "type": "file"
                },
                {
                  "name": "ro.png",
                  "type": "file"
                },
                {
                  "name": "ru.png",
                  "type": "file"
                },
                {
                  "name": "sk.png",
                  "type": "file"
                },
                {
                  "name": "sl.png",
                  "type": "file"
                },
                {
                  "name": "sq.png",
                  "type": "file"
                },
                {
                  "name": "sr.png",
                  "type": "file"
                },
                {
                  "name": "sv.png",
                  "type": "file"
                },
                {
                  "name": "ta.png",
                  "type": "file"
                },
                {
                  "name": "te.png",
                  "type": "file"
                },
                {
                  "name": "th.png",
                  "type": "file"
                },
                {
                  "name": "tl.png",
                  "type": "file"
                },
                {
                  "name": "tr.png",
                  "type": "file"
                },
                {
                  "name": "uk.png",
                  "type": "file"
                },
                {
                  "name": "ur.png",
                  "type": "file"
                },
                {
                  "name": "uz.png",
                  "type": "file"
                },
                {
                  "name": "vi.png",
                  "type": "file"
                },
                {
                  "name": "zh-hk.png",
                  "type": "file"
                },
                {
                  "name": "zh-ro.png",
                  "type": "file"
                },
                {
                  "name": "zh.png",
                  "type": "file"
                }
              ]
            },
            {
              "name": "js",
              "type": "directory",
              "children": [
                {
                  "name": "add_to_list.js",
                  "type": "file"
                },
                {
                  "name": "comments.js",
                  "type": "file"
                },
                {
                  "name": "library.js",
                  "type": "file"
                },
                {
                  "name": "list_public.js",
                  "type": "file"
                },
                {
                  "name": "manga_detail.js",
                  "type": "file"
                },
                {
                  "name": "reader.js",
                  "type": "file"
                },
                {
                  "name": "scripts.js",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "templates",
          "type": "directory",
          "children": [
            {
              "name": "advanced_search.html",
              "type": "file"
            },
            {
              "name": "art.html",
              "type": "file"
            },
            {
              "name": "base.html",
              "type": "file"
            },
            {
              "name": "chapters.html",
              "type": "file"
            },
            {
              "name": "comments.html",
              "type": "file"
            },
            {
              "name": "creator_detail.html",
              "type": "file"
            },
            {
              "name": "home.html",
              "type": "file"
            },
            {
              "name": "latest_updates.html",
              "type": "file"
            },
            {
              "name": "library.html",
              "type": "file"
            },
            {
              "name": "list_public.html",
              "type": "file"
            },
            {
              "name": "login.html",
              "type": "file"
            },
            {
              "name": "manga_art.html",
              "type": "file"
            },
            {
              "name": "manga_detail.html",
              "type": "file"
            },
            {
              "name": "profile.html",
              "type": "file"
            },
            {
              "name": "random.html",
              "type": "file"
            },
            {
              "name": "reader.html",
              "type": "file"
            },
            {
              "name": "reading_history.html",
              "type": "file"
            },
            {
              "name": "recently_added.html",
              "type": "file"
            },
            {
              "name": "register.html",
              "type": "file"
            },
            {
              "name": "related.html",
              "type": "file"
            },
            {
              "name": "require_login.html",
              "type": "file"
            },
            {
              "name": "updates.html",
              "type": "file"
            }
          ]
        }
      ]
    },
    {
      "name": "config.py",
      "type": "file"
    },
    {
      "name": "dump.py",
      "type": "file"
    },
    {
      "name": "project_dump.txt",
      "type": "file"
    },
    {
      "name": "requirements.txt",
      "type": "file"
    },
    {
      "name": "run.py",
      "type": "file"
    },
    {
      "name": "test-api.py",
      "type": "file"
    },
    {
      "name": "test-connection.py",
      "type": "file"
    }
  ]
}

=== Project Tree (ASCII) ===
D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo/
├── .gitignore
├── README.md
├── app/
│   ├── __init__.py
│   ├── auth.py
│   ├── blueprints/
│   │   └── reader.py
│   ├── comment_routes.py
│   ├── list_routes.py
│   ├── models.py
│   ├── reader_controller.py
│   ├── routes.py
│   ├── static/
│   │   ├── assets/
│   │   │   ├── MD-logo.png
│   │   │   ├── auth_thmb.png
│   │   │   ├── default_avatar.png
│   │   │   ├── default_cover.png
│   │   │   └── favicon.ico
│   │   ├── css/
│   │   │   ├── add_to_list.css
│   │   │   ├── auth.css
│   │   │   ├── comments.css
│   │   │   ├── creator_detail.css
│   │   │   ├── library.css
│   │   │   ├── list.css
│   │   │   ├── manga_detail.css
│   │   │   ├── reader.css
│   │   │   └── styles.css
│   │   ├── flags/
│   │   │   ├── af.png
│   │   │   ├── ar.png
│   │   │   ├── az.png
│   │   │   ├── be.png
│   │   │   ├── bg.png
│   │   │   ├── bn.png
│   │   │   ├── ca.png
│   │   │   ├── cs.png
│   │   │   ├── cv.png
│   │   │   ├── da.png
│   │   │   ├── de.png
│   │   │   ├── el.png
│   │   │   ├── en.png
│   │   │   ├── eo.png
│   │   │   ├── es-la.png
│   │   │   ├── es.png
│   │   │   ├── et.png
│   │   │   ├── eu.png
│   │   │   ├── fa.png
│   │   │   ├── fi.png
│   │   │   ├── flags-download.py
│   │   │   ├── fr.png
│   │   │   ├── ga.png
│   │   │   ├── he.png
│   │   │   ├── hi.png
│   │   │   ├── hr.png
│   │   │   ├── hu.png
│   │   │   ├── id.png
│   │   │   ├── it.png
│   │   │   ├── ja-ro.png
│   │   │   ├── ja.png
│   │   │   ├── jv.png
│   │   │   ├── ka.png
│   │   │   ├── kk.png
│   │   │   ├── ko-ro.png
│   │   │   ├── ko.png
│   │   │   ├── la.png
│   │   │   ├── lt.png
│   │   │   ├── mn.png
│   │   │   ├── ms.png
│   │   │   ├── my.png
│   │   │   ├── ne.png
│   │   │   ├── nl.png
│   │   │   ├── no.png
│   │   │   ├── pl.png
│   │   │   ├── pt-br.png
│   │   │   ├── pt.png
│   │   │   ├── ro.png
│   │   │   ├── ru.png
│   │   │   ├── sk.png
│   │   │   ├── sl.png
│   │   │   ├── sq.png
│   │   │   ├── sr.png
│   │   │   ├── sv.png
│   │   │   ├── ta.png
│   │   │   ├── te.png
│   │   │   ├── th.png
│   │   │   ├── tl.png
│   │   │   ├── tr.png
│   │   │   ├── uk.png
│   │   │   ├── ur.png
│   │   │   ├── uz.png
│   │   │   ├── vi.png
│   │   │   ├── zh-hk.png
│   │   │   ├── zh-ro.png
│   │   │   └── zh.png
│   │   └── js/
│   │       ├── add_to_list.js
│   │       ├── comments.js
│   │       ├── library.js
│   │       ├── list_public.js
│   │       ├── manga_detail.js
│   │       ├── reader.js
│   │       └── scripts.js
│   └── templates/
│       ├── advanced_search.html
│       ├── art.html
│       ├── base.html
│       ├── chapters.html
│       ├── comments.html
│       ├── creator_detail.html
│       ├── home.html
│       ├── latest_updates.html
│       ├── library.html
│       ├── list_public.html
│       ├── login.html
│       ├── manga_art.html
│       ├── manga_detail.html
│       ├── profile.html
│       ├── random.html
│       ├── reader.html
│       ├── reading_history.html
│       ├── recently_added.html
│       ├── register.html
│       ├── related.html
│       ├── require_login.html
│       └── updates.html
├── config.py
├── dump.py
├── project_dump.txt
├── requirements.txt
├── run.py
├── test-api.py
└── test-connection.py


=== Folder: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\.gitignore ---
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
config.py

# Virtual environment
venv/
.env/

# Flask cache
instance/
*.db
*.sqlite3

# IDE / OS
.vscode/
.idea/
.DS_Store
Thumbs.db

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\config.py ---
import urllib

class Config:
    SECRET_KEY = "secret_key_demo"

    DRIVER = "ODBC Driver 17 for SQL Server"
    SERVER = "HEDI-SNOWY\SQLEXPRESS"
    DATABASE = "MangaLibrary"
    connection_string = (
        f"DRIVER={{{DRIVER}}};"
        f"SERVER={SERVER};"
        f"DATABASE={DATABASE};"
        f"Trusted_Connection=yes;"
    )

    SQLALCHEMY_DATABASE_URI = "mssql+pyodbc:///?odbc_connect=" + urllib.parse.quote_plus(connection_string)
    SQLALCHEMY_TRACK_MODIFICATIONS = False

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\dump.py ---
import os
import json

OUTPUT_FILE = "project_dump.txt"

def should_ignore_dir(dirname: str) -> bool:
    """Bỏ qua thư mục venv (dù tên kiểu gì)."""
    return dirname.lower().startswith(("venv", ".venv", "__pycache__", "Data", "data", ".git"))

def build_tree_dict(root_dir: str) -> dict:
    """Trả về cây thư mục dưới dạng dict (chỉ bỏ qua venv)."""
    tree = {"name": os.path.basename(root_dir), "type": "directory", "children": []}

    if should_ignore_dir(os.path.basename(root_dir)):
        return tree

    try:
        with os.scandir(root_dir) as it:
            for entry in sorted(it, key=lambda e: e.name):
                if entry.is_dir():
                    if should_ignore_dir(entry.name):
                        continue
                    tree["children"].append(build_tree_dict(entry.path))
                elif entry.is_file():
                    tree["children"].append({"name": entry.name, "type": "file"})
    except PermissionError:
        pass
    return tree

def build_tree_ascii(root_dir: str, prefix: str = "") -> str:
    """Tạo cây thư mục dạng text giống `tree` (chỉ bỏ qua venv)."""
    entries = []
    try:
        with os.scandir(root_dir) as it:
            for entry in sorted(it, key=lambda e: e.name):
                if entry.is_dir():
                    if should_ignore_dir(entry.name):
                        continue
                    entries.append(entry)
                elif entry.is_file():
                    entries.append(entry)
    except PermissionError:
        return ""

    lines = []
    for i, entry in enumerate(entries):
        connector = "└── " if i == len(entries) - 1 else "├── "
        if entry.is_dir():
            lines.append(prefix + connector + entry.name + "/")
            extension = "    " if i == len(entries) - 1 else "│   "
            lines.extend(build_tree_ascii(entry.path, prefix + extension).splitlines())
        else:
            lines.append(prefix + connector + entry.name)
    return "\n".join(lines)

def dump_project(root_dir: str, output_file: str):
    with open(output_file, "w", encoding="utf-8") as out:
        # Xuất cây thư mục dạng JSON
        tree_dict = build_tree_dict(root_dir)
        out.write("=== Project Tree (JSON) ===\n")
        out.write(json.dumps(tree_dict, indent=2, ensure_ascii=False))
        out.write("\n\n")

        # Xuất cây thư mục dạng ASCII
        out.write("=== Project Tree (ASCII) ===\n")
        out.write(root_dir + "/\n")
        out.write(build_tree_ascii(root_dir))
        out.write("\n\n")

        # Xuất nội dung tất cả file
        for dirpath, dirnames, filenames in os.walk(root_dir):
            # Lọc thư mục
            dirnames[:] = [d for d in dirnames if not should_ignore_dir(d)]

            rel_path = os.path.relpath(dirpath, root_dir)
            if rel_path == ".":
                rel_path = ""
            out.write(f"\n=== Folder: {rel_path or root_dir} ===\n")

            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                out.write(f"\n--- File: {file_path} ---\n")
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        out.write(f.read())
                except Exception as e:
                    out.write(f"[Lỗi đọc file: {e}]\n")

if __name__ == "__main__":
    current_dir = os.getcwd()
    dump_project(current_dir, OUTPUT_FILE)
    print(f"✅ Đã xuất toàn bộ file (trừ venv) + cây thư mục JSON/ASCII vào {OUTPUT_FILE}")

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\project_dump.txt ---
=== Project Tree (JSON) ===
{
  "name": "mini-demo",
  "type": "directory",
  "children": [
    {
      "name": ".gitignore",
      "type": "file"
    },
    {
      "name": "README.md",
      "type": "file"
    },
    {
      "name": "app",
      "type": "directory",
      "children": [
        {
          "name": "__init__.py",
          "type": "file"
        },
        {
          "name": "auth.py",
          "type": "file"
        },
        {
          "name": "blueprints",
          "type": "directory",
          "children": [
            {
              "name": "reader.py",
              "type": "file"
            }
          ]
        },
        {
          "name": "comment_routes.py",
          "type": "file"
        },
        {
          "name": "list_routes.py",
          "type": "file"
        },
        {
          "name": "models.py",
          "type": "file"
        },
        {
          "name": "reader_controller.py",
          "type": "file"
        },
        {
          "name": "routes.py",
          "type": "file"
        },
        {
          "name": "static",
          "type": "directory",
          "children": [
            {
              "name": "assets",
              "type": "directory",
              "children": [
                {
                  "name": "MD-logo.png",
                  "type": "file"
                },
                {
                  "name": "auth_thmb.png",
                  "type": "file"
                },
                {
                  "name": "default_avatar.png",
                  "type": "file"
                },
                {
                  "name": "default_cover.png",
                  "type": "file"
                },
                {
                  "name": "favicon.ico",
                  "type": "file"
                }
              ]
            },
            {
              "name": "css",
              "type": "directory",
              "children": [
                {
                  "name": "add_to_list.css",
                  "type": "file"
                },
                {
                  "name": "auth.css",
                  "type": "file"
                },
                {
                  "name": "comments.css",
                  "type": "file"
                },
                {
                  "name": "creator_detail.css",
                  "type": "file"
                },
                {
                  "name": "library.css",
                  "type": "file"
                },
                {
                  "name": "list.css",
                  "type": "file"
                },
                {
                  "name": "manga_detail.css",
                  "type": "file"
                },
                {
                  "name": "reader.css",
                  "type": "file"
                },
                {
                  "name": "styles.css",
                  "type": "file"
                }
              ]
            },
            {
              "name": "flags",
              "type": "directory",
              "children": [
                {
                  "name": "af.png",
                  "type": "file"
                },
                {
                  "name": "ar.png",
                  "type": "file"
                },
                {
                  "name": "az.png",
                  "type": "file"
                },
                {
                  "name": "be.png",
                  "type": "file"
                },
                {
                  "name": "bg.png",
                  "type": "file"
                },
                {
                  "name": "bn.png",
                  "type": "file"
                },
                {
                  "name": "ca.png",
                  "type": "file"
                },
                {
                  "name": "cs.png",
                  "type": "file"
                },
                {
                  "name": "cv.png",
                  "type": "file"
                },
                {
                  "name": "da.png",
                  "type": "file"
                },
                {
                  "name": "de.png",
                  "type": "file"
                },
                {
                  "name": "el.png",
                  "type": "file"
                },
                {
                  "name": "en.png",
                  "type": "file"
                },
                {
                  "name": "eo.png",
                  "type": "file"
                },
                {
                  "name": "es-la.png",
                  "type": "file"
                },
                {
                  "name": "es.png",
                  "type": "file"
                },
                {
                  "name": "et.png",
                  "type": "file"
                },
                {
                  "name": "eu.png",
                  "type": "file"
                },
                {
                  "name": "fa.png",
                  "type": "file"
                },
                {
                  "name": "fi.png",
                  "type": "file"
                },
                {
                  "name": "flags-download.py",
                  "type": "file"
                },
                {
                  "name": "fr.png",
                  "type": "file"
                },
                {
                  "name": "ga.png",
                  "type": "file"
                },
                {
                  "name": "he.png",
                  "type": "file"
                },
                {
                  "name": "hi.png",
                  "type": "file"
                },
                {
                  "name": "hr.png",
                  "type": "file"
                },
                {
                  "name": "hu.png",
                  "type": "file"
                },
                {
                  "name": "id.png",
                  "type": "file"
                },
                {
                  "name": "it.png",
                  "type": "file"
                },
                {
                  "name": "ja-ro.png",
                  "type": "file"
                },
                {
                  "name": "ja.png",
                  "type": "file"
                },
                {
                  "name": "jv.png",
                  "type": "file"
                },
                {
                  "name": "ka.png",
                  "type": "file"
                },
                {
                  "name": "kk.png",
                  "type": "file"
                },
                {
                  "name": "ko-ro.png",
                  "type": "file"
                },
                {
                  "name": "ko.png",
                  "type": "file"
                },
                {
                  "name": "la.png",
                  "type": "file"
                },
                {
                  "name": "lt.png",
                  "type": "file"
                },
                {
                  "name": "mn.png",
                  "type": "file"
                },
                {
                  "name": "ms.png",
                  "type": "file"
                },
                {
                  "name": "my.png",
                  "type": "file"
                },
                {
                  "name": "ne.png",
                  "type": "file"
                },
                {
                  "name": "nl.png",
                  "type": "file"
                },
                {
                  "name": "no.png",
                  "type": "file"
                },
                {
                  "name": "pl.png",
                  "type": "file"
                },
                {
                  "name": "pt-br.png",
                  "type": "file"
                },
                {
                  "name": "pt.png",
                  "type": "file"
                },
                {
                  "name": "ro.png",
                  "type": "file"
                },
                {
                  "name": "ru.png",
                  "type": "file"
                },
                {
                  "name": "sk.png",
                  "type": "file"
                },
                {
                  "name": "sl.png",
                  "type": "file"
                },
                {
                  "name": "sq.png",
                  "type": "file"
                },
                {
                  "name": "sr.png",
                  "type": "file"
                },
                {
                  "name": "sv.png",
                  "type": "file"
                },
                {
                  "name": "ta.png",
                  "type": "file"
                },
                {
                  "name": "te.png",
                  "type": "file"
                },
                {
                  "name": "th.png",
                  "type": "file"
                },
                {
                  "name": "tl.png",
                  "type": "file"
                },
                {
                  "name": "tr.png",
                  "type": "file"
                },
                {
                  "name": "uk.png",
                  "type": "file"
                },
                {
                  "name": "ur.png",
                  "type": "file"
                },
                {
                  "name": "uz.png",
                  "type": "file"
                },
                {
                  "name": "vi.png",
                  "type": "file"
                },
                {
                  "name": "zh-hk.png",
                  "type": "file"
                },
                {
                  "name": "zh-ro.png",
                  "type": "file"
                },
                {
                  "name": "zh.png",
                  "type": "file"
                }
              ]
            },
            {
              "name": "js",
              "type": "directory",
              "children": [
                {
                  "name": "add_to_list.js",
                  "type": "file"
                },
                {
                  "name": "comments.js",
                  "type": "file"
                },
                {
                  "name": "library.js",
                  "type": "file"
                },
                {
                  "name": "list_public.js",
                  "type": "file"
                },
                {
                  "name": "manga_detail.js",
                  "type": "file"
                },
                {
                  "name": "reader.js",
                  "type": "file"
                },
                {
                  "name": "scripts.js",
                  "type": "file"
                }
              ]
            }
          ]
        },
        {
          "name": "templates",
          "type": "directory",
          "children": [
            {
              "name": "advanced_search.html",
              "type": "file"
            },
            {
              "name": "art.html",
              "type": "file"
            },
            {
              "name": "base.html",
              "type": "file"
            },
            {
              "name": "chapters.html",
              "type": "file"
            },
            {
              "name": "comments.html",
              "type": "file"
            },
            {
              "name": "creator_detail.html",
              "type": "file"
            },
            {
              "name": "home.html",
              "type": "file"
            },
            {
              "name": "latest_updates.html",
              "type": "file"
            },
            {
              "name": "library.html",
              "type": "file"
            },
            {
              "name": "list_public.html",
              "type": "file"
            },
            {
              "name": "login.html",
              "type": "file"
            },
            {
              "name": "manga_art.html",
              "type": "file"
            },
            {
              "name": "manga_detail.html",
              "type": "file"
            },
            {
              "name": "profile.html",
              "type": "file"
            },
            {
              "name": "random.html",
              "type": "file"
            },
            {
              "name": "reader.html",
              "type": "file"
            },
            {
              "name": "reading_history.html",
              "type": "file"
            },
            {
              "name": "recently_added.html",
              "type": "file"
            },
            {
              "name": "register.html",
              "type": "file"
            },
            {
              "name": "related.html",
              "type": "file"
            },
            {
              "name": "require_login.html",
              "type": "file"
            },
            {
              "name": "updates.html",
              "type": "file"
            }
          ]
        }
      ]
    },
    {
      "name": "config.py",
      "type": "file"
    },
    {
      "name": "dump.py",
      "type": "file"
    },
    {
      "name": "project_dump.txt",
      "type": "file"
    },
    {
      "name": "requirements.txt",
      "type": "file"
    },
    {
      "name": "run.py",
      "type": "file"
    },
    {
      "name": "test-api.py",
      "type": "file"
    },
    {
      "name": "test-connection.py",
      "type": "file"
    }
  ]
}

=== Project Tree (ASCII) ===
D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo/
├── .gitignore
├── README.md
├── app/
│   ├── __init__.py
│   ├── auth.py
│   ├── blueprints/
│   │   └── reader.py
│   ├── comment_routes.py
│   ├── list_routes.py
│   ├── models.py
│   ├── reader_controller.py
│   ├── routes.py
│   ├── static/
│   │   ├── assets/
│   │   │   ├── MD-logo.png
│   │   │   ├── auth_thmb.png
│   │   │   ├── default_avatar.png
│   │   │   ├── default_cover.png
│   │   │   └── favicon.ico
│   │   ├── css/
│   │   │   ├── add_to_list.css
│   │   │   ├── auth.css
│   │   │   ├── comments.css
│   │   │   ├── creator_detail.css
│   │   │   ├── library.css
│   │   │   ├── list.css
│   │   │   ├── manga_detail.css
│   │   │   ├── reader.css
│   │   │   └── styles.css
│   │   ├── flags/
│   │   │   ├── af.png
│   │   │   ├── ar.png
│   │   │   ├── az.png
│   │   │   ├── be.png
│   │   │   ├── bg.png
│   │   │   ├── bn.png
│   │   │   ├── ca.png
│   │   │   ├── cs.png
│   │   │   ├── cv.png
│   │   │   ├── da.png
│   │   │   ├── de.png
│   │   │   ├── el.png
│   │   │   ├── en.png
│   │   │   ├── eo.png
│   │   │   ├── es-la.png
│   │   │   ├── es.png
│   │   │   ├── et.png
│   │   │   ├── eu.png
│   │   │   ├── fa.png
│   │   │   ├── fi.png
│   │   │   ├── flags-download.py
│   │   │   ├── fr.png
│   │   │   ├── ga.png
│   │   │   ├── he.png
│   │   │   ├── hi.png
│   │   │   ├── hr.png
│   │   │   ├── hu.png
│   │   │   ├── id.png
│   │   │   ├── it.png
│   │   │   ├── ja-ro.png
│   │   │   ├── ja.png
│   │   │   ├── jv.png
│   │   │   ├── ka.png
│   │   │   ├── kk.png
│   │   │   ├── ko-ro.png
│   │   │   ├── ko.png
│   │   │   ├── la.png
│   │   │   ├── lt.png
│   │   │   ├── mn.png
│   │   │   ├── ms.png
│   │   │   ├── my.png
│   │   │   ├── ne.png
│   │   │   ├── nl.png
│   │   │   ├── no.png
│   │   │   ├── pl.png
│   │   │   ├── pt-br.png
│   │   │   ├── pt.png
│   │   │   ├── ro.png
│   │   │   ├── ru.png
│   │   │   ├── sk.png
│   │   │   ├── sl.png
│   │   │   ├── sq.png
│   │   │   ├── sr.png
│   │   │   ├── sv.png
│   │   │   ├── ta.png
│   │   │   ├── te.png
│   │   │   ├── th.png
│   │   │   ├── tl.png
│   │   │   ├── tr.png
│   │   │   ├── uk.png
│   │   │   ├── ur.png
│   │   │   ├── uz.png
│   │   │   ├── vi.png
│   │   │   ├── zh-hk.png
│   │   │   ├── zh-ro.png
│   │   │   └── zh.png
│   │   └── js/
│   │       ├── add_to_list.js
│   │       ├── comments.js
│   │       ├── library.js
│   │       ├── list_public.js
│   │       ├── manga_detail.js
│   │       ├── reader.js
│   │       └── scripts.js
│   └── templates/
│       ├── advanced_search.html
│       ├── art.html
│       ├── base.html
│       ├── chapters.html
│       ├── comments.html
│       ├── creator_detail.html
│       ├── home.html
│       ├── latest_updates.html
│       ├── library.html
│       ├── list_public.html
│       ├── login.html
│       ├── manga_art.html
│       ├── manga_detail.html
│       ├── profile.html
│       ├── random.html
│       ├── reader.html
│       ├── reading_history.html
│       ├── recently_added.html
│       ├── register.html
│       ├── related.html
│       ├── require_login.html
│       └── updates.html
├── config.py
├── dump.py
├── project_dump.txt
├── requirements.txt
├── run.py
├── test-api.py
└── test-connection.py


=== Folder: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\.gitignore ---
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
config.py

# Virtual environment
venv/
.env/

# Flask cache
instance/
*.db
*.sqlite3

# IDE / OS
.vscode/
.idea/
.DS_Store
Thumbs.db

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\config.py ---
import urllib

class Config:
    SECRET_KEY = "secret_key_demo"

    DRIVER = "ODBC Driver 17 for SQL Server"
    SERVER = "HEDI-SNOWY\SQLEXPRESS"
    DATABASE = "MangaLibrary"
    connection_string = (
        f"DRIVER={{{DRIVER}}};"
        f"SERVER={SERVER};"
        f"DATABASE={DATABASE};"
        f"Trusted_Connection=yes;"
    )

    SQLALCHEMY_DATABASE_URI = "mssql+pyodbc:///?odbc_connect=" + urllib.parse.quote_plus(connection_string)
    SQLALCHEMY_TRACK_MODIFICATIONS = False

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\dump.py ---
import os
import json

OUTPUT_FILE = "project_dump.txt"

def should_ignore_dir(dirname: str) -> bool:
    """Bỏ qua thư mục venv (dù tên kiểu gì)."""
    return dirname.lower().startswith(("venv", ".venv", "__pycache__", "Data", "data", ".git"))

def build_tree_dict(root_dir: str) -> dict:
    """Trả về cây thư mục dưới dạng dict (chỉ bỏ qua venv)."""
    tree = {"name": os.path.basename(root_dir), "type": "directory", "children": []}

    if should_ignore_dir(os.path.basename(root_dir)):
        return tree

    try:
        with os.scandir(root_dir) as it:
            for entry in sorted(it, key=lambda e: e.name):
                if entry.is_dir():
                    if should_ignore_dir(entry.name):
                        continue
                    tree["children"].append(build_tree_dict(entry.path))
                elif entry.is_file():
                    tree["children"].append({"name": entry.name, "type": "file"})
    except PermissionError:
        pass
    return tree

def build_tree_ascii(root_dir: str, prefix: str = "") -> str:
    """Tạo cây thư mục dạng text giống `tree` (chỉ bỏ qua venv)."""
    entries = []
    try:
        with os.scandir(root_dir) as it:
            for entry in sorted(it, key=lambda e: e.name):
                if entry.is_dir():
                    if should_ignore_dir(entry.name):
                        continue
                    entries.append(entry)
                elif entry.is_file():
                    entries.append(entry)
    except PermissionError:
        return ""

    lines = []
    for i, entry in enumerate(entries):
        connector = "└── " if i == len(entries) - 1 else "├── "
        if entry.is_dir():
            lines.append(prefix + connector + entry.name + "/")
            extension = "    " if i == len(entries) - 1 else "│   "
            lines.extend(build_tree_ascii(entry.path, prefix + extension).splitlines())
        else:
            lines.append(prefix + connector + entry.name)
    return "\n".join(lines)

def dump_project(root_dir: str, output_file: str):
    with open(output_file, "w", encoding="utf-8") as out:
        # Xuất cây thư mục dạng JSON
        tree_dict = build_tree_dict(root_dir)
        out.write("=== Project Tree (JSON) ===\n")
        out.write(json.dumps(tree_dict, indent=2, ensure_ascii=False))
        out.write("\n\n")

        # Xuất cây thư mục dạng ASCII
        out.write("=== Project Tree (ASCII) ===\n")
        out.write(root_dir + "/\n")
        out.write(build_tree_ascii(root_dir))
        out.write("\n\n")

        # Xuất nội dung tất cả file
        for dirpath, dirnames, filenames in os.walk(root_dir):
            # Lọc thư mục
            dirnames[:] = [d for d in dirnames if not should_ignore_dir(d)]

            rel_path = os.path.relpath(dirpath, root_dir)
            if rel_path == ".":
                rel_path = ""
            out.write(f"\n=== Folder: {rel_path or root_dir} ===\n")

            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                out.write(f"\n--- File: {file_path} ---\n")
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        out.write(f.read())
                except Exception as e:
                    out.write(f"[Lỗi đọc file: {e}]\n")

if __name__ == "__main__":
    current_dir = os.getcwd()
    dump_project(current_dir, OUTPUT_FILE)
    print(f"✅ Đã xuất toàn bộ file (trừ venv) + cây thư mục JSON/ASCII vào {OUTPUT_FILE}")

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\README.md ---

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\requirements.txt ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\run.py ---
from app import create_app

app = create_app()

if __name__ == "__main__":
    app.run(debug=True)

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\test-api.py ---
import requests
resp = requests.get("https://api.mangadex.org/ping")
print(resp)

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\test-connection.py ---
import pyodbc

conn_str = (
    r"DRIVER={ODBC Driver 17 for SQL Server};"
    r"SERVER=DESKTOP-HKIPI1M;"
    r"DATABASE=master;"
    r"Trusted_Connection=yes;"
)

try:
    conn = pyodbc.connect(conn_str)
    print("Kết nối thành công!")
except Exception as e:
    print("Kết nối thất bại:", e)
=== Folder: app ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\auth.py ---
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy import or_

from .models import User, db

auth = Blueprint("auth", __name__)

# --- REGISTER ---
@auth.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form.get("username")
        email = request.form.get("email")
        password = request.form.get("password")
        password_confirm = request.form.get("password_confirm")

        if password != password_confirm:
            flash("Passwords do not match.")
            return redirect(url_for("auth.register"))

        existing_user = User.query.filter_by(Email=email).first()
        if existing_user:
            flash("Email already registered.")
            return redirect(url_for("auth.register"))

        hashed_pw = generate_password_hash(password)
        new_user = User(
            Username=username,
            Email=email,
            PasswordHash=hashed_pw,
            Role="User",
            IsLocked=False
        )
        db.session.add(new_user)
        db.session.commit()
        flash("Account created successfully. Please log in.")
        return redirect(url_for("auth.login"))

    return render_template("register.html", title="Register")


# --- LOGIN ---
@auth.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username_or_email = request.form.get("username")
        password = request.form.get("password")

        user = User.query.filter(
            or_(User.Email == username_or_email, User.Username == username_or_email)
        ).first()

        if not user or not check_password_hash(user.PasswordHash, password):
            flash("Invalid username/email or password.")
            return redirect(url_for("auth.login"))

        login_user(user)
        flash("Login successful!")
        return redirect(url_for("main.profile"))

    return render_template("login.html", title="Login")


# --- LOGOUT ---
@auth.route("/logout")
@login_required
def logout():
    logout_user()
    flash("You have been logged out.")
    return redirect(url_for("auth.login"))

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\comment_routes.py ---
# app/comment_routes.py
import uuid
from datetime import datetime
from flask import Blueprint, request, jsonify
from flask_login import current_user, login_required
from . import db
from .models import Comment, Report, User, Manga

comment_bp = Blueprint('comment_bp', __name__)

def now():
    return datetime.utcnow()

# Helper: serialize comment for frontend
def serialize_comment(c):
    user = c.user
    username = user.Username if user else "Unknown"
    avatar = user.Avatar if user and user.Avatar else None
    return {
        "CommentId": c.CommentId,
        "UserId": c.UserId,
        "Username": username,
        "Avatar": avatar,
        "Content": c.Content,
        "IsSpoiler": bool(c.IsSpoiler),
        "LikeCount": int(c.LikeCount or 0),
        "DislikeCount": int(c.DislikeCount or 0),
        "CreatedAt": c.CreatedAt.isoformat() if c.CreatedAt else None,
        "UpdatedAt": c.UpdatedAt.isoformat() if c.UpdatedAt else None,
        "IsDeleted": bool(c.IsDeleted)
    }

@comment_bp.route('/manga/<uuid:manga_id>/comments', methods=['POST'])
@login_required
def add_comment(manga_id):
    """
    Creates a new comment for a manga (chapter is optional via form field 'chapter_id').
    Expects form data: content (string), is_spoiler (on/true/1) optional, chapter_id optional.
    """
    content = request.form.get('content', '').strip()
    if not content:
        return jsonify({"success": False, "message": "Content must not be empty."}), 400

    # minimal length check (from your spec): require at least 5 chars (changeable)
    if len(content) < 5:
        return jsonify({"success": False, "message": "Comment is too short (min 5 characters)."}), 400

    is_spoiler_raw = request.form.get('is_spoiler', 'false')
    is_spoiler = str(is_spoiler_raw).lower() in ['1', 'true', 'on', 'yes']

    chapter_id = request.form.get('chapter_id')  # optional

    # Ensure manga exists (defensive)
    m = Manga.query.get(manga_id)
    if not m:
        return jsonify({"success": False, "message": "Manga not found."}), 404

    new_comment = Comment(
        CommentId=str(uuid.uuid4()),
        UserId=str(current_user.get_id()).lower(),
        MangaId=str(manga_id),
        ChapterId=chapter_id if chapter_id else None,
        Content=content,
        CreatedAt=now(),
        UpdatedAt=now(),
        IsDeleted=False,
        IsSpoiler=is_spoiler,
        LikeCount=0,
        DislikeCount=0
    )
    db.session.add(new_comment)
    db.session.commit()

    return jsonify({"success": True, "comment": serialize_comment(new_comment)}), 201


@comment_bp.route('/comment/<comment_id>/like', methods=['POST'])
@login_required
def like_comment(comment_id):
    """
    Increment like counter for comment.
    (Note: project does not have per-user reaction table; this simple approach allows multiple likes by same user —
    in production you'd want a CommentReaction table to prevent duplicates.)
    """
    c = Comment.query.get(comment_id)
    if not c or c.IsDeleted:
        return jsonify({"success": False, "message": "Comment not found."}), 404
    # increment
    c.LikeCount = (c.LikeCount or 0) + 1
    db.session.add(c)
    db.session.commit()
    return jsonify({"success": True, "like_count": c.LikeCount, "dislike_count": c.DislikeCount})


@comment_bp.route('/comment/<comment_id>/dislike', methods=['POST'])
@login_required
def dislike_comment(comment_id):
    c = Comment.query.get(comment_id)
    if not c or c.IsDeleted:
        return jsonify({"success": False, "message": "Comment not found."}), 404
    c.DislikeCount = (c.DislikeCount or 0) + 1
    db.session.add(c)
    db.session.commit()
    return jsonify({"success": True, "like_count": c.LikeCount, "dislike_count": c.DislikeCount})


@comment_bp.route('/comment/<comment_id>', methods=['PUT'])
@login_required
def edit_comment(comment_id):
    """
    Edit comment content. Only owner can edit.
    Accepts form or JSON with 'content'.
    """
    c = Comment.query.get(comment_id)
    if not c or c.IsDeleted:
        return jsonify({"success": False, "message": "Comment not found."}), 404

    if str(c.UserId).lower() != str(current_user.get_id()).lower():
        return jsonify({"success": False, "message": "Forbidden: not the comment owner."}), 403

    # Retrieve content
    if request.is_json:
        payload = request.get_json()
        new_content = str(payload.get('content', '')).strip()
    else:
        new_content = str(request.form.get('content', '')).strip()

    if not new_content:
        return jsonify({"success": False, "message": "Content must not be empty."}), 400
    if len(new_content) < 5:
        return jsonify({"success": False, "message": "Comment is too short (min 5 characters)."}), 400

    c.Content = new_content
    c.UpdatedAt = now()
    db.session.add(c)
    db.session.commit()
    return jsonify({"success": True, "content": c.Content, "updated_at": c.UpdatedAt.isoformat()})


@comment_bp.route('/comment/<comment_id>', methods=['DELETE'])
@login_required
def delete_comment(comment_id):
    """
    Soft-delete comment (IsDeleted = True). Only owner can delete.
    """
    c = Comment.query.get(comment_id)
    if not c:
        return jsonify({"success": False, "message": "Comment not found."}), 404

    if str(c.UserId).lower() != str(current_user.get_id()).lower():
        return jsonify({"success": False, "message": "Forbidden: not the comment owner."}), 403

    c.IsDeleted = True
    c.UpdatedAt = now()
    db.session.add(c)
    db.session.commit()
    return jsonify({"success": True})


@comment_bp.route('/comment/<comment_id>/report', methods=['POST'])
@login_required
def report_comment(comment_id):
    """
    Create a report record for a comment. Accepts form/JSON 'reason'.
    """
    c = Comment.query.get(comment_id)
    if not c:
        return jsonify({"success": False, "message": "Comment not found."}), 404

    reason = request.form.get('reason') if not request.is_json else (request.get_json().get('reason'))
    reason = (reason or "").strip()
    if not reason:
        return jsonify({"success": False, "message": "Reason is required."}), 400

    rep = Report(
        ReportId=str(uuid.uuid4()),
        UserId=str(current_user.get_id()).lower(),
        CommentId=str(comment_id),
        Reason=reason,
        Status='pending',
        CreatedAt=now()
    )
    db.session.add(rep)
    db.session.commit()
    return jsonify({"success": True, "message": "Report submitted."})

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\list_routes.py ---
# mini-demo/app/list_routes.py
from flask import Blueprint, request, jsonify, render_template, abort, url_for, current_app
from flask_login import login_required, current_user
from app import db
from app.models import List, ListManga, ListFollower, Manga, User, MangaCover
from datetime import datetime
from sqlalchemy import or_, func
import uuid
import base64
import requests

list_bp = Blueprint("lists", __name__)

# -------------------------
# Helper: build cover_url for a Manga
# -------------------------
def _get_cover_url_for_manga(manga):
    """
    Return a URL that can be placed into <img src="...">:
      - data:image/... base64 if we have ImageData in MangaCover
      - if not, try MangaDex API to download, save to MangaCover and return base64
      - otherwise return static default cover url
    This mirrors the logic used in your main routes (home/recently_added/etc).
    """
    # 1) try to find cached cover in MangaCover
    try:
        mc = MangaCover.query.filter_by(MangaId=manga.MangaId).order_by(MangaCover.DownloadDate.desc()).first()
    except Exception:
        mc = None

    if mc and getattr(mc, "ImageData", None):
        try:
            b64 = base64.b64encode(mc.ImageData).decode("utf-8")
            return f"data:image/jpeg;base64,{b64}"
        except Exception:
            pass

    # 2) try MangaDex API (best-effort, short timeouts)
    try:
        manga_id_str = str(manga.MangaId).lower()
        api_resp = requests.get("https://api.mangadex.org/cover", params={"manga[]": manga_id_str, "limit": 1}, headers={"Referer": "https://mangadex.org"}, timeout=6)
        api_resp.raise_for_status()
        data = api_resp.json()
        if data.get("data"):
            cover_item = data["data"][0]
            file_name = cover_item.get("attributes", {}).get("fileName")
            cover_id = cover_item.get("id")
            if file_name and cover_id:
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name}"
                img_resp = requests.get(image_url, timeout=10)
                if img_resp.status_code == 200:
                    image_data = img_resp.content
                    # store into MangaCover if model exists
                    try:
                        # CoverId in your model appears to be UUID-like; attempt to coerce
                        new_mc = MangaCover(
                            MangaId=manga.MangaId,
                            CoverId=uuid.UUID(cover_id) if cover_id else None,
                            FileName=file_name,
                            ImageData=image_data,
                            DownloadDate=datetime.utcnow()
                        )
                        db.session.add(new_mc)
                        db.session.commit()
                    except Exception:
                        db.session.rollback()
                    # return base64 data uri
                    b64 = base64.b64encode(image_data).decode("utf-8")
                    return f"data:image/jpeg;base64,{b64}"
    except Exception:
        # network error / api blocked — ignore and fallthrough to default
        current_app.logger.debug("Failed to fetch cover for %s from MangaDex", getattr(manga, "MangaId", None), exc_info=True)

    # 3) fallback static
    return url_for("static", filename="assets/default_cover.png")


# -------------------------
# Helper serializers
# -------------------------
def serialize_list_basic(l, include_contains=False, manga_id=None):
    data = {
        "id": str(l.ListId),
        "name": l.Name,
        "slug": l.Slug,
        "description": l.Description,
        "visibility": l.Visibility,
        "item_count": l.ItemCount or 0,
        "follower_count": l.FollowerCount or 0,
        "updated_at": l.UpdatedAt.isoformat() if l.UpdatedAt else None,
    }
    if include_contains and manga_id:
        contains = (
            db.session.query(ListManga)
            .filter_by(ListId=l.ListId, MangaId=manga_id)
            .first()
            is not None
        )
        data["contains"] = bool(contains)
    return data

# -------------------------
# GET /api/lists
# -------------------------
@list_bp.route("/lists", methods=["GET"])
@login_required
def get_lists():
    manga_id = request.args.get("manga_id", None)
    my_lists = List.query.filter_by(UserId=current_user.UserId).order_by(List.UpdatedAt.desc()).all()

    followed = (
        db.session.query(List)
        .join(ListFollower, ListFollower.ListId == List.ListId)
        .filter(ListFollower.UserId == current_user.UserId)
        .order_by(List.UpdatedAt.desc())
        .all()
    )

    include_contains = False
    parsed_manga_id = None
    if manga_id:
        try:
            parsed_manga_id = uuid.UUID(manga_id)
            include_contains = True
        except Exception:
            include_contains = False
            parsed_manga_id = None

    my_lists_serialized = [serialize_list_basic(l, include_contains, parsed_manga_id) for l in my_lists]
    followed_serialized = [serialize_list_basic(l, False, None) for l in followed]

    return jsonify({"my_lists": my_lists_serialized, "followed_lists": followed_serialized})


# -------------------------
# POST /api/lists
# -------------------------
@list_bp.route("/lists", methods=["POST"])
@login_required
def create_list():
    data = request.get_json() or {}
    name = data.get("name")
    desc = data.get("description", "")
    visibility = data.get("visibility", "private")

    if not name:
        return jsonify({"error": "Name is required"}), 400

    slug_base = name.strip().lower().replace(" ", "-")
    slug = f"{slug_base}-{str(uuid.uuid4())[:8]}"

    new_list = List(
        ListId=uuid.uuid4(),
        UserId=current_user.UserId,
        Name=name,
        Description=desc,
        Visibility=visibility,
        Slug=slug,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
        FollowerCount=0,
        ItemCount=0,
    )
    db.session.add(new_list)
    db.session.commit()
    return jsonify({"id": str(new_list.ListId), "slug": new_list.Slug}), 201


# -------------------------
# GET /api/lists/<list_id>
# -------------------------
@list_bp.route("/lists/<uuid:list_id>", methods=["GET"])
def get_list(list_id):
    l = List.query.get_or_404(list_id)
    if l.Visibility == "private" and (not current_user.is_authenticated or l.UserId != current_user.UserId):
        abort(403)

    items = (
        db.session.query(ListManga, Manga)
        .join(Manga, ListManga.MangaId == Manga.MangaId)
        .filter(ListManga.ListId == l.ListId)
        .order_by(ListManga.Position.asc(), ListManga.AddedAt.asc())
        .all()
    )

    items_serialized = []
    for li, m in items:
        items_serialized.append({
            "manga_id": str(m.MangaId),
            "title": getattr(m, "TitleEn", "") or "",
            "note": getattr(li, "Note", None) if hasattr(li, "Note") else None,
            "position": getattr(li, "Position", None),
            "cover_id": None  # kept for backward compatibility
        })

    return jsonify({
        "id": str(l.ListId),
        "name": l.Name,
        "description": l.Description,
        "owner_id": str(l.UserId),
        "visibility": l.Visibility,
        "items": items_serialized,
        "item_count": l.ItemCount or 0,
    })


# -------------------------
# PUT/PATCH /api/lists/<list_id>
# -------------------------
@list_bp.route("/lists/<uuid:list_id>", methods=["PUT", "PATCH"])
@login_required
def update_list(list_id):
    l = List.query.get_or_404(list_id)
    if l.UserId != current_user.UserId:
        abort(403)

    data = request.get_json() or {}
    if "name" in data:
        l.Name = data["name"]
    if "description" in data:
        l.Description = data["description"]
    if "visibility" in data:
        l.Visibility = data["visibility"]
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return jsonify({"success": True}), 200


# -------------------------
# DELETE /api/lists/<list_id>
# -------------------------
@list_bp.route("/lists/<uuid:list_id>", methods=["DELETE"])
@login_required
def delete_list(list_id):
    l = List.query.get_or_404(list_id)
    if l.UserId != current_user.UserId:
        abort(403)
    db.session.delete(l)
    db.session.commit()
    return "", 204


# -------------------------
# POST /api/lists/<list_id>/items
# -------------------------
@list_bp.route("/lists/<uuid:list_id>/items", methods=["POST"])
@login_required
def add_item(list_id):
    l = List.query.get_or_404(list_id)
    if l.UserId != current_user.UserId:
        abort(403)

    data = request.get_json() or {}
    manga_id = data.get("manga_id") or data.get("MangaId")
    if not manga_id:
        return jsonify({"error": "manga_id required"}), 400

    existing = ListManga.query.filter_by(ListId=l.ListId, MangaId=manga_id).first()
    if existing:
        return jsonify({"message": "already exists", "item_count": l.ItemCount or 0}), 200

    manga_obj = Manga.query.filter_by(MangaId=manga_id).first()
    if manga_obj is None:
        return jsonify({"error": "manga not found"}), 404

    li = ListManga(
        ListId=l.ListId,
        MangaId=manga_id,
        AddedAt=datetime.utcnow(),
        Position=0,
    )
    db.session.add(li)
    l.ItemCount = (l.ItemCount or 0) + 1
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return jsonify({"success": True, "item_count": l.ItemCount}), 201


# -------------------------
# DELETE /api/lists/<list_id>/items/<manga_id>
# -------------------------
@list_bp.route("/lists/<uuid:list_id>/items/<uuid:manga_id>", methods=["DELETE"])
@login_required
def remove_item(list_id, manga_id):
    l = List.query.get_or_404(list_id)
    if l.UserId != current_user.UserId:
        abort(403)

    li = ListManga.query.filter_by(ListId=l.ListId, MangaId=manga_id).first()
    if not li:
        return jsonify({"message": "not found", "item_count": l.ItemCount or 0}), 200

    db.session.delete(li)
    l.ItemCount = max(0, (l.ItemCount or 0) - 1)
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return jsonify({"success": True, "item_count": l.ItemCount}), 200


# -------------------------
# Follow / Unfollow
# -------------------------
@list_bp.route("/lists/<uuid:list_id>/follow", methods=["POST"])
@login_required
def follow_list(list_id):
    l = List.query.get_or_404(list_id)
    if l.Visibility == "private":
        abort(403)
    exists = ListFollower.query.filter_by(ListId=l.ListId, UserId=current_user.UserId).first()
    if exists:
        return jsonify({"message": "already following"}), 200
    f = ListFollower(ListId=l.ListId, UserId=current_user.UserId)
    db.session.add(f)
    l.FollowerCount = (l.FollowerCount or 0) + 1
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return jsonify({"success": True}), 201


@list_bp.route("/lists/<uuid:list_id>/follow", methods=["DELETE"])
@login_required
def unfollow_list(list_id):
    l = List.query.get_or_404(list_id)
    f = ListFollower.query.filter_by(ListId=l.ListId, UserId=current_user.UserId).first()
    if not f:
        return "", 204
    db.session.delete(f)
    l.FollowerCount = max(0, (l.FollowerCount or 0) - 1)
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return "", 204


# -------------------------
# Public view (server rendered)
# -------------------------
@list_bp.route("/public/<slug>")
def public_view(slug):
    l = List.query.filter_by(Slug=slug).first_or_404()
    if l.Visibility == "private":
        abort(403)

    items = (
        db.session.query(ListManga, Manga)
        .join(Manga, ListManga.MangaId == Manga.MangaId)
        .filter(ListManga.ListId == l.ListId)
        .order_by(ListManga.Position.asc(), ListManga.AddedAt.asc())
        .all()
    )

    owner = User.query.filter_by(UserId=l.UserId).first()
    # enrich items with cover_url and pass to template as list of dicts
    items_enriched = []
    for li, m in items:
        cover_url = _get_cover_url_for_manga(m)
        items_enriched.append({"list_item": li, "manga": m, "cover_url": cover_url})

    list_meta = l
    list_meta.owner = owner
    return render_template("list_public.html", list=list_meta, items=items_enriched)


# GET items for a list (JSON) with optional sort
@list_bp.route("/lists/<uuid:list_id>/items", methods=["GET"])
def get_list_items(list_id):
    l = List.query.get_or_404(list_id)
    if l.Visibility == "private" and (not current_user.is_authenticated or l.UserId != current_user.UserId):
        abort(403)

    sort = request.args.get("sort", "recent")
    q = db.session.query(ListManga, Manga).join(Manga, ListManga.MangaId == Manga.MangaId).filter(ListManga.ListId == l.ListId)

    if sort == "title":
        # Manga model only has TitleEn in your schema; coalesce to empty string to avoid errors
        q = q.order_by(func.lower(func.coalesce(Manga.TitleEn, "")).asc())
    elif sort == "added":
        q = q.order_by(ListManga.AddedAt.desc())
    else:
        q = q.order_by(ListManga.AddedAt.desc())

    items = q.all()
    items_serialized = []
    for li, m in items:
        # TẠO COVER URL HOÀN CHỈNH TẠI ĐÂY
        cover_url = _get_cover_url_for_manga(m) 
        items_serialized.append({
            "manga_id": str(m.MangaId),
            "title": getattr(m, "TitleEn", "") or "",
            "cover_url": cover_url,
            "added_at": li.AddedAt.isoformat() if hasattr(li, "AddedAt") and li.AddedAt else None,
        })

    owner = User.query.filter_by(UserId=l.UserId).first()

    return jsonify({
        "list": {
            "id": str(l.ListId),
            "name": l.Name,
            "description": l.Description,
            "visibility": l.Visibility,
            "item_count": l.ItemCount or 0,
            "follower_count": l.FollowerCount or 0,
            "owner": {"id": str(owner.UserId), "username": owner.Username} if owner else None
        },
        "items": items_serialized
    })


# Bulk delete items from a list (owner only)
@list_bp.route("/lists/<uuid:list_id>/items", methods=["DELETE"])
@login_required
def bulk_delete_items(list_id):
    l = List.query.get_or_404(list_id)
    if l.UserId != current_user.UserId:
        abort(403)

    data = request.get_json() or {}
    manga_ids = data.get("manga_ids", [])
    if not isinstance(manga_ids, list) or len(manga_ids) == 0:
        return jsonify({"error": "manga_ids required (non-empty array)"}), 400

    removed = 0
    for mid in manga_ids:
        li = ListManga.query.filter_by(ListId=l.ListId, MangaId=mid).first()
        if li:
            db.session.delete(li)
            removed += 1

    l.ItemCount = max(0, (l.ItemCount or 0) - removed)
    l.UpdatedAt = datetime.utcnow()
    db.session.commit()
    return jsonify({"success": True, "removed": removed, "item_count": l.ItemCount}), 200


# Simple search endpoint for manga titles (used in Add Manga modal)
@list_bp.route("/search/manga", methods=["GET"])
@login_required
def search_manga():
    q = request.args.get("q", "").strip()
    limit = int(request.args.get("limit", 12))
    if not q:
        return jsonify({"results": []})

    like = f"%{q}%"
    # note: Manga model doesn't have Title fallback column; search TitleEn and alt titles if you want more
    results = (
        db.session.query(Manga)
        .filter(Manga.TitleEn.ilike(like))
        .limit(limit)
        .all()
    )
    out = []
    for m in results:
        out.append({
            "manga_id": str(m.MangaId),
            "title": getattr(m, "TitleEn", "") or "",
            "cover_url": _get_cover_url_for_manga(m)
        })
    return jsonify({"results": out})

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\models.py ---
from datetime import datetime
import uuid
from flask_login import UserMixin
from sqlalchemy.dialects.mssql import UNIQUEIDENTIFIER
from sqlalchemy import Column, LargeBinary, PrimaryKeyConstraint, String, Integer, Boolean, DateTime, Text, Float, ForeignKey
from sqlalchemy.orm import relationship
from . import db

# ------------------------
# USER
# ------------------------
class User(UserMixin, db.Model):
    __tablename__ = "User"
    __table_args__ = {"schema": "dbo"}

    UserId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    Username = Column(String(100), nullable=False)
    Email = Column(String(255), nullable=False)
    PasswordHash = Column(String(255), nullable=False)
    Avatar = Column(Text)
    Role = Column(String(20), nullable=False)
    IsLocked = Column(Boolean)
    CreatedAt = Column(DateTime)

    # relationships
    comments = relationship("Comment", back_populates="user")
    ratings = relationship("Rating", back_populates="user")
    lists = relationship("List", back_populates="user")
    histories = relationship("ReadingHistory", back_populates="user")
    reports = relationship("Report", back_populates="user")

    def get_id(self):
        return str(self.UserId)

# ------------------------
# MANGA
# ------------------------
class Manga(db.Model):
    __tablename__ = "Manga"
    __table_args__ = {"schema": "dbo"}

    MangaId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    Type = Column(String(50))
    TitleEn = Column(String(500))
    ChapterNumbersResetOnNewVolume = Column(Boolean)
    ContentRating = Column(String(50))
    CreatedAt = Column(DateTime)
    UpdatedAt = Column(DateTime)
    IsLocked = Column(Boolean)
    LastChapter = Column(String(50))
    LastVolume = Column(String(50))
    LatestUploadedChapter = Column(String(50))
    OriginalLanguage = Column(String(10))
    PublicationDemographic = Column(String(50))
    State = Column(String(50))
    Status = Column(String(50))
    Year = Column(Integer)
    OfficialLinks = Column(Text)

    # relationships
    chapters = relationship("Chapter", back_populates="manga")
    comments = relationship("Comment", back_populates="manga")
    ratings = relationship("Rating", back_populates="manga")
    alt_titles = relationship("MangaAltTitle", back_populates="manga")
    descriptions = relationship("MangaDescription", back_populates="manga")
    links = relationship("MangaLink", back_populates="manga")
    stats = relationship("MangaStatistics", back_populates="manga")
    available_languages = relationship("MangaAvailableLanguage", back_populates="manga")
    tags = relationship("MangaTag", back_populates="manga")
    histories = relationship("ReadingHistory", back_populates="manga")


# ------------------------
# CHAPTER
# ------------------------
class Chapter(db.Model):
    __tablename__ = "Chapter"
    __table_args__ = {"schema": "dbo"}

    ChapterId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    Type = Column(String(50))
    Volume = Column(String(50))
    ChapterNumber = Column(String(50))
    Title = Column(Text)
    TranslatedLang = Column(String(10))
    Pages = Column(Integer)
    PublishAt = Column(DateTime)
    ReadableAt = Column(DateTime)
    IsUnavailable = Column(Boolean)
    CreatedAt = Column(DateTime)
    UpdatedAt = Column(DateTime)

    manga = relationship("Manga", back_populates="chapters")
    comments = relationship("Comment", back_populates="chapter")
    histories = relationship("ReadingHistory", back_populates="chapter")


# ------------------------
# COMMENT
# ------------------------
class Comment(db.Model):
    __tablename__ = 'Comment'
    __table_args__ = {'schema': 'dbo'}
    CommentId = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    UserId = db.Column(db.String(36), db.ForeignKey('dbo.User.UserId'), nullable=False)
    MangaId = db.Column(db.String(36), db.ForeignKey('dbo.Manga.MangaId'), nullable=False)
    ChapterId = db.Column(db.String(36), db.ForeignKey('dbo.Chapter.ChapterId'), nullable=True)
    Content = db.Column(db.Text, nullable=False)
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    IsDeleted = db.Column(db.Boolean, default=False)
    IsSpoiler = db.Column(db.Boolean, default=False)
    LikeCount = db.Column(db.Integer, default=0)
    DislikeCount = db.Column(db.Integer, default=0)

    user = relationship("User", back_populates="comments")
    manga = relationship("Manga", back_populates="comments")
    chapter = relationship("Chapter", back_populates="comments")
    reports = relationship("Report", back_populates="comment")


# ------------------------
# CREATOR
# ------------------------
class Creator(db.Model):
    __tablename__ = "Creator"
    __table_args__ = {"schema": "dbo"}

    CreatorId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    Type = Column(String(50))
    Name = Column(String(500))
    ImageUrl = Column(Text)
    BiographyEn = Column(Text)
    BiographyJa = Column(Text)
    BiographyPtBr = Column(Text)
    CreatedAt = Column(DateTime)
    UpdatedAt = Column(DateTime)

    relationships = relationship("CreatorRelationship", back_populates="creator")


class CreatorRelationship(db.Model):
    __tablename__ = "CreatorRelationship"
    __table_args__ = {"schema": "dbo"}

    Id = Column(Integer, primary_key=True, autoincrement=True)
    CreatorId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Creator.CreatorId"))
    RelatedId = Column(UNIQUEIDENTIFIER, nullable=False)
    RelatedType = Column(String(50))

    creator = relationship("Creator", back_populates="relationships")


# ------------------------
# LIST
# ------------------------
class List(db.Model):
    __tablename__ = "List"
    __table_args__ = {"schema": "dbo"}

    ListId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    UserId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.User.UserId"))
    Name = Column(String(200))
    Description = Column(Text)
    IsPublic = Column(Boolean)

    Slug = Column(String(20))
    Visibility = Column(String(20))
    CreatedAt = Column(DateTime)
    UpdatedAt = Column(DateTime)

    FollowerCount = Column(Integer, default=0)
    ItemCount = Column(Integer, default=0)
    # relationships

    user = relationship("User", back_populates="lists")
    mangas = relationship("ListManga", back_populates="list")
    followers = relationship("ListFollower", back_populates="list")


class ListManga(db.Model):
    __tablename__ = "ListManga"
    __table_args__ = {"schema": "dbo"}

    ListId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.List.ListId"), primary_key=True)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"), primary_key=True)
    AddedAt = Column(DateTime)
    Position = Column(Integer, default=0)

    list = relationship("List", back_populates="mangas")
    manga = relationship("Manga")

class ListFollower(db.Model):
    __tablename__ = "ListFollower"
    __table_args__ = {"schema": "dbo"}

    ListId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.List.ListId"), primary_key=True)
    UserId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.User.UserId"), primary_key=True)
    FollowedAt = Column(DateTime, default=datetime.utcnow)

    list = relationship("List", back_populates="followers")
    user = relationship("User")

# ------------------------
# MANGA RELATED TABLES
# ------------------------
class MangaAltTitle(db.Model):
    __tablename__ = "MangaAltTitle"
    __table_args__ = {"schema": "dbo"}

    AltTitleId = Column(Integer, primary_key=True, autoincrement=True)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    LangCode = Column(String(10))
    AltTitle = Column(Text)

    manga = relationship("Manga", back_populates="alt_titles")


class MangaAvailableLanguage(db.Model):
    __tablename__ = "MangaAvailableLanguage"
    __table_args__ = {"schema": "dbo"}

    LangId = Column(Integer, primary_key=True, autoincrement=True)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    LangCode = Column(String(10))

    manga = relationship("Manga", back_populates="available_languages")


class MangaDescription(db.Model):
    __tablename__ = "MangaDescription"
    __table_args__ = {"schema": "dbo"}

    DescriptionId = Column(Integer, primary_key=True, autoincrement=True)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    LangCode = Column(String(10))
    Description = Column(Text)

    manga = relationship("Manga", back_populates="descriptions")


class MangaLink(db.Model):
    __tablename__ = "MangaLink"
    __table_args__ = {"schema": "dbo"}

    LinkId = Column(Integer, primary_key=True, autoincrement=True)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    Provider = Column(String(20))
    Url = Column(Text)

    manga = relationship("Manga", back_populates="links")


class MangaRelated(db.Model):
    __tablename__ = "MangaRelated"
    __table_args__ = {"schema": "dbo"}

    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"), primary_key=True)
    RelatedId = Column(UNIQUEIDENTIFIER, primary_key=True)
    Type = Column(String(50), primary_key=True)
    Related = Column(String(50))
    FetchedAt = Column(DateTime)


class MangaStatistics(db.Model):
    __tablename__ = "MangaStatistics"
    __table_args__ = {"schema": "dbo"}

    StatisticId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    Source = Column(String(50))
    Follows = Column(Integer)
    AverageRating = Column(Float)
    BayesianRating = Column(Float)
    UnavailableChapters = Column(Integer)
    FetchedAt = Column(DateTime)

    manga = relationship("Manga", back_populates="stats")


class Tag(db.Model):
    __tablename__ = "Tag"
    __table_args__ = {"schema": "dbo"}

    TagId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    GroupName = Column(String(100))
    NameEn = Column(String(200))

    mangas = relationship("MangaTag", back_populates="tag")


class MangaTag(db.Model):
    __tablename__ = "MangaTag"
    __table_args__ = {"schema": "dbo"}

    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"), primary_key=True)
    TagId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Tag.TagId"), primary_key=True)

    manga = relationship("Manga", back_populates="tags")
    tag = relationship("Tag", back_populates="mangas")


# ------------------------
# RATING, HISTORY, REPORT
# ------------------------
class Rating(db.Model):
    __tablename__ = "Rating"
    __table_args__ = {"schema": "dbo"}

    RatingId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    UserId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.User.UserId"))
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    Score = Column(Integer)

    user = relationship("User", back_populates="ratings")
    manga = relationship("Manga", back_populates="ratings")


class ReadingHistory(db.Model):
    __tablename__ = "ReadingHistory"
    __table_args__ = {"schema": "dbo"}

    HistoryId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    UserId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.User.UserId"))
    MangaId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Manga.MangaId"))
    ChapterId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Chapter.ChapterId"))
    LastPageRead = Column(Integer)
    ReadAt = Column(DateTime)

    user = relationship("User", back_populates="histories")
    manga = relationship("Manga", back_populates="histories")
    chapter = relationship("Chapter", back_populates="histories")


class Report(db.Model):
    __tablename__ = "Report"
    __table_args__ = {"schema": "dbo"}

    ReportId = Column(UNIQUEIDENTIFIER, primary_key=True, default=uuid.uuid4)
    UserId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.User.UserId"))
    CommentId = Column(UNIQUEIDENTIFIER, ForeignKey("dbo.Comment.CommentId"))
    Reason = Column(Text)
    Status = Column(String(50))
    CreatedAt = Column(DateTime)

    user = relationship("User", back_populates="reports")
    comment = relationship("Comment", back_populates="reports")
    
# ------------------------
# MANGA COVER
# ------------------------
class MangaCover(db.Model):
    __tablename__ = "MangaCover"
    __table_args__ = (
        PrimaryKeyConstraint("MangaId", "CoverId", "FileName", name="PK_MangaCover"),
        {"schema": "dbo"}
    )

    MangaId = Column(UNIQUEIDENTIFIER, nullable=False)
    CoverId = Column(UNIQUEIDENTIFIER, nullable=False)
    FileName = Column(String(255), nullable=False)
    DownloadDate = Column(DateTime, nullable=False, default=datetime.utcnow)
    ImageData = Column(LargeBinary, nullable=False)


class Cover(db.Model):
    __tablename__ = "Covers"

    cover_id = db.Column(db.String(36), primary_key=True)  # UUID string
    manga_id = db.Column(db.String(36), nullable=False)
    type = db.Column(db.String(50))
    description = db.Column(db.Text)
    volume = db.Column(db.String(50))
    fileName = db.Column(db.String(255))
    locale = db.Column(db.String(10))
    createdAt = db.Column(db.DateTime)
    updatedAt = db.Column(db.DateTime)
    version = db.Column(db.Integer)
    rel_user_id = db.Column(db.String(36))
    url = db.Column(db.String(500))
    image_data = db.Column(db.LargeBinary)  # lưu binary ảnh
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\reader_controller.py ---
import uuid
from . import db
from .models import Chapter, ReadingHistory, Manga
from sqlalchemy import func
from uuid import UUID
import requests
from datetime import datetime

def get_available_langs(manga_id):
    """Trả về danh sách ngôn ngữ có sẵn cho chapters của manga."""
    # Chuyển manga_id thành chuỗi
    manga_id_str = str(manga_id)  # UUID đã được Flask xử lý, chỉ cần str()
    
    chapters = db.session.query(Chapter)\
        .filter(
            Chapter.MangaId == manga_id_str,
            Chapter.TranslatedLang.in_(['en', 'vi']),
            Chapter.IsUnavailable == False
        )\
        .order_by(Chapter.ChapterNumber.asc())\
        .all()
    
    print(f"Found {len(chapters)} chapters for manga {manga_id_str}")
    for chap in chapters:
        print(f"Chapter {chap.ChapterNumber}, Lang: {chap.TranslatedLang}, IsUnavailable: {chap.IsUnavailable}")
    
    langs = sorted(list(set(c.TranslatedLang for c in chapters)))
    print(f"Available languages for manga {manga_id_str}: {langs}")
    return langs

def get_continue_chapter(user_id, manga_id):
    """Tìm chapter tiếp theo để đọc dựa trên lịch sử hoặc chapter đầu tiên."""
    manga_id_str = str(manga_id)  # UUID đã được Flask xử lý, chỉ cần str()
    
    if user_id:
        history = db.session.query(ReadingHistory)\
            .filter_by(UserId=user_id, MangaId=manga_id_str)\
            .order_by(ReadingHistory.LastRead.desc())\
            .first()
        
        if history:
            last_chapter_id = history.ChapterId
            last_chapter = db.session.query(Chapter)\
                .filter_by(ChapterId=last_chapter_id, MangaId=manga_id_str, IsUnavailable=False)\
                .first()
            
            if last_chapter:
                next_chapters = db.session.query(Chapter)\
                    .filter(
                        Chapter.MangaId == manga_id_str,
                        Chapter.TranslatedLang == last_chapter.TranslatedLang,
                        Chapter.ChapterNumber > last_chapter.ChapterNumber,
                        Chapter.IsUnavailable == False
                    )\
                    .order_by(Chapter.ChapterNumber.asc())\
                    .all()
                
                next_chapter = next_chapters[0] if next_chapters else last_chapter
                return next_chapter, last_chapter.TranslatedLang
    
    # Nếu không có lịch sử, lấy chapter đầu tiên
    first_chapter = db.session.query(Chapter)\
        .filter(
            Chapter.MangaId == manga_id_str,
            Chapter.TranslatedLang.in_(['en', 'vi']),
            Chapter.IsUnavailable == False
        )\
        .order_by(Chapter.ChapterNumber.asc())\
        .first()
    
    return (first_chapter, first_chapter.TranslatedLang) if first_chapter else (None, None)

def sync_chapters(manga_id):
    try:
        params = {
            "translatedLanguage[]": ["en", "vi"],
            "limit": 100
        }
        resp = requests.get(f"https://api.mangadex.org/manga/{manga_id}/feed", params=params)
        resp.raise_for_status()
        data = resp.json()
        chapters = data.get("data", [])
        
        for chap in chapters:
            chapter_id = chap["id"]
            attributes = chap["attributes"]
            existing = db.session.query(Chapter).filter_by(ChapterId=chapter_id).first()
            if not existing:
                new_chapter = Chapter(
                    ChapterId=chapter_id,
                    MangaId=manga_id,
                    Type=attributes.get("type"),
                    Volume=attributes.get("volume"),
                    ChapterNumber=attributes.get("chapter"),
                    Title=attributes.get("title"),
                    TranslatedLang=attributes.get("translatedLanguage"),
                    Pages=len(attributes.get("pages", [])),
                    PublishAt=attributes.get("publishAt"),
                    ReadableAt=attributes.get("readableAt"),
                    IsUnavailable=False,
                    CreatedAt=attributes.get("createdAt"),
                    UpdatedAt=attributes.get("updatedAt")
                )
                db.session.add(new_chapter)
        db.session.commit()
        return True
    except Exception as e:
        print(f"Error syncing chapters for manga {manga_id}: {str(e)}")
        return False

def get_first_chapter(manga_id, lang):
    manga_id_str = str(UUID(manga_id)) if not isinstance(manga_id, str) else manga_id
    fallback_lang = 'vi' if lang == 'en' else 'en'
    chap = db.session.query(Chapter).filter(
        Chapter.MangaId == manga_id_str,
        Chapter.TranslatedLang == lang,
        Chapter.IsUnavailable == False
    ).order_by(Chapter.ChapterNumber.asc()).first()
    if not chap:
        chap = db.session.query(Chapter).filter(
            Chapter.MangaId == manga_id_str,
            Chapter.TranslatedLang == fallback_lang,
            Chapter.IsUnavailable == False
        ).order_by(Chapter.ChapterNumber.asc()).first()
    return chap

def get_chapter(manga_id, chapter_id):
    manga_id_str = str(UUID(manga_id)) if not isinstance(manga_id, str) else manga_id
    return db.session.query(Chapter).filter(
        Chapter.MangaId == manga_id_str,
        Chapter.ChapterId == chapter_id,
        Chapter.IsUnavailable == False
    ).first()

def get_next_chapter(manga_id, current_num, lang):
    manga_id_str = str(UUID(manga_id)) if not isinstance(manga_id, str) else manga_id
    fallback_lang = 'vi' if lang == 'en' else 'en'
    next_chap = db.session.query(Chapter).filter(
        Chapter.MangaId == manga_id_str,
        Chapter.ChapterNumber > current_num,
        Chapter.TranslatedLang == lang,
        Chapter.IsUnavailable == False
    ).order_by(Chapter.ChapterNumber.asc()).first()
    if not next_chap:
        next_chap = db.session.query(Chapter).filter(
            Chapter.MangaId == manga_id_str,
            Chapter.ChapterNumber > current_num,
            Chapter.TranslatedLang == fallback_lang,
            Chapter.IsUnavailable == False
        ).order_by(Chapter.ChapterNumber.asc()).first()
    return next_chap

def get_prev_chapter(manga_id, current_num, lang):
    manga_id_str = str(UUID(manga_id)) if not isinstance(manga_id, str) else manga_id
    fallback_lang = 'vi' if lang == 'en' else 'en'
    prev_chap = db.session.query(Chapter).filter(
        Chapter.MangaId == manga_id_str,
        Chapter.ChapterNumber < current_num,
        Chapter.TranslatedLang == lang,
        Chapter.IsUnavailable == False
    ).order_by(Chapter.ChapterNumber.desc()).first()
    if not prev_chap:
        prev_chap = db.session.query(Chapter).filter(
            Chapter.MangaId == manga_id_str,
            Chapter.ChapterNumber < current_num,
            Chapter.TranslatedLang == fallback_lang,
            Chapter.IsUnavailable == False
        ).order_by(Chapter.ChapterNumber.desc()).first()
    return prev_chap

def save_reading_history(user_id, manga_id, chapter_id, last_page):
    manga_id_str = str(UUID(manga_id)) if not isinstance(manga_id, str) else manga_id
    history = db.session.query(ReadingHistory).filter(
        ReadingHistory.UserId == user_id,
        ReadingHistory.MangaId == manga_id_str,
        ReadingHistory.ChapterId == chapter_id
    ).first()
    now = datetime.utcnow()
    if history:
        history.LastPageRead = last_page
        history.ReadAt = now
    else:
        history = ReadingHistory(
            HistoryId=uuid.uuid4(),
            UserId=user_id,
            MangaId=manga_id_str,
            ChapterId=chapter_id,
            LastPageRead=last_page,
            ReadAt=now
        )
        db.session.add(history)
    db.session.commit()
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\routes.py ---
import base64
from io import BytesIO
import shutil
from flask import Blueprint, abort, flash, jsonify, redirect, render_template, request, send_file, url_for
from flask_login import current_user, login_required
from datetime import datetime
from dateutil.relativedelta import relativedelta  # Sử dụng relativedelta để tính chính xác hơn timedelta(months=4)
import requests
from sqlalchemy import desc, func, or_

from app.comment_routes import now
from app.reader_controller import get_available_langs
from .models import Chapter, Cover, Creator, List, Manga, MangaAltTitle, MangaCover, MangaDescription, MangaLink, MangaRelated, MangaStatistics, MangaTag, Rating, Report, Tag, Comment
from . import db
import os
import uuid

from app.models import ListManga

main = Blueprint('main', __name__)
manga = Blueprint('manga', __name__)

# ======================
# Helper
# ======================

BASE_URL = "https://api.mangadex.org"

# Helper: fetch cover từ MangaDex nếu DB chưa có
def fetch_and_store_covers(manga_id):
    limit, offset = 100, 0
    while True:
        params = {"manga[]": manga_id, "limit": limit, "offset": offset}
        resp = requests.get(f"{BASE_URL}/cover", params=params)
        resp.raise_for_status()
        data = resp.json()

        if not data.get("data"):
            break

        for item in data["data"]:
            cid = item["id"]
            attrs = item.get("attributes", {})
            filename = attrs.get("fileName")
            url = f"https://uploads.mangadex.org/covers/{manga_id}/{filename}"

            # nếu chưa có trong DB thì insert
            if not Cover.query.get(cid):
                image_data = None
                try:
                    img_resp = requests.get(url)
                    if img_resp.status_code == 200:
                        image_data = img_resp.content
                except:
                    pass

                cover = Cover(
                    cover_id=cid,
                    manga_id=manga_id,
                    type=item.get("type"),
                    description=attrs.get("description"),
                    volume=attrs.get("volume"),
                    fileName=filename,
                    locale=attrs.get("locale"),
                    createdAt=attrs.get("createdAt"),
                    updatedAt=attrs.get("updatedAt"),
                    version=attrs.get("version"),
                    rel_user_id=None,
                    url=url,
                    image_data=image_data
                )
                db.session.add(cover)

        db.session.commit()

        offset += limit
        if offset >= data["total"]:
            break

# ======================
# Provider mapping
# ======================
PROVIDER_MAP = {
    "al": ("AniList", "https://anilist.co/manga/{}"),
    "ap": ("Anime-Planet", "https://www.anime-planet.com/manga/{}"),
    "bw": ("BookWalker", "https://www.bookwalker.jp{}"),
    "kt": ("Kitsu", "https://kitsu.io/manga/{}"),
    "mu": ("MangaUpdates", "https://www.mangaupdates.com/series.html?id={}"),
    "amz": ("Amazon JP", "https://www.amazon.co.jp/dp/{}"),
    "cdj": ("CDJapan", "https://www.cdjapan.co.jp/product/{}"),
    "ebj": ("eBookJapan", "https://ebookjapan.yahoo.co.jp/books/{}"),
    "mal": ("MyAnimeList", "https://myanimelist.net/manga/{}"),
    "dj": ("DLsite", "https://www.dlsite.com/maniax/work/=/product_id/{}.html"),
    "nu": ("Renta!", "https://www.ebookrenta.com/renta/sc/frm/item/{}"),
}

def resolve_manga_links(manga_id):
    """Query MangaLink từ DB và enrich với ProviderFullName + Url đầy đủ."""
    links = MangaLink.query.filter_by(MangaId=manga_id).all()
    resolved_links = []

    for link in links:
        provider = link.Provider
        url_value = link.Url
        provider_full, url_pattern = PROVIDER_MAP.get(provider, (provider.upper(), None))

        if not url_value:
            continue
        if url_value.startswith("http://") or url_value.startswith("https://"):
            final_url = url_value
        elif url_pattern:
            final_url = url_pattern.format(url_value)
        else:
            final_url = url_value  # fallback nếu không có mapping

        resolved_links.append({
            "Provider": provider,
            "ProviderFullName": provider_full,
            "Url": final_url
        })
    return resolved_links


@main.route('/')
@main.route('/home')
def home():
    # Tính thời gian 4 tháng trước (dùng relativedelta, dựa trên thời gian thực tế 02:50 AM +07, 21/09/2025)
    current_date = datetime(2025, 9, 21, 2, 50)  # Cập nhật theo thời gian hiện tại
    four_months_ago = current_date - relativedelta(months=4)

    # Query: Join Manga với MangaStatistics, filter UpdatedAt >= 4 tháng trước,
    # loại bỏ null ở các cột required, order by Follows desc, paginate 10/page
    page = request.args.get('page', 1, type=int)
    query = (
        db.session.query(Manga)
        .join(MangaStatistics)
        .filter(
            Manga.UpdatedAt >= four_months_ago,
            Manga.TitleEn.isnot(None),
            Manga.ContentRating.isnot(None),
            Manga.PublicationDemographic.isnot(None),
            Manga.Status.isnot(None),
            Manga.Year.isnot(None),
            MangaStatistics.Follows.isnot(None),
            MangaStatistics.AverageRating.isnot(None)
        )
        .order_by(MangaStatistics.Follows.desc())
        .paginate(page=page, per_page=10, error_out=False)
    )

    mangas = query.items
    pagination = query

    # Lấy URL cover cho mỗi manga từ bảng MangaCover
    manga_data = []
    for manga in mangas:
        stats = manga.stats[0] if manga.stats else None
        if not stats:
            continue  # Skip nếu không có stats

        # Tra cứu trong MangaCover theo MangaId, sắp xếp theo DownloadDate gần nhất
        cover = MangaCover.query.filter_by(MangaId=manga.MangaId).order_by(MangaCover.DownloadDate.desc()).first()
        if cover:
            # Chuyển đổi ImageData thành URL base64 để nhúng vào HTML
            image_data = base64.b64encode(cover.ImageData).decode('utf-8')
            cover_url = f"data:image/jpeg;base64,{image_data}"  # Giả sử định dạng là JPEG, điều chỉnh nếu cần
        else:
            # Nếu không tìm thấy, tải ảnh và lưu vào bảng
            cover_info = get_cover_info(str(manga.MangaId).lower())
            if cover_info:
                manga_id = cover_info['manga_id']
                cover_id = cover_info['cover_id']
                file_name = cover_info['file_name']
                image_url = f"https://uploads.mangadex.org/covers/{manga_id}/{file_name}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=manga.MangaId,
                        CoverId=cover_id,
                        FileName=file_name,
                        ImageData=image_data
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    # Chuyển đổi ImageData mới thành URL base64
                    image_data = base64.b64encode(image_data).decode('utf-8')
                    cover_url = f"data:image/jpeg;base64,{image_data}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id}: {e}")
                    cover_url = url_for('static', filename='assets/default_cover.png')
            else:
                cover_url = url_for('static', filename='assets/default_cover.png')
        
        your_score = None
        if current_user.is_authenticated:
            r = Rating.query.filter_by(UserId=current_user.UserId, MangaId=manga.MangaId).first()
            if r:
                your_score = int(r.Score)

        manga_data.append({
            'manga': manga,
            'stats': stats,
            'cover_url': cover_url,
            'your_score': your_score
        })

    return render_template('home.html', mangas=manga_data, pagination=pagination, is_authenticated=current_user.is_authenticated)


@main.route('/search', methods=['GET'])
def search():
    title = request.args.get('title', '').strip()
    if not title:
        return jsonify([])

    # Step 1: Create a subquery to find unique Manga IDs matching the title
    matching_manga_ids_subquery = db.session.query(Manga.MangaId)\
        .outerjoin(MangaAltTitle, Manga.MangaId == MangaAltTitle.MangaId)\
        .filter(or_(Manga.TitleEn.ilike(f"%{title}%"), MangaAltTitle.AltTitle.ilike(f"%{title}%")))\
        .group_by(Manga.MangaId)\
        .subquery()

    # Step 2: Query for the full Manga objects using the IDs from the subquery
    mangas = db.session.query(Manga)\
        .join(matching_manga_ids_subquery, Manga.MangaId == matching_manga_ids_subquery.c.MangaId)\
        .join(MangaStatistics, Manga.MangaId == MangaStatistics.MangaId)\
        .order_by(desc(MangaStatistics.Follows))\
        .limit(5).all()

    results = []
    for m in mangas:
        # --- BẮT ĐẦU THAY ĐỔI TẠI ĐÂY ---
        # Logic lấy ảnh bìa, nếu không có thì tải về
        cover = MangaCover.query.filter_by(MangaId=m.MangaId).order_by(MangaCover.DownloadDate.desc()).first()
        if cover:
            image_data_b64 = base64.b64encode(cover.ImageData).decode('utf-8')
            cover_url = f"data:image/jpeg;base64,{image_data_b64}"
        else:
            cover_info = get_cover_info(str(m.MangaId).lower())
            if cover_info:
                manga_id_str = cover_info['manga_id']
                cover_id_str = cover_info['cover_id']
                file_name_str = cover_info['file_name']
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name_str}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=m.MangaId,
                        CoverId=uuid.UUID(cover_id_str),
                        FileName=file_name_str,
                        ImageData=image_data
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    image_data_b64 = base64.b64encode(image_data).decode('utf-8')
                    cover_url = f"data:image/jpeg;base64,{image_data_b64}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id_str}: {e}")
                    cover_url = url_for('static', filename='assets/default_cover.png')
            else:
                cover_url = url_for('static', filename='assets/default_cover.png')
        # --- KẾT THÚC THAY ĐỔI ---

        stats = MangaStatistics.query.filter_by(MangaId=m.MangaId).first()
        rating = stats.AverageRating if stats and stats.AverageRating else stats.BayesianRating if stats else 0
        follows = stats.Follows if stats else 0

        results.append({
            'id': str(m.MangaId),
            'title': m.TitleEn,
            'cover_url': cover_url,
            'rating': round(rating, 1),
            'follows': follows,
            'status': m.Status or 'Unknown'
        })

    return jsonify(results)

def get_cover_info(manga_id):
    """Lấy thông tin cover từ API Mangadex, bao gồm cover_id."""
    api_url = "https://api.mangadex.org/cover"
    params = {"manga[]": manga_id, "limit": 1}
    headers = {"Referer": "https://mangadex.org"}
    try:
        resp = requests.get(api_url, params=params, headers=headers)
        resp.raise_for_status()
        data = resp.json()
        if data.get("data"):
            cover = data["data"][0]
            file_name = cover["attributes"]["fileName"]
            cover_id = cover["id"]
            return {"manga_id": manga_id, "cover_id": cover_id, "file_name": file_name}
    except Exception as e:
        print(f"Error fetching cover info for {manga_id}: {e}")
        pass
    return None


@main.route("/require-login")
def require_login():
    return render_template("require_login.html", title="Restricted")


@main.route("/profile")
@login_required
def profile():
    return render_template("profile.html", title="Profile", user=current_user)

@main.route("/advanced-search")
def advanced_search():
    return render_template("advanced_search.html", title="Advanced Search")

@main.route('/recently_added')
def recently_added():
    page = request.args.get('page', 1, type=int)
    per_page = 10
    manga_query = db.session.query(Manga, MangaCover.ImageData, MangaStatistics.AverageRating, MangaStatistics.Follows)\
        .outerjoin(MangaCover, Manga.MangaId == MangaCover.MangaId)\
        .outerjoin(MangaStatistics, Manga.MangaId == MangaStatistics.MangaId)\
        .order_by(Manga.CreatedAt.desc())
    
    pagination = manga_query.paginate(page=page, per_page=per_page, error_out=False)
    mangas = []
    
    for item in pagination.items:
        manga, image_data, avg_rating, follows = item
        cover_url = url_for('static', filename='assets/default_cover.png')
        
        if image_data:
            # Convert ImageData to base64 URL
            image_data_b64 = base64.b64encode(image_data).decode('utf-8')
            cover_url = f"data:image/jpeg;base64,{image_data_b64}"
        else:
            # Fetch cover from MangaDex API if not in MangaCover
            cover_info = get_cover_info(str(manga.MangaId).lower())
            if cover_info:
                manga_id_str = cover_info['manga_id']
                cover_id_str = cover_info['cover_id']
                file_name_str = cover_info['file_name']
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name_str}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=manga.MangaId,
                        CoverId=uuid.UUID(cover_id_str),
                        FileName=file_name_str,
                        ImageData=image_data,
                        DownloadDate=datetime.utcnow()
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    image_data_b64 = base64.b64encode(image_data).decode('utf-8')
                    cover_url = f"data:image/jpeg;base64,{image_data_b64}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id_str}: {e}")
        
        your_score = None
        if current_user.is_authenticated:
            r = Rating.query.filter_by(UserId=current_user.UserId, MangaId=manga.MangaId).first()
            if r:
                your_score = int(r.Score)
        
        mangas.append({
            'manga': manga,
            'cover_url': cover_url,
            'stats': {'AverageRating': avg_rating, 'Follows': follows},
            'your_score': your_score
        })
    
    return render_template(
        'recently_added.html',
        mangas=mangas,
        pagination=pagination,
        is_authenticated=current_user.is_authenticated
    )

@main.route('/latest_updates')
def latest_updates():
    page = request.args.get('page', 1, type=int)
    per_page = 10
    manga_query = db.session.query(Manga, MangaCover.ImageData, MangaStatistics.AverageRating, MangaStatistics.Follows)\
        .outerjoin(MangaCover, Manga.MangaId == MangaCover.MangaId)\
        .outerjoin(MangaStatistics, Manga.MangaId == MangaStatistics.MangaId)\
        .order_by(Manga.UpdatedAt.desc())
    
    pagination = manga_query.paginate(page=page, per_page=per_page, error_out=False)
    mangas = []
    
    for item in pagination.items:
        manga, image_data, avg_rating, follows = item
        cover_url = url_for('static', filename='assets/default_cover.png')
        
        if image_data:
            # Convert ImageData to base64 URL
            image_data_b64 = base64.b64encode(image_data).decode('utf-8')
            cover_url = f"data:image/jpeg;base64,{image_data_b64}"
        else:
            # Fetch cover from MangaDex API if not in MangaCover
            cover_info = get_cover_info(str(manga.MangaId).lower())
            if cover_info:
                manga_id_str = cover_info['manga_id']
                cover_id_str = cover_info['cover_id']
                file_name_str = cover_info['file_name']
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name_str}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=manga.MangaId,
                        CoverId=uuid.UUID(cover_id_str),
                        FileName=file_name_str,
                        ImageData=image_data,
                        DownloadDate=datetime.utcnow()
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    image_data_b64 = base64.b64encode(image_data).decode('utf-8')
                    cover_url = f"data:image/jpeg;base64,{image_data_b64}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id_str}: {e}")
        
        your_score = None
        if current_user.is_authenticated:
            rating = Rating.query.filter_by(UserId=current_user.UserId, MangaId=manga.MangaId).first()
            your_score = rating.Score if rating else None
        
        mangas.append({
            'manga': manga,
            'cover_url': cover_url,
            'stats': {'AverageRating': avg_rating, 'Follows': follows},
            'your_score': your_score
        })
    
    return render_template(
        'latest_updates.html',
        mangas=mangas,
        pagination=pagination,
        is_authenticated=current_user.is_authenticated
    )

@main.route("/random")
def random():
    random_manga = db.session.query(Manga).order_by(func.newid()).first()
    if random_manga:
        return redirect(url_for('manga.manga_detail', manga_id=random_manga.MangaId))
    else:
        return render_template("random.html", title="Random")  # Fallback nếu không có manga nào
    
    

@main.route("/updates")
def updates():
    if not current_user.is_authenticated:
        return render_template("require_login.html", title="Updates")

    page = request.args.get("page", 1, type=int)
    per_page = 10

    # Chỉ lấy Manga có trong các list của user hiện tại
    manga_query = (
        db.session.query(Manga, MangaCover.ImageData, MangaStatistics.AverageRating, MangaStatistics.Follows)
        .join(ListManga, ListManga.MangaId == Manga.MangaId)
        .join(List, List.ListId == ListManga.ListId)
        .outerjoin(MangaCover, Manga.MangaId == MangaCover.MangaId)
        .outerjoin(MangaStatistics, Manga.MangaId == MangaStatistics.MangaId)
        .filter(List.UserId == current_user.UserId)
        .order_by(Manga.UpdatedAt.desc())
    )

    pagination = manga_query.paginate(page=page, per_page=per_page, error_out=False)
    mangas = []

    for item in pagination.items:
        manga, image_data, avg_rating, follows = item
        cover_url = url_for("static", filename="assets/default_cover.png")

        if image_data:
            image_data_b64 = base64.b64encode(image_data).decode("utf-8")
            cover_url = f"data:image/jpeg;base64,{image_data_b64}"
        else:
            cover_info = get_cover_info(str(manga.MangaId).lower())
            if cover_info:
                manga_id_str = cover_info["manga_id"]
                cover_id_str = cover_info["cover_id"]
                file_name_str = cover_info["file_name"]
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name_str}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=manga.MangaId,
                        CoverId=uuid.UUID(cover_id_str),
                        FileName=file_name_str,
                        ImageData=image_data,
                        DownloadDate=datetime.utcnow(),
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    image_data_b64 = base64.b64encode(image_data).decode("utf-8")
                    cover_url = f"data:image/jpeg;base64,{image_data_b64}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id_str}: {e}")

        your_score = None
        if current_user.is_authenticated:
            rating = Rating.query.filter_by(UserId=current_user.UserId, MangaId=manga.MangaId).first()
            your_score = rating.Score if rating else None

        mangas.append(
            {
                "manga": manga,
                "cover_url": cover_url,
                "stats": {"AverageRating": avg_rating, "Follows": follows},
                "your_score": your_score,
            }
        )

    return render_template(
        "updates.html",
        mangas=mangas,
        pagination=pagination,
        is_authenticated=current_user.is_authenticated,
    )



@main.route("/library")
def library():
    if not current_user.is_authenticated:
        return render_template("require_login.html", title="Library")
    return render_template("library.html", title="Library")


@main.route("/reading-history")
def reading_history():
    if not current_user.is_authenticated:
        return render_template("require_login.html", title="Reading History")
    return render_template("reading_history.html", title="Reading History")

@main.route("/login", endpoint="login")
def login():
    return render_template("login.html")

@main.route("/register", endpoint="register")
def register():
    return render_template("register.html")


# ================
# Manga routes
# ================

@manga.route('/<uuid:manga_id>')
def manga_detail(manga_id):
    # Chuyển manga_id thành chuỗi UUID
    manga_id_str = str(manga_id)
    manga = Manga.query.get(manga_id_str)
    if not manga:
        print(f"Manga not found: {manga_id_str}")
        return render_template('error.html', message='Manga not found'), 404

    # Kiểm tra chapters
    available_langs = get_available_langs(manga_id_str)
    has_chapters = len(available_langs) > 0
    print(f"has_chapters for manga {manga_id_str}: {has_chapters}")  # Debug

    # --- cover logic (as in your original file) ---
    cover = MangaCover.query.filter_by(MangaId=manga_id).order_by(MangaCover.DownloadDate.desc()).first()

    if not cover:
        # keep fallback logic from your project (use default cover)
        manga_cover_url = url_for('static', filename='assets/default_cover.png')
    else:
        manga_cover_url = f"data:image/jpeg;base64,{base64.b64encode(cover.ImageData).decode('utf-8')}" if cover else url_for('static', filename='assets/default_cover.png')

    manga_stats = MangaStatistics.query.filter_by(MangaId=manga_id).first()

    content_tags = Tag.query.join(MangaTag).filter(MangaTag.MangaId == manga_id, Tag.GroupName == 'content').all()

    descriptions = MangaDescription.query.filter_by(MangaId=manga_id).all()
    manga_description = next((d.Description for d in descriptions if d.LangCode == 'en'),
                            next((d.Description for d in descriptions if d.LangCode == 'vi'),
                                 next((d.Description for d in descriptions if d.LangCode == 'ja'),
                                      next((d.Description for d in descriptions if d.LangCode), None))))
    description_long = len(manga_description or '') > 200 if manga_description else False

    # creators
    related_creators = (
        db.session.query(MangaRelated, Creator)
        .join(Creator, MangaRelated.RelatedId == Creator.CreatorId)
        .filter(MangaRelated.MangaId == manga_id)
        .all()
    )
    authors = [creator for rel, creator in related_creators if rel.Type == 'author']
    artists = [creator for rel, creator in related_creators if rel.Type == 'artist']

    tags = Tag.query.join(MangaTag).filter(MangaTag.MangaId == manga_id, Tag.GroupName.in_(['genre', 'theme', 'format'])).all()
    genres = [t for t in tags if t.GroupName == 'genre']
    themes = [t for t in tags if t.GroupName == 'theme']
    formats = [t for t in tags if t.GroupName == 'format']

    # resolve manga_links logic exists in your file; keep calling that if defined
    try:
        manga_links = resolve_manga_links(manga_id)
    except Exception:
        manga_links = []

    alt_titles = MangaAltTitle.query.filter_by(MangaId=manga_id).all()

    # --- COMMENTS: get current sort & page from querystring ---
    sort = request.args.get('sort', 'newest')
    page = request.args.get('page', 1, type=int)
    per_page = 10

    comments_query = Comment.query.filter_by(MangaId=str(manga_id), IsDeleted=False)

    if sort == 'oldest':
        comments_query = comments_query.order_by(Comment.CreatedAt.asc())
    elif sort == 'most_liked':
        comments_query = comments_query.order_by(Comment.LikeCount.desc(), Comment.CreatedAt.desc())
    else:  # newest
        comments_query = comments_query.order_by(Comment.CreatedAt.desc())

    comments_pagination = comments_query.paginate(page=page, per_page=per_page, error_out=False)
    comments = comments_pagination.items

    tab_contents = {
        'chapters': url_for('manga.chapters', manga_id=manga.MangaId),
        'comments': url_for('manga.comments', manga_id=manga.MangaId),
        'art': url_for('manga.manga_art', manga_id=manga.MangaId),
        'related': url_for('manga.related', manga_id=manga.MangaId)
    }

    return render_template('manga_detail.html',
                           manga=manga,
                           manga_cover_url=manga_cover_url,
                           manga_stats=manga_stats,
                           content_tags=content_tags,
                           manga_description=manga_description,
                           description_long=description_long,
                           authors=authors,
                           artists=artists,
                           genres=genres,
                           themes=themes,
                           formats=formats,
                           manga_links=manga_links,
                           alt_titles=alt_titles,
                           tab_contents=tab_contents,
                           comments=comments,
                           comments_pagination=comments_pagination,
                           comments_sort=sort,
                           is_authenticated=current_user.is_authenticated,
                           has_chapters=has_chapters)

# ======================
# Comment helpers
# ======================
def serialize_comment(c):
    user = c.user
    username = user.Username if user else "Unknown"
    avatar = user.Avatar if user and user.Avatar else None
    return {
        "CommentId": c.CommentId,
        "UserId": c.UserId,
        "Username": username,
        "Avatar": avatar,
        "Content": c.Content,
        "IsSpoiler": bool(c.IsSpoiler),
        "LikeCount": int(c.LikeCount or 0),
        "DislikeCount": int(c.DislikeCount or 0),
        "CreatedAt": c.CreatedAt.isoformat() if c.CreatedAt else None,
        "UpdatedAt": c.UpdatedAt.isoformat() if c.UpdatedAt else None,
        "IsDeleted": bool(c.IsDeleted)
    }


# ======================
# Manga + Comment routes
# ======================


@manga.route('/<uuid:manga_id>/chapters')
def chapters(manga_id):
    manga = Manga.query.get(manga_id)
    if not manga:
        return "Manga not found", 404
    chapters = Chapter.query.filter_by(MangaId=manga_id).order_by(Chapter.ChapterNumber.desc()).all()
    return render_template('chapters.html', manga_id=manga_id, chapters=chapters)


# ======================
# Comment APIs (full CRUD + reaction + report)
# ======================

@manga.route('/<uuid:manga_id>/comments', methods=['GET'])
def comments(manga_id):
    """
    This route returns the comments partial (if you call via AJAX) or can be navigated to directly.
    The main manga_detail passes comments into template already, but we keep this route for direct access.
    """
    # We'll reuse logic from manga_detail: fetch comments sorted/paginated
    sort = request.args.get('sort', 'newest')
    page = request.args.get('page', 1, type=int)
    per_page = 10

    comments_query = Comment.query.filter_by(MangaId=str(manga_id), IsDeleted=False)

    if sort == 'oldest':
        comments_query = comments_query.order_by(Comment.CreatedAt.asc())
    elif sort == 'most_liked':
        comments_query = comments_query.order_by(Comment.LikeCount.desc(), Comment.CreatedAt.desc())
    else:
        comments_query = comments_query.order_by(Comment.CreatedAt.desc())

    comments_pagination = comments_query.paginate(page=page, per_page=per_page, error_out=False)
    comments = comments_pagination.items

    return render_template('comments.html',
                           manga_id=manga_id,
                           comments=comments,
                           comments_pagination=comments_pagination,
                           comments_sort=sort,
                           is_authenticated=current_user.is_authenticated)



@manga.route("/manga/<manga_id>/art", methods=["GET"])
def manga_art(manga_id):
    # Kiểm tra DB có dữ liệu chưa
    covers = Cover.query.filter_by(manga_id=manga_id).all()
    if not covers:
        fetch_and_store_covers(manga_id)
        covers = Cover.query.filter_by(manga_id=manga_id).all()

    # Lấy list locale unique
    all_locales = sorted({c.locale for c in covers if c.locale})

    # Locale filter từ query string
    selected_locales = request.args.getlist("locale")

    # Nếu chưa chọn gì → mặc định 'ja', fallback sang bất kỳ locale khác
    if not selected_locales:
        if "ja" in all_locales:
            selected_locales = ["ja"]
        elif all_locales:
            selected_locales = [all_locales[0]]

    filtered = [c for c in covers if not selected_locales or c.locale in selected_locales]

    # Sort theo volume (ép int)
    def safe_int(v):
        try:
            return int(v)
        except:
            return 999999
    filtered.sort(key=lambda x: safe_int(x.volume))

    return render_template("manga_art.html",
                           covers=filtered,
                           all_locales=all_locales,
                           selected_locales=selected_locales,
                           manga_id=manga_id)

@manga.route("/cover/<cover_id>/image")
def cover_image(cover_id):
    cover = Cover.query.get(cover_id)
    if not cover or not cover.image_data:
        abort(404)
    return send_file(BytesIO(cover.image_data), mimetype="image/jpeg")


@manga.route('/<uuid:manga_id>/related')
def related(manga_id):
    return render_template('related.html', manga_id=manga_id)


# ======================
# Creator routes
# ======================
@main.route("/creator/<uuid:creator_id>")
def creator_detail(creator_id):
    creator = Creator.query.get_or_404(creator_id)

    # Truy vấn các manga của tác giả, join với MangaStatistics để lấy điểm số
    mangas_query = (
        db.session.query(Manga, MangaStatistics)
        .join(MangaRelated, Manga.MangaId == MangaRelated.MangaId) # Join với MangaRelated.MangaId
        .join(MangaStatistics, Manga.MangaId == MangaStatistics.MangaId)
        .filter(MangaRelated.RelatedId == creator_id) # Sửa lỗi ở đây
        .order_by(desc(MangaStatistics.Follows)) # Mặc định sắp xếp theo lượt theo dõi
        .all()
    )

    manga_data = []
    for manga, stats in mangas_query:
        cover_url = url_for('static', filename='assets/default_cover.png')
        cover = MangaCover.query.filter_by(MangaId=manga.MangaId).order_by(desc(MangaCover.DownloadDate)).first()

        if cover:
            image_data = base64.b64encode(cover.ImageData).decode('utf-8')
            cover_url = f"data:image/jpeg;base64,{image_data}"
        else:
            cover_info = get_cover_info(str(manga.MangaId).lower())
            if cover_info:
                manga_id_str = cover_info['manga_id']
                cover_id_str = cover_info['cover_id']
                file_name_str = cover_info['file_name']
                image_url = f"https://uploads.mangadex.org/covers/{manga_id_str}/{file_name_str}"
                try:
                    response = requests.get(image_url, stream=True)
                    response.raise_for_status()
                    image_data = response.content
                    new_cover = MangaCover(
                        MangaId=manga.MangaId,
                        CoverId=uuid.UUID(cover_id_str),
                        FileName=file_name_str,
                        ImageData=image_data
                    )
                    db.session.add(new_cover)
                    db.session.commit()
                    image_data_b64 = base64.b64encode(image_data).decode('utf-8')
                    cover_url = f"data:image/jpeg;base64,{image_data_b64}"
                except Exception as e:
                    print(f"Error downloading cover for {manga_id_str}: {e}")

        manga_data.append({
            'manga': manga,
            'stats': stats,
            'cover_url': cover_url
        })
        
    return render_template(
        'creator_detail.html',
        creator=creator,
        mangas=manga_data
    )


@main.route("/search_creators")
def search_creators():
    query = request.args.get('query', '')
    if not query or len(query) < 2:
        return jsonify([])

    # Lấy 5 creator có tên khớp với truy vấn, không phân biệt chữ hoa/thường
    creators = Creator.query.filter(
        func.lower(Creator.Name).like(f'%{query.lower()}%')
    ).limit(5).all()

    creator_list = [{
        'creator_id': creator.CreatorId,
        'name': creator.Name
    } for creator in creators]
    
    return jsonify(creator_list)


# ---------------------------
# POST /manga/<manga_id>/rating
# Tạo hoặc cập nhật rating của current_user cho manga này
# ---------------------------
# --- GET user's rating for this manga (optional, used by frontend to load current value) ---
@manga.route('/<manga_id>/rating', methods=['GET'])
def get_user_rating(manga_id):
    # Validate UUID-ish if you want; keep tolerant though.
    if not current_user or current_user.is_anonymous:
        return jsonify({'score': None}), 200

    rating = Rating.query.filter_by(UserId=current_user.UserId, MangaId=str(manga_id)).first()
    if rating:
        return jsonify({'score': rating.Score}), 200
    return jsonify({'score': None}), 200


# --- Create or update rating ---
@manga.route('/<manga_id>/rating', methods=['POST'])
@login_required
def post_user_rating(manga_id):
    data = request.get_json() or request.form
    score = data.get('score', None)

    try:
        score = int(score)
    except (TypeError, ValueError):
        return jsonify({'success': False, 'error': 'Invalid score'}), 400

    if score < 1 or score > 10:
        return jsonify({'success': False, 'error': 'Score must be between 1 and 10'}), 400

    # Optional: check manga exists
    # if not Manga.query.filter_by(MangaId=str(manga_id)).first():
    #     return jsonify({'success': False, 'error': 'Manga not found'}), 404

    # Find existing rating
    rating = Rating.query.filter_by(UserId=current_user.UserId, MangaId=str(manga_id)).first()
    if rating:
        rating.Score = score
    else:
        rating = Rating(UserId=current_user.UserId, MangaId=str(manga_id), Score=score)
        db.session.add(rating)

    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': 'DB error'}), 500

    return jsonify({'success': True, 'score': score}), 200


# --- Delete user's rating ---
@manga.route('/<manga_id>/rating', methods=['DELETE'])
@login_required
def delete_user_rating(manga_id):
    rating = Rating.query.filter_by(UserId=current_user.UserId, MangaId=str(manga_id)).first()
    if not rating:
        return jsonify({'success': False, 'error': 'No rating found'}), 404

    try:
        db.session.delete(rating)
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': 'DB error'}), 500

    return jsonify({'success': True}), 200

# ======================
# User routes
# ======================
@main.route("/follow/<uuid:user_id>")
def follow(user_id):
    return f"Follow user {user_id}"

@main.route("/message/<uuid:user_id>")
def message(user_id):
    return f"Message to user {user_id}"

@main.route("/report/<uuid:user_id>")
def report(user_id):
    return f"Report user {user_id}"


--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\__init__.py ---
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from config import Config
import os

db = SQLAlchemy()
login_manager = LoginManager()

from .models import User

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, user_id)

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    login_manager.init_app(app)
    login_manager.login_view = 'auth.login'

    # Register blueprints
    from .auth import auth as auth_blueprint
    from .routes import main as main_blueprint, manga as manga_blueprint
    from .comment_routes import comment_bp as comment_blueprint
    from .list_routes import list_bp as list_blueprint
    from .blueprints.reader import reader as reader_blueprint

    app.register_blueprint(auth_blueprint, url_prefix='/auth')
    app.register_blueprint(main_blueprint)
    app.register_blueprint(manga_blueprint, url_prefix='/manga')
    app.register_blueprint(comment_blueprint, url_prefix='/comment')
    app.register_blueprint(list_blueprint, url_prefix='/api')
    app.register_blueprint(reader_blueprint, url_prefix='/reader')

    return app
=== Folder: app\blueprints ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\blueprints\reader.py ---
from flask import Blueprint, render_template, redirect, url_for, request, jsonify, flash
from flask_login import login_required, current_user
from ..reader_controller import get_chapter, get_first_chapter, get_next_chapter, get_prev_chapter, save_reading_history, get_available_langs, get_continue_chapter
from app.models import Chapter, ReadingHistory, Manga
from uuid import uuid4
import requests
from .. import db

reader = Blueprint('reader', __name__)

@reader.route('/<uuid:manga_id>/available-langs', methods=['GET'])
def available_langs(manga_id):
    langs = get_available_langs(manga_id)
    return jsonify({'langs': langs})

@reader.route('/<uuid:manga_id>/start', methods=['GET'])
def start_reading(manga_id):
    lang = request.args.get('lang', 'en')
    chapter = get_first_chapter(manga_id, lang)
    if not chapter:
        flash('No chapters available.')
        return redirect(url_for('main.manga_detail', manga_id=manga_id))
    return redirect(url_for('reader.read_chapter', manga_id=manga_id, chapter_id=chapter.ChapterId))

@reader.route('/<uuid:manga_id>/continue', methods=['GET'])
@login_required
def continue_reading(manga_id):
    chapter, lang = get_continue_chapter(current_user.UserId, manga_id)
    if not chapter:
        flash('No reading history. Starting from beginning.')
        return start_reading(manga_id)
    return jsonify({'chapter_id': str(chapter.ChapterId), 'lang': lang})

@reader.route('/<uuid:manga_id>/<uuid:chapter_id>', methods=['GET'])
def read_chapter(manga_id, chapter_id):
    manga = db.session.get(Manga, manga_id)
    if not manga:
        flash('Manga not found.')
        return redirect(url_for('main.home'))
    
    chapter = get_chapter(manga_id, chapter_id)
    if not chapter or chapter.IsUnavailable or chapter.TranslatedLang not in ['en', 'vi']:
        flash('Chapter not available.')
        return redirect(url_for('main.manga_detail', manga_id=manga_id))
    
    # Call MangaDex API
    try:
        response = requests.get(f"https://api.mangadex.org/at-home/server/{chapter_id}")
        response.raise_for_status()
        data = response.json()
        base_url = data['baseUrl']
        hash_val = data['chapter']['hash']
        filenames = data['chapter']['data']
        image_urls = [f"{base_url}/data/{hash_val}/{f}" for f in filenames]
    except Exception as e:
        flash('Failed to load chapter images.')
        image_urls = []
    
    # Check prev/next
    lang = chapter.TranslatedLang
    has_next = get_next_chapter(manga_id, chapter.ChapterNumber, lang) is not None
    has_prev = get_prev_chapter(manga_id, chapter.ChapterNumber, lang) is not None
    
    # Save history if user
    if current_user.is_authenticated:
        save_reading_history(current_user.UserId, manga_id, chapter_id, 0)
    
    return render_template('reader.html', manga=manga, chapter=chapter, image_urls=image_urls, has_prev=has_prev, has_next=has_next)

@reader.route('/<uuid:manga_id>/next/<uuid:current_id>', methods=['GET'])
def next_chapter(manga_id, current_id):
    lang = request.args.get('lang', 'en')
    next_chap = get_next_chapter(manga_id, db.session.get(Chapter, current_id).ChapterNumber, lang)
    if next_chap:
        return jsonify({'chapter_id': str(next_chap.ChapterId)})
    return jsonify({'end': True})

@reader.route('/<uuid:manga_id>/prev/<uuid:current_id>', methods=['GET'])
def prev_chapter(manga_id, current_id):
    lang = request.args.get('lang', 'en')
    prev_chap = get_prev_chapter(manga_id, db.session.get(Chapter, current_id).ChapterNumber, lang)
    if prev_chap:
        return jsonify({'chapter_id': str(prev_chap.ChapterId)})
    return jsonify({'end': True})

@reader.route('/save-history', methods=['POST'])
@login_required
def save_history():
    data = request.json
    save_reading_history(current_user.UserId, data['manga_id'], data['chapter_id'], data.get('last_page', 0))
    return jsonify({'success': True})
=== Folder: app\static ===

=== Folder: app\static\assets ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\assets\auth_thmb.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x80 in position 4: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\assets\default_avatar.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\assets\default_cover.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\assets\favicon.ico ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\assets\MD-logo.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

=== Folder: app\static\css ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\add_to_list.css ---
/* Dark theme modal for Add To List */
#addToListModal .modal-content {
    background-color: #1e1e1e;
    color: #f0f0f0;
    /* toàn bộ modal text trắng xám sáng */
    border-radius: 0.75rem;
    border: 1px solid #333;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);
}

#addToListModal .modal-header {
    border-bottom: 1px solid #333;
    background-color: #252525;
    color: #f0f0f0;
}

#addToListModal .modal-title {
    font-weight: 600;
}

#addToListModal .modal-body {
    max-height: 60vh;
    overflow-y: auto;
}

#addToListModal .modal-footer {
    border-top: 1px solid #333;
    background-color: #252525;
}

#addToListModal .list-group-item {
    background-color: transparent;
    color: #f0f0f0;
    /* tên list sáng rõ */
    border: none;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #333;
}

#addToListModal .list-group-item:hover {
    background-color: #2a2a2a;
    cursor: pointer;
}

#addToListModal .form-check-label {
    color: #f0f0f0;
    /* chỉnh label (tên list) đồng bộ với text sáng */
}

#addToListModal .form-check-input {
    accent-color: #ff914d;
    /* cam nổi bật */
}

#addToListModal .btn-primary {
    background-color: #ff914d;
    border-color: #ff914d;
    font-weight: 600;
}

#addToListModal .btn-primary:hover {
    background-color: #e67e22;
    border-color: #e67e22;
}

#addToListModal .btn-secondary {
    background-color: #444;
    border-color: #444;
}

#addToListModal .btn-secondary:hover {
    background-color: #555;
    border-color: #555;
}

/* Force brighter, larger list name text in AddToList modal */
#addToListModal .form-check-label {
    color: #f0f0f0 !important;
    /* ép màu sáng */
    font-size: 1rem !important;
    /* tăng size chữ */
    font-weight: 500;
    /* đậm vừa để dễ đọc */
}

/* Tên list (Test1, Test2) */
#addToListModal .fw-semibold {
    color: #f0f0f0 !important;
    /* trắng xám sáng */
    font-size: 1rem !important;
    /* chữ to hơn */
    font-weight: 600;
    /* đậm rõ */
}

/* Mô tả list (Ha Ha Hu Hu, For test only) */
#addToListModal .flex-grow-1 .small.text-muted {
    color: #cccccc !important;
    /* xám sáng thay vì xám chìm */
    font-size: 0.9rem;
}

/* Số lượng items (3 items, 2 items) */
#addToListModal .text-end.small.text-muted {
    color: #aaaaaa !important;
    /* sáng hơn để dễ đọc */
    font-size: 0.85rem;
}

/* Hover effect cho nguyên khối item */
#addToListModal .d-flex.align-items-center:hover {
    background-color: #2a2a2a;
    /* nền tối nhấn nhẹ */
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\auth.css ---
/* Background */
.auth-body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    font-family: sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
}

/* Background image */
.login-bg {
    background-image: url("../assets/auth_thmb.png");
}

/* Wrapper */
.auth-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* Logo */
.auth-logo {
    margin-bottom: 20px;
}

.auth-logo a {
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 10px;
}

.auth-logo img {
    height: 40px;
}

.auth-logo span {
    font-size: 28px;
    font-weight: bold;
    color: #fff;
}

/* Card */
.auth-card {
    background: rgba(42, 42, 42, 0.9);
    padding: 30px;
    border-radius: 8px;
    width: 100%;
    max-width: 400px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
}

.auth-title {
    text-align: center;
    margin-bottom: 20px;
    font-size: 24px;
}

.required-note {
    text-align: right;
    font-size: 12px;
    color: #aaa;
}

/* Form Elements */
.form-group {
    margin-bottom: 15px;
    display: flex;
    flex-direction: column;
}

.form-group label {
    margin-bottom: 5px;
    color: #ddd;
}

.pf-c-form-control {
    padding: 10px;
    border: none;
    border-radius: 4px;
    background: #333;
    color: #fff;
}

.pf-c-form-control:focus {
    outline: 2px solid #ff6600;
}

/* Buttons */
.pf-c-button {
    padding: 12px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    margin-top: 10px;
    width: 100%;
}

.btn-orange {
    background: #ff6600;
    color: #fff;
}

.btn-orange:hover {
    background: #ff8533;
}

/* Links */
.link-orange {
    color: #ff6600;
    text-decoration: none;
}

.link-orange:hover {
    text-decoration: underline;
}

.link-gray {
    color: #aaa;
    font-size: 13px;
}

.form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    margin-bottom: 10px;
}

.form-extra {
    text-align: center;
    margin-top: 10px;
}

.form-register {
    text-align: center;
    margin-top: 15px;
}

.required {
    color: #ff6600;
}

/* Small text */
.small-text {
    font-size: 12px;
    color: #888;
    text-align: center;
}

/* Register form larger */
.register-card {
    max-width: 520px;
    /* tăng 30% so với 400px */
    padding: 40px;
    /* tăng 15% so với 30px */
}

/* Thêm vào cuối file auth.css */
.comment-edit.btn-outline-secondary {
    color: #ffc107;
    /* Màu vàng nhạt */
    border-color: #ffc107;
}

.comment-edit.btn-outline-secondary:hover {
    background-color: #ffc107;
    color: #000;
    border-color: #ffc107;
}

.comment-delete.btn-outline-dark {
    color: #dc3545;
    /* Màu đỏ nhạt */
    border-color: #dc3545;
}

.comment-delete.btn-outline-dark:hover {
    background-color: #dc3545;
    color: #fff;
    border-color: #dc3545;
}

/* Đảm bảo nút nổi bật trên nền tối */
.comment-actions .btn {
    margin-left: 5px;
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\comments.css ---
/* Comment section styles */
.comment-form {
    background-color: #2a2a2a;
    border: 1px solid #444;
}

.comment {
    background-color: #2a2a2a;
    border: 1px solid #444;
}

.comment-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

.comment-username {
    color: #ff4d4d;
    font-weight: bold;
}

.comment-content.spoiler {
    filter: blur(3px);
    cursor: pointer;
}

.comment-content.spoiler:hover,
.comment-content.spoiler.active {
    filter: none;
}

.comment-actions button {
    margin-right: 10px;
}

.alert-container {
    max-width: 600px;
    margin: 0 auto 20px;
}

@media (max-width: 576px) {
    .comment-avatar {
        width: 30px;
        height: 30px;
    }

    .comment-actions button {
        font-size: 0.8rem;
        padding: 5px;
    }
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\creator_detail.css ---
body {
    background-color: #1a1a1a;
    color: #f0f0f0;
}

.creator-detail-container {
    max-width: 1200px;
    margin: 40px auto;
    padding: 20px;
}

.creator-header {
    text-align: center;
    margin-bottom: 20px;
}

.creator-name {
    font-size: 2.5rem;
    color: #fff;
    margin-bottom: 10px;
}

.creator-biography {
    font-size: 1rem;
    color: #b0b0b0;
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
}

.separator {
    border-color: #444;
    margin: 40px 0;
}

.manga-list-section {
    margin-top: 40px;
}

.section-title {
    font-size: 2rem;
    color: #fff;
    margin-bottom: 20px;
    text-align: center;
}

.manga-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 20px;
    justify-content: center;
}

.manga-card {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-decoration: none;
    color: inherit;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.manga-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
}

.manga-cover-container {
    width: 100%;
    padding-top: 150%;
    /* Tỉ lệ 2:3 */
    position: relative;
}

.manga-cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.manga-info-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
    padding: 10px;
    transform: translateY(100%);
    transition: transform 0.3s ease;
}

.manga-card:hover .manga-info-overlay {
    transform: translateY(0);
}

.manga-title-overlay {
    font-size: 0.9rem;
    margin: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    color: #fff;
    text-align: center;
}

.manga-stats-overlay {
    font-size: 0.8rem;
    display: flex;
    justify-content: center;
    gap: 10px;
    color: #ccc;
    margin-top: 5px;
}

.no-manga-found {
    text-align: center;
    color: #888;
    font-size: 1.2rem;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .manga-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
}

@media (max-width: 480px) {
    .manga-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }

    .creator-name {
        font-size: 2rem;
    }
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\library.css ---
/* ==== Library page custom theme ==== */

body {
    background-color: #121212;
    /* đảm bảo nền tối */
    color: #f0f0f0;
}

/* Tabs */
#libraryTabs .nav-link {
    color: #ccc;
    background-color: #1e1e1e;
    border: none;
}

#libraryTabs .nav-link.active {
    color: #fff;
    background-color: #333;
    border-bottom: 2px solid #ff9800;
}

/* Containers */
#myListsContainer,
#followedListsContainer {
    min-height: 200px;
}

/* Cards */
.card {
    background-color: #1f1f1f;
    border: 1px solid #2a2a2a;
    border-radius: 0.75rem;
    transition: transform 0.15s ease, box-shadow 0.15s ease;
}

.card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

.card-title {
    color: #fff;
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
}

.card-text {
    color: #aaa;
    font-size: 0.9rem;
}

.card small {
    color: #888;
}

/* Buttons inside card */
.card .btn {
    flex: 1;
    font-size: 0.8rem;
    padding: 0.35rem 0.5rem;
}

.card .btn-outline-primary {
    border-color: #ff9800;
    color: #ff9800;
}

.card .btn-outline-primary:hover {
    background-color: #ff9800;
    color: #000;
}

.card .btn-outline-secondary {
    border-color: #999;
    color: #999;
}

.card .btn-outline-secondary:hover {
    background-color: #999;
    color: #000;
}

.card .btn-outline-danger {
    border-color: #f44336;
    color: #f44336;
}

.card .btn-outline-danger:hover {
    background-color: #f44336;
    color: #fff;
}

.card .btn-outline-warning {
    border-color: #ff9800;
    color: #ff9800;
}

.card .btn-outline-warning:hover {
    background-color: #ff9800;
    color: #000;
}

/* Modals */
.modal-content {
    background-color: #1e1e1e;
    color: #f0f0f0;
    border-radius: 0.5rem;
}

.modal-header {
    border-bottom: 1px solid #333;
}

.modal-footer {
    border-top: 1px solid #333;
}

.modal .form-label {
    color: #ccc;
}

.modal .form-control,
.modal .form-select {
    background-color: #2a2a2a;
    border: 1px solid #444;
    color: #fff;
}

.modal .form-control:focus,
.modal .form-select:focus {
    border-color: #ff9800;
    box-shadow: 0 0 0 0.2rem rgba(255, 152, 0, 0.25);
}

/* Delete modal */
#deleteListModal .modal-body {
    text-align: center;
}

#deleteListModal .btn-danger {
    width: 100%;
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\list.css ---
/* list.css — dark theme for list detail page */

.container.py-4 {
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;
}

/* Card grid */
.manga-card {
    background-color: #1f1f1f;
    border: 1px solid #2b2b2b;
    border-radius: 0.6rem;
    overflow: hidden;
    transition: transform 0.12s ease, box-shadow 0.12s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.manga-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.6);
}

/* Cover image */
.manga-card .cover {
    width: 100%;
    height: 150px;
    object-fit: cover;
    background: #eee;
}

/* Card body */
.manga-card .card-body {
    padding: 0.75rem;
    flex-grow: 1;
}

.manga-card .card-title {
    color: #fafafa;
    font-weight: 600;
    font-size: 0.95rem;
    margin: 0;
}

/* Footer with actions */
.manga-card .card-footer {
    padding: 0.5rem 0.75rem;
    border-top: 1px solid #2b2b2b;
    background: transparent;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Buttons */
.btn-outline-light {
    color: #ddd;
    border-color: #444;
}

.btn-outline-light:hover {
    background: rgba(255, 255, 255, 0.04);
    color: #fff;
}

/* Bulk select checkbox position */
.select-checkbox {
    position: absolute;
    top: 8px;
    left: 8px;
    z-index: 3;
}

/* Card container to allow relative pos for checkbox */
.card-pos {
    position: relative;
}

/* Small responsive tweaks */
@media (min-width: 992px) {
    .manga-card .cover {
        height: 180px;
    }
}

.card.hover-shadow {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    cursor: pointer;
}

.card.hover-shadow:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
}

a.text-decoration-none.text-reset {
    display: block;
    height: 100%;
}

a.text-decoration-none.text-reset .card {
    cursor: pointer;
}

.card .form-check-input,
.card .btn {
    position: relative;
    z-index: 2;
    /* luôn trên link */
}

/* list.css */

/* Cho toàn bộ card manga trông như có thể click được */
.manga-card {
    cursor: pointer;
    transition: transform 0.15s ease, box-shadow 0.15s ease;
}

/* Hiệu ứng hover: nổi nhẹ + shadow */
.manga-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
}

/* Tăng kích thước ô checkbox trong list */
.select-checkbox {
    width: 1.4em;
    height: 1.4em;
    cursor: pointer;
}

/* Style cho thông tin owner, item count, follower count */
.list-meta {
    font-size: 1rem;
    /* tăng kích thước chữ (Bootstrap small = 0.875rem) */
    color: #d1d1d1;
    /* trắng xám, dễ đọc trên nền tối */
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\manga_detail.css ---
.manga-detail-container {
    max-width: 90%;
    margin: 0 auto;
    padding: 20px;
    display: flex;
    flex-direction: row;
    background-color: #1a1a1a;
    color: #ffffff;
    font-size: 115%;
    /* Tăng font-size toàn bộ lên 15% */
}

.manga-main {
    flex: 3;
    margin-right: 20px;
}

.manga-detail-header {
    position: relative;
    height: 300px;
    background-size: cover;
    background-position: center;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 20px;
    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8));
}

.manga-cover-thumbnail {
    position: absolute;
    top: 20px;
    left: 20px;
    width: 172.5px;
    /* Tăng 15% từ 150px */
    height: 253px;
    /* Tăng 15% từ 220px */
    overflow: hidden;
    border-radius: 8px;
    border: 1px solid #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.manga-cover-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.manga-info {
    position: absolute;
    top: 20px;
    left: 210px;
    /* Điều chỉnh left để phù hợp với ảnh lớn hơn (172.5px + padding) */
    color: #ffffff;
    padding: 10px;
}

.manga-title {
    font-family: Roboto, Arial, sans-serif;
    font-size: 36.8px;
    /* Tăng 15% từ 32px */
    margin-bottom: 10px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.manga-actions .btn {
    display: inline-block;
    padding: 10px 20px;
    margin-right: 10px;
    text-decoration: none;
    color: #ffffff;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.manga-actions .btn-primary {
    background-color: #ff6600;
}

.manga-actions .btn-primary:hover {
    background-color: #ff8533;
}

.manga-actions .btn-secondary {
    background-color: #333333;
}

.manga-actions .btn-secondary:hover {
    background-color: #4d4d4d;
}

.manga-meta,
.manga-stats {
    margin: 10px 0;
    font-family: Roboto, Arial, sans-serif;
    font-size: 18.4px;
    /* Tăng 15% từ 16px */
    font-weight: bold;
    color: #ffffff;
}

.tag-badge {
    display: inline-block;
    background: #444;
    color: #fff;
    padding: 4px 8px;
    margin-left: 5px;
    border-radius: 12px;
    font-size: 13.8px;
    /* Tăng 15% từ 12px */
}

.status-dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 5px;
    background-color: #999999;
    /* fallback xám */
}

.manga-description {
    margin: 20px 0;
    padding: 15px;
    background: #2a2a2a;
    border-radius: 4px;
    color: #cccccc;
    font-family: Roboto, Arial, sans-serif;
    font-size: 18px;
    /* Tăng 15% từ 14px */
    line-height: 1.5;
}

.manga-tabs {
    display: flex;
    border-bottom: 1px solid #333333;
    margin-bottom: 20px;
}

.tab {
    padding: 10px 20px;
    text-decoration: none;
    color: #ffffff;
    font-family: Roboto, Arial, sans-serif;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s ease;
}

.tab.active {
    border-bottom: 2px solid #ff6600;
    color: #ff6600;
}

.tab-content .tab-pane {
    display: none;
    padding: 20px;
    background: #1a1a1a;
    border: 1px solid #333333;
    border-top: none;
    border-radius: 0 0 4px 4px;
    animation: fadeIn 0.3s ease;
}

.tab-content .tab-pane.active {
    display: block;
}

.tab-content .text-center {
    font-size: 16.1px;
    /* Tăng 15% từ 14px (giả sử text-gray mặc định 14px) */
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

.manga-sidebar {
    flex: 1;
    background: #2a2a2a;
    border-left: 1px solid #333333;
    padding: 20px;
    position: sticky;
    top: 20px;
    height: fit-content;
    font-size: 100%;
    /* Tăng font-size sidebar lên 25% */
}

.sidebar-section {
    margin-bottom: 20px;
}

.sidebar-section h3 {
    font-family: Roboto, Arial, sans-serif;
    font-size: 16px;
    /* Tăng 25% từ 16px */
    color: #ffffff;
    font-weight: bold;
    margin-bottom: 10px;
}

.tag-list,
.track-list,
.alt-title-list {
    list-style: none;
    padding: 0;
}

.tag-link,
.track-link {
    text-decoration: none;
    color: #ff6600;
    transition: color 0.3s ease;
}

.tag-link:hover,
.track-link:hover {
    color: #ff8533;
}

.flag-icon {
    width: 18.4px;
    /* Tăng 15% từ 16px */
    height: 18.4px;
    /* Tăng 15% từ 16px */
    vertical-align: middle;
    margin-right: 5px;
}

@media (max-width: 768px) {
    .manga-detail-container {
        flex-direction: column;
    }

    .manga-sidebar {
        width: 100%;
        margin-top: 20px;
        position: static;
    }
}

/* Card trong Art tab */
.cover-card {
    background-color: #1a1a1a;
    /* nền đồng bộ với container */
    color: #cccccc;
    /* chữ xám nhạt, dễ đọc */
    border: 1px solid #333333;
    /* viền nhẹ giống tab-content */
    border-radius: 6px;
    overflow: hidden;
}

.cover-card .card-body {
    background-color: #1a1a1a;
    /* nền dưới ảnh cũng tối */
    padding: 10px;
}

.cover-card .card-body p {
    margin: 0 0 5px;
    color: #cccccc;
    /* chữ xám nhạt như description */
    font-size: 0.9rem;
}

/* app/static/css/manga_detail.css */

/* Rating widget */
.your-rating {
    margin-top: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
}

.your-rating label {
    font-weight: 600;
    margin-right: 4px;
}

#user-rating-select {
    padding: 4px 6px;
    border-radius: 4px;
    border: 1px solid #ccc;
    background: white;
}

.btn-small {
    padding: 4px 8px;
    font-size: 13px;
    border-radius: 6px;
    cursor: pointer;
}

.btn-link {
    background: none;
    border: none;
    color: #0066cc;
    text-decoration: underline;
    cursor: pointer;
    padding: 2px 6px;
    font-size: 13px;
}

.rating-msg {
    margin-left: 8px;
    font-size: 13px;
    color: #2b2b2b;
}

/* Nút Save cho user rating */
#user-rating-save {
    background-color: #28a745;
    /* xanh lá */
    color: #fff;
    font-weight: bold;
    padding: 4px 12px;
    border-radius: 6px;
    margin-left: 8px;
    display: inline-block;
}

#user-rating-save:hover {
    background-color: #218838;
}

/* Nút Remove nhỏ hơn, dạng link đỏ */
#user-rating-remove {
    color: #dc3545;
    font-size: 0.9em;
    margin-left: 8px;
    cursor: pointer;
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\reader.css ---
.reader-container {
    max-width: 900px;
    margin: auto;
}

.long-strip {
    border: 1px solid #333;
}

.chapter-page {
    max-width: 100%;
    height: auto;
}

.reader-header h2 {
    font-size: 1.5rem;
}

.reader-footer .progress {
    background-color: #222;
}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\css\styles.css ---
@charset "UTF-8";

/*!
* Start Bootstrap - Simple Sidebar v6.0.6 (https://startbootstrap.com/template/simple-sidebar)
* Copyright 2013-2023 Start Bootstrap
* Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-simple-sidebar/blob/master/LICENSE)
*/
/*!
 * Bootstrap  v5.2.3 (https://getbootstrap.com/)
 * Copyright 2011-2022 The Bootstrap Authors
 * Copyright 2011-2022 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */
:root {
  --bs-blue: #0d6efd;
  --bs-indigo: #6610f2;
  --bs-purple: #6f42c1;
  --bs-pink: #d63384;
  --bs-red: #dc3545;
  --bs-orange: #fd7e14;
  --bs-yellow: #ffc107;
  --bs-green: #198754;
  --bs-teal: #20c997;
  --bs-cyan: #0dcaf0;
  --bs-black: #000;
  --bs-white: #fff;
  --bs-gray: #6c757d;
  --bs-gray-dark: #343a40;
  --bs-gray-100: #f8f9fa;
  --bs-gray-200: #e9ecef;
  --bs-gray-300: #dee2e6;
  --bs-gray-400: #ced4da;
  --bs-gray-500: #adb5bd;
  --bs-gray-600: #6c757d;
  --bs-gray-700: #495057;
  --bs-gray-800: #343a40;
  --bs-gray-900: #212529;
  --bs-primary: #0d6efd;
  --bs-secondary: #6c757d;
  --bs-success: #198754;
  --bs-info: #0dcaf0;
  --bs-warning: #ffc107;
  --bs-danger: #dc3545;
  --bs-light: #f8f9fa;
  --bs-dark: #212529;
  --bs-primary-rgb: 13, 110, 253;
  --bs-secondary-rgb: 108, 117, 125;
  --bs-success-rgb: 25, 135, 84;
  --bs-info-rgb: 13, 202, 240;
  --bs-warning-rgb: 255, 193, 7;
  --bs-danger-rgb: 220, 53, 69;
  --bs-light-rgb: 248, 249, 250;
  --bs-dark-rgb: 33, 37, 41;
  --bs-white-rgb: 255, 255, 255;
  --bs-black-rgb: 0, 0, 0;
  --bs-body-color-rgb: 33, 37, 41;
  --bs-body-bg-rgb: 255, 255, 255;
  --bs-font-sans-serif: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  --bs-font-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  --bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));
  --bs-body-font-family: var(--bs-font-sans-serif);
  --bs-body-font-size: 1rem;
  --bs-body-font-weight: 400;
  --bs-body-line-height: 1.5;
  --bs-body-color: #212529;
  --bs-body-bg: #fff;
  --bs-border-width: 1px;
  --bs-border-style: solid;
  --bs-border-color: #dee2e6;
  --bs-border-color-translucent: rgba(0, 0, 0, 0.175);
  --bs-border-radius: 0.375rem;
  --bs-border-radius-sm: 0.25rem;
  --bs-border-radius-lg: 0.5rem;
  --bs-border-radius-xl: 1rem;
  --bs-border-radius-2xl: 2rem;
  --bs-border-radius-pill: 50rem;
  --bs-link-color: #0d6efd;
  --bs-link-hover-color: #0a58ca;
  --bs-code-color: #d63384;
  --bs-highlight-bg: #fff3cd;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

@media (prefers-reduced-motion: no-preference) {
  :root {
    scroll-behavior: smooth;
  }
}

body {
  margin: 0;
  font-family: var(--bs-body-font-family);
  font-size: var(--bs-body-font-size);
  font-weight: var(--bs-body-font-weight);
  line-height: var(--bs-body-line-height);
  color: var(--bs-body-color);
  text-align: var(--bs-body-text-align);
  background-color: var(--bs-body-bg);
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

hr {
  margin: 1rem 0;
  color: inherit;
  border: 0;
  border-top: 1px solid;
  opacity: 0.25;
}

h6,
.h6,
h5,
.h5,
h4,
.h4,
h3,
.h3,
h2,
.h2,
h1,
.h1 {
  margin-top: 0;
  margin-bottom: 0.5rem;
  font-weight: 500;
  line-height: 1.2;
}

h1,
.h1 {
  font-size: calc(1.375rem + 1.5vw);
}

@media (min-width: 1200px) {

  h1,
  .h1 {
    font-size: 2.5rem;
  }
}

h2,
.h2 {
  font-size: calc(1.325rem + 0.9vw);
}

@media (min-width: 1200px) {

  h2,
  .h2 {
    font-size: 2rem;
  }
}

h3,
.h3 {
  font-size: calc(1.3rem + 0.6vw);
}

@media (min-width: 1200px) {

  h3,
  .h3 {
    font-size: 1.75rem;
  }
}

h4,
.h4 {
  font-size: calc(1.275rem + 0.3vw);
}

@media (min-width: 1200px) {

  h4,
  .h4 {
    font-size: 1.5rem;
  }
}

h5,
.h5 {
  font-size: 1.25rem;
}

h6,
.h6 {
  font-size: 1rem;
}

p {
  margin-top: 0;
  margin-bottom: 1rem;
}

abbr[title] {
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  cursor: help;
  -webkit-text-decoration-skip-ink: none;
  text-decoration-skip-ink: none;
}

address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}

ol,
ul {
  padding-left: 2rem;
}

ol,
ul,
dl {
  margin-top: 0;
  margin-bottom: 1rem;
}

ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0;
}

dt {
  font-weight: 700;
}

dd {
  margin-bottom: 0.5rem;
  margin-left: 0;
}

blockquote {
  margin: 0 0 1rem;
}

b,
strong {
  font-weight: bolder;
}

small,
.small {
  font-size: 0.875em;
}

mark,
.mark {
  padding: 0.1875em;
  background-color: var(--bs-highlight-bg);
}

sub,
sup {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

a {
  color: var(--bs-link-color);
  text-decoration: underline;
}

a:hover {
  color: var(--bs-link-hover-color);
}

a:not([href]):not([class]),
a:not([href]):not([class]):hover {
  color: inherit;
  text-decoration: none;
}

pre,
code,
kbd,
samp {
  font-family: var(--bs-font-monospace);
  font-size: 1em;
}

pre {
  display: block;
  margin-top: 0;
  margin-bottom: 1rem;
  overflow: auto;
  font-size: 0.875em;
}

pre code {
  font-size: inherit;
  color: inherit;
  word-break: normal;
}

code {
  font-size: 0.875em;
  color: var(--bs-code-color);
  word-wrap: break-word;
}

a>code {
  color: inherit;
}

kbd {
  padding: 0.1875rem 0.375rem;
  font-size: 0.875em;
  color: var(--bs-body-bg);
  background-color: var(--bs-body-color);
  border-radius: 0.25rem;
}

kbd kbd {
  padding: 0;
  font-size: 1em;
}

figure {
  margin: 0 0 1rem;
}

img,
svg {
  vertical-align: middle;
}

table {
  caption-side: bottom;
  border-collapse: collapse;
}

caption {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  color: #6c757d;
  text-align: left;
}

th {
  text-align: inherit;
  text-align: -webkit-match-parent;
}

thead,
tbody,
tfoot,
tr,
td,
th {
  border-color: inherit;
  border-style: solid;
  border-width: 0;
}

label {
  display: inline-block;
}

button {
  border-radius: 0;
}

button:focus:not(:focus-visible) {
  outline: 0;
}

input,
button,
select,
optgroup,
textarea {
  margin: 0;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

button,
select {
  text-transform: none;
}

[role=button] {
  cursor: pointer;
}

select {
  word-wrap: normal;
}

select:disabled {
  opacity: 1;
}

[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator {
  display: none !important;
}

button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
  appearance: textfield;
  /* Chuẩn */
}

button:not(:disabled),
[type=button]:not(:disabled),
[type=reset]:not(:disabled),
[type=submit]:not(:disabled) {
  cursor: pointer;
}

::-moz-focus-inner {
  padding: 0;
  border-style: none;
}

textarea {
  resize: vertical;
}

fieldset {
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

legend {
  float: left;
  width: 100%;
  padding: 0;
  margin-bottom: 0.5rem;
  font-size: calc(1.275rem + 0.3vw);
  line-height: inherit;
}

@media (min-width: 1200px) {
  legend {
    font-size: 1.5rem;
  }
}

legend+* {
  clear: left;
}

::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-text,
::-webkit-datetime-edit-minute,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-year-field {
  padding: 0;
}

::-webkit-inner-spin-button {
  height: auto;
}

[type=search] {
  outline-offset: -2px;
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
  appearance: textfield;
  /* Chuẩn */
}

/* rtl:raw:
[type="tel"],
[type="url"],
[type="email"],
[type="number"] {
  direction: ltr;
}
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-color-swatch-wrapper {
  padding: 0;
}

::file-selector-button {
  font: inherit;
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
  appearance: textfield;
  /* Chuẩn */
}

output {
  display: inline-block;
}

iframe {
  border: 0;
}

summary {
  display: list-item;
  cursor: pointer;
}

progress {
  vertical-align: baseline;
}

[hidden] {
  display: none !important;
}

.lead {
  font-size: 1.25rem;
  font-weight: 300;
}

.display-1 {
  font-size: calc(1.625rem + 4.5vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-1 {
    font-size: 5rem;
  }
}

.display-2 {
  font-size: calc(1.575rem + 3.9vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-2 {
    font-size: 4.5rem;
  }
}

.display-3 {
  font-size: calc(1.525rem + 3.3vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-3 {
    font-size: 4rem;
  }
}

.display-4 {
  font-size: calc(1.475rem + 2.7vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-4 {
    font-size: 3.5rem;
  }
}

.display-5 {
  font-size: calc(1.425rem + 2.1vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-5 {
    font-size: 3rem;
  }
}

.display-6 {
  font-size: calc(1.375rem + 1.5vw);
  font-weight: 300;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  .display-6 {
    font-size: 2.5rem;
  }
}

.list-unstyled {
  padding-left: 0;
  list-style: none;
}

.list-inline {
  padding-left: 0;
  list-style: none;
}

.list-inline-item {
  display: inline-block;
}

.list-inline-item:not(:last-child) {
  margin-right: 0.5rem;
}

.initialism {
  font-size: 0.875em;
  text-transform: uppercase;
}

.blockquote {
  margin-bottom: 1rem;
  font-size: 1.25rem;
}

.blockquote> :last-child {
  margin-bottom: 0;
}

.blockquote-footer {
  margin-top: -1rem;
  margin-bottom: 1rem;
  font-size: 0.875em;
  color: #6c757d;
}

.blockquote-footer::before {
  content: "— ";
}

.img-fluid {
  max-width: 100%;
  height: auto;
}

.img-thumbnail {
  padding: 0.25rem;
  background-color: #fff;
  border: 1px solid var(--bs-border-color);
  border-radius: 0.375rem;
  max-width: 100%;
  height: auto;
}

.figure {
  display: inline-block;
}

.figure-img {
  margin-bottom: 0.5rem;
  line-height: 1;
}

.figure-caption {
  font-size: 0.875em;
  color: #6c757d;
}

.container,
.container-fluid,
.container-xxl,
.container-xl,
.container-lg,
.container-md,
.container-sm {
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  width: 100%;
  padding-right: calc(var(--bs-gutter-x) * 0.5);
  padding-left: calc(var(--bs-gutter-x) * 0.5);
  margin-right: auto;
  margin-left: auto;
}

@media (min-width: 576px) {

  .container-sm,
  .container {
    max-width: 540px;
  }
}

@media (min-width: 768px) {

  .container-md,
  .container-sm,
  .container {
    max-width: 720px;
  }
}

@media (min-width: 992px) {

  .container-lg,
  .container-md,
  .container-sm,
  .container {
    max-width: 960px;
  }
}

@media (min-width: 1200px) {

  .container-xl,
  .container-lg,
  .container-md,
  .container-sm,
  .container {
    max-width: 1140px;
  }
}

@media (min-width: 1400px) {

  .container-xxl,
  .container-xl,
  .container-lg,
  .container-md,
  .container-sm,
  .container {
    max-width: 1320px;
  }
}

.row {
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--bs-gutter-y));
  margin-right: calc(-0.5 * var(--bs-gutter-x));
  margin-left: calc(-0.5 * var(--bs-gutter-x));
}

.row>* {
  flex-shrink: 0;
  width: 100%;
  max-width: 100%;
  padding-right: calc(var(--bs-gutter-x) * 0.5);
  padding-left: calc(var(--bs-gutter-x) * 0.5);
  margin-top: var(--bs-gutter-y);
}

.col {
  flex: 1 0 0%;
}

.row-cols-auto>* {
  flex: 0 0 auto;
  width: auto;
}

.row-cols-1>* {
  flex: 0 0 auto;
  width: 100%;
}

.row-cols-2>* {
  flex: 0 0 auto;
  width: 50%;
}

.row-cols-3>* {
  flex: 0 0 auto;
  width: 33.3333333333%;
}

.row-cols-4>* {
  flex: 0 0 auto;
  width: 25%;
}

.row-cols-5>* {
  flex: 0 0 auto;
  width: 20%;
}

.row-cols-6>* {
  flex: 0 0 auto;
  width: 16.6666666667%;
}

.col-auto {
  flex: 0 0 auto;
  width: auto;
}

.col-1 {
  flex: 0 0 auto;
  width: 8.33333333%;
}

.col-2 {
  flex: 0 0 auto;
  width: 16.66666667%;
}

.col-3 {
  flex: 0 0 auto;
  width: 25%;
}

.col-4 {
  flex: 0 0 auto;
  width: 33.33333333%;
}

.col-5 {
  flex: 0 0 auto;
  width: 41.66666667%;
}

.col-6 {
  flex: 0 0 auto;
  width: 50%;
}

.col-7 {
  flex: 0 0 auto;
  width: 58.33333333%;
}

.col-8 {
  flex: 0 0 auto;
  width: 66.66666667%;
}

.col-9 {
  flex: 0 0 auto;
  width: 75%;
}

.col-10 {
  flex: 0 0 auto;
  width: 83.33333333%;
}

.col-11 {
  flex: 0 0 auto;
  width: 91.66666667%;
}

.col-12 {
  flex: 0 0 auto;
  width: 100%;
}

.offset-1 {
  margin-left: 8.33333333%;
}

.offset-2 {
  margin-left: 16.66666667%;
}

.offset-3 {
  margin-left: 25%;
}

.offset-4 {
  margin-left: 33.33333333%;
}

.offset-5 {
  margin-left: 41.66666667%;
}

.offset-6 {
  margin-left: 50%;
}

.offset-7 {
  margin-left: 58.33333333%;
}

.offset-8 {
  margin-left: 66.66666667%;
}

.offset-9 {
  margin-left: 75%;
}

.offset-10 {
  margin-left: 83.33333333%;
}

.offset-11 {
  margin-left: 91.66666667%;
}

.g-0,
.gx-0 {
  --bs-gutter-x: 0;
}

.g-0,
.gy-0 {
  --bs-gutter-y: 0;
}

.g-1,
.gx-1 {
  --bs-gutter-x: 0.25rem;
}

.g-1,
.gy-1 {
  --bs-gutter-y: 0.25rem;
}

.g-2,
.gx-2 {
  --bs-gutter-x: 0.5rem;
}

.g-2,
.gy-2 {
  --bs-gutter-y: 0.5rem;
}

.g-3,
.gx-3 {
  --bs-gutter-x: 1rem;
}

.g-3,
.gy-3 {
  --bs-gutter-y: 1rem;
}

.g-4,
.gx-4 {
  --bs-gutter-x: 1.5rem;
}

.g-4,
.gy-4 {
  --bs-gutter-y: 1.5rem;
}

.g-5,
.gx-5 {
  --bs-gutter-x: 3rem;
}

.g-5,
.gy-5 {
  --bs-gutter-y: 3rem;
}

@media (min-width: 576px) {
  .col-sm {
    flex: 1 0 0%;
  }

  .row-cols-sm-auto>* {
    flex: 0 0 auto;
    width: auto;
  }

  .row-cols-sm-1>* {
    flex: 0 0 auto;
    width: 100%;
  }

  .row-cols-sm-2>* {
    flex: 0 0 auto;
    width: 50%;
  }

  .row-cols-sm-3>* {
    flex: 0 0 auto;
    width: 33.3333333333%;
  }

  .row-cols-sm-4>* {
    flex: 0 0 auto;
    width: 25%;
  }

  .row-cols-sm-5>* {
    flex: 0 0 auto;
    width: 20%;
  }

  .row-cols-sm-6>* {
    flex: 0 0 auto;
    width: 16.6666666667%;
  }

  .col-sm-auto {
    flex: 0 0 auto;
    width: auto;
  }

  .col-sm-1 {
    flex: 0 0 auto;
    width: 8.33333333%;
  }

  .col-sm-2 {
    flex: 0 0 auto;
    width: 16.66666667%;
  }

  .col-sm-3 {
    flex: 0 0 auto;
    width: 25%;
  }

  .col-sm-4 {
    flex: 0 0 auto;
    width: 33.33333333%;
  }

  .col-sm-5 {
    flex: 0 0 auto;
    width: 41.66666667%;
  }

  .col-sm-6 {
    flex: 0 0 auto;
    width: 50%;
  }

  .col-sm-7 {
    flex: 0 0 auto;
    width: 58.33333333%;
  }

  .col-sm-8 {
    flex: 0 0 auto;
    width: 66.66666667%;
  }

  .col-sm-9 {
    flex: 0 0 auto;
    width: 75%;
  }

  .col-sm-10 {
    flex: 0 0 auto;
    width: 83.33333333%;
  }

  .col-sm-11 {
    flex: 0 0 auto;
    width: 91.66666667%;
  }

  .col-sm-12 {
    flex: 0 0 auto;
    width: 100%;
  }

  .offset-sm-0 {
    margin-left: 0;
  }

  .offset-sm-1 {
    margin-left: 8.33333333%;
  }

  .offset-sm-2 {
    margin-left: 16.66666667%;
  }

  .offset-sm-3 {
    margin-left: 25%;
  }

  .offset-sm-4 {
    margin-left: 33.33333333%;
  }

  .offset-sm-5 {
    margin-left: 41.66666667%;
  }

  .offset-sm-6 {
    margin-left: 50%;
  }

  .offset-sm-7 {
    margin-left: 58.33333333%;
  }

  .offset-sm-8 {
    margin-left: 66.66666667%;
  }

  .offset-sm-9 {
    margin-left: 75%;
  }

  .offset-sm-10 {
    margin-left: 83.33333333%;
  }

  .offset-sm-11 {
    margin-left: 91.66666667%;
  }

  .g-sm-0,
  .gx-sm-0 {
    --bs-gutter-x: 0;
  }

  .g-sm-0,
  .gy-sm-0 {
    --bs-gutter-y: 0;
  }

  .g-sm-1,
  .gx-sm-1 {
    --bs-gutter-x: 0.25rem;
  }

  .g-sm-1,
  .gy-sm-1 {
    --bs-gutter-y: 0.25rem;
  }

  .g-sm-2,
  .gx-sm-2 {
    --bs-gutter-x: 0.5rem;
  }

  .g-sm-2,
  .gy-sm-2 {
    --bs-gutter-y: 0.5rem;
  }

  .g-sm-3,
  .gx-sm-3 {
    --bs-gutter-x: 1rem;
  }

  .g-sm-3,
  .gy-sm-3 {
    --bs-gutter-y: 1rem;
  }

  .g-sm-4,
  .gx-sm-4 {
    --bs-gutter-x: 1.5rem;
  }

  .g-sm-4,
  .gy-sm-4 {
    --bs-gutter-y: 1.5rem;
  }

  .g-sm-5,
  .gx-sm-5 {
    --bs-gutter-x: 3rem;
  }

  .g-sm-5,
  .gy-sm-5 {
    --bs-gutter-y: 3rem;
  }
}

@media (min-width: 768px) {
  .col-md {
    flex: 1 0 0%;
  }

  .row-cols-md-auto>* {
    flex: 0 0 auto;
    width: auto;
  }

  .row-cols-md-1>* {
    flex: 0 0 auto;
    width: 100%;
  }

  .row-cols-md-2>* {
    flex: 0 0 auto;
    width: 50%;
  }

  .row-cols-md-3>* {
    flex: 0 0 auto;
    width: 33.3333333333%;
  }

  .row-cols-md-4>* {
    flex: 0 0 auto;
    width: 25%;
  }

  .row-cols-md-5>* {
    flex: 0 0 auto;
    width: 20%;
  }

  .row-cols-md-6>* {
    flex: 0 0 auto;
    width: 16.6666666667%;
  }

  .col-md-auto {
    flex: 0 0 auto;
    width: auto;
  }

  .col-md-1 {
    flex: 0 0 auto;
    width: 8.33333333%;
  }

  .col-md-2 {
    flex: 0 0 auto;
    width: 16.66666667%;
  }

  .col-md-3 {
    flex: 0 0 auto;
    width: 25%;
  }

  .col-md-4 {
    flex: 0 0 auto;
    width: 33.33333333%;
  }

  .col-md-5 {
    flex: 0 0 auto;
    width: 41.66666667%;
  }

  .col-md-6 {
    flex: 0 0 auto;
    width: 50%;
  }

  .col-md-7 {
    flex: 0 0 auto;
    width: 58.33333333%;
  }

  .col-md-8 {
    flex: 0 0 auto;
    width: 66.66666667%;
  }

  .col-md-9 {
    flex: 0 0 auto;
    width: 75%;
  }

  .col-md-10 {
    flex: 0 0 auto;
    width: 83.33333333%;
  }

  .col-md-11 {
    flex: 0 0 auto;
    width: 91.66666667%;
  }

  .col-md-12 {
    flex: 0 0 auto;
    width: 100%;
  }

  .offset-md-0 {
    margin-left: 0;
  }

  .offset-md-1 {
    margin-left: 8.33333333%;
  }

  .offset-md-2 {
    margin-left: 16.66666667%;
  }

  .offset-md-3 {
    margin-left: 25%;
  }

  .offset-md-4 {
    margin-left: 33.33333333%;
  }

  .offset-md-5 {
    margin-left: 41.66666667%;
  }

  .offset-md-6 {
    margin-left: 50%;
  }

  .offset-md-7 {
    margin-left: 58.33333333%;
  }

  .offset-md-8 {
    margin-left: 66.66666667%;
  }

  .offset-md-9 {
    margin-left: 75%;
  }

  .offset-md-10 {
    margin-left: 83.33333333%;
  }

  .offset-md-11 {
    margin-left: 91.66666667%;
  }

  .g-md-0,
  .gx-md-0 {
    --bs-gutter-x: 0;
  }

  .g-md-0,
  .gy-md-0 {
    --bs-gutter-y: 0;
  }

  .g-md-1,
  .gx-md-1 {
    --bs-gutter-x: 0.25rem;
  }

  .g-md-1,
  .gy-md-1 {
    --bs-gutter-y: 0.25rem;
  }

  .g-md-2,
  .gx-md-2 {
    --bs-gutter-x: 0.5rem;
  }

  .g-md-2,
  .gy-md-2 {
    --bs-gutter-y: 0.5rem;
  }

  .g-md-3,
  .gx-md-3 {
    --bs-gutter-x: 1rem;
  }

  .g-md-3,
  .gy-md-3 {
    --bs-gutter-y: 1rem;
  }

  .g-md-4,
  .gx-md-4 {
    --bs-gutter-x: 1.5rem;
  }

  .g-md-4,
  .gy-md-4 {
    --bs-gutter-y: 1.5rem;
  }

  .g-md-5,
  .gx-md-5 {
    --bs-gutter-x: 3rem;
  }

  .g-md-5,
  .gy-md-5 {
    --bs-gutter-y: 3rem;
  }
}

@media (min-width: 992px) {
  .col-lg {
    flex: 1 0 0%;
  }

  .row-cols-lg-auto>* {
    flex: 0 0 auto;
    width: auto;
  }

  .row-cols-lg-1>* {
    flex: 0 0 auto;
    width: 100%;
  }

  .row-cols-lg-2>* {
    flex: 0 0 auto;
    width: 50%;
  }

  .row-cols-lg-3>* {
    flex: 0 0 auto;
    width: 33.3333333333%;
  }

  .row-cols-lg-4>* {
    flex: 0 0 auto;
    width: 25%;
  }

  .row-cols-lg-5>* {
    flex: 0 0 auto;
    width: 20%;
  }

  .row-cols-lg-6>* {
    flex: 0 0 auto;
    width: 16.6666666667%;
  }

  .col-lg-auto {
    flex: 0 0 auto;
    width: auto;
  }

  .col-lg-1 {
    flex: 0 0 auto;
    width: 8.33333333%;
  }

  .col-lg-2 {
    flex: 0 0 auto;
    width: 16.66666667%;
  }

  .col-lg-3 {
    flex: 0 0 auto;
    width: 25%;
  }

  .col-lg-4 {
    flex: 0 0 auto;
    width: 33.33333333%;
  }

  .col-lg-5 {
    flex: 0 0 auto;
    width: 41.66666667%;
  }

  .col-lg-6 {
    flex: 0 0 auto;
    width: 50%;
  }

  .col-lg-7 {
    flex: 0 0 auto;
    width: 58.33333333%;
  }

  .col-lg-8 {
    flex: 0 0 auto;
    width: 66.66666667%;
  }

  .col-lg-9 {
    flex: 0 0 auto;
    width: 75%;
  }

  .col-lg-10 {
    flex: 0 0 auto;
    width: 83.33333333%;
  }

  .col-lg-11 {
    flex: 0 0 auto;
    width: 91.66666667%;
  }

  .col-lg-12 {
    flex: 0 0 auto;
    width: 100%;
  }

  .offset-lg-0 {
    margin-left: 0;
  }

  .offset-lg-1 {
    margin-left: 8.33333333%;
  }

  .offset-lg-2 {
    margin-left: 16.66666667%;
  }

  .offset-lg-3 {
    margin-left: 25%;
  }

  .offset-lg-4 {
    margin-left: 33.33333333%;
  }

  .offset-lg-5 {
    margin-left: 41.66666667%;
  }

  .offset-lg-6 {
    margin-left: 50%;
  }

  .offset-lg-7 {
    margin-left: 58.33333333%;
  }

  .offset-lg-8 {
    margin-left: 66.66666667%;
  }

  .offset-lg-9 {
    margin-left: 75%;
  }

  .offset-lg-10 {
    margin-left: 83.33333333%;
  }

  .offset-lg-11 {
    margin-left: 91.66666667%;
  }

  .g-lg-0,
  .gx-lg-0 {
    --bs-gutter-x: 0;
  }

  .g-lg-0,
  .gy-lg-0 {
    --bs-gutter-y: 0;
  }

  .g-lg-1,
  .gx-lg-1 {
    --bs-gutter-x: 0.25rem;
  }

  .g-lg-1,
  .gy-lg-1 {
    --bs-gutter-y: 0.25rem;
  }

  .g-lg-2,
  .gx-lg-2 {
    --bs-gutter-x: 0.5rem;
  }

  .g-lg-2,
  .gy-lg-2 {
    --bs-gutter-y: 0.5rem;
  }

  .g-lg-3,
  .gx-lg-3 {
    --bs-gutter-x: 1rem;
  }

  .g-lg-3,
  .gy-lg-3 {
    --bs-gutter-y: 1rem;
  }

  .g-lg-4,
  .gx-lg-4 {
    --bs-gutter-x: 1.5rem;
  }

  .g-lg-4,
  .gy-lg-4 {
    --bs-gutter-y: 1.5rem;
  }

  .g-lg-5,
  .gx-lg-5 {
    --bs-gutter-x: 3rem;
  }

  .g-lg-5,
  .gy-lg-5 {
    --bs-gutter-y: 3rem;
  }
}

@media (min-width: 1200px) {
  .col-xl {
    flex: 1 0 0%;
  }

  .row-cols-xl-auto>* {
    flex: 0 0 auto;
    width: auto;
  }

  .row-cols-xl-1>* {
    flex: 0 0 auto;
    width: 100%;
  }

  .row-cols-xl-2>* {
    flex: 0 0 auto;
    width: 50%;
  }

  .row-cols-xl-3>* {
    flex: 0 0 auto;
    width: 33.3333333333%;
  }

  .row-cols-xl-4>* {
    flex: 0 0 auto;
    width: 25%;
  }

  .row-cols-xl-5>* {
    flex: 0 0 auto;
    width: 20%;
  }

  .row-cols-xl-6>* {
    flex: 0 0 auto;
    width: 16.6666666667%;
  }

  .col-xl-auto {
    flex: 0 0 auto;
    width: auto;
  }

  .col-xl-1 {
    flex: 0 0 auto;
    width: 8.33333333%;
  }

  .col-xl-2 {
    flex: 0 0 auto;
    width: 16.66666667%;
  }

  .col-xl-3 {
    flex: 0 0 auto;
    width: 25%;
  }

  .col-xl-4 {
    flex: 0 0 auto;
    width: 33.33333333%;
  }

  .col-xl-5 {
    flex: 0 0 auto;
    width: 41.66666667%;
  }

  .col-xl-6 {
    flex: 0 0 auto;
    width: 50%;
  }

  .col-xl-7 {
    flex: 0 0 auto;
    width: 58.33333333%;
  }

  .col-xl-8 {
    flex: 0 0 auto;
    width: 66.66666667%;
  }

  .col-xl-9 {
    flex: 0 0 auto;
    width: 75%;
  }

  .col-xl-10 {
    flex: 0 0 auto;
    width: 83.33333333%;
  }

  .col-xl-11 {
    flex: 0 0 auto;
    width: 91.66666667%;
  }

  .col-xl-12 {
    flex: 0 0 auto;
    width: 100%;
  }

  .offset-xl-0 {
    margin-left: 0;
  }

  .offset-xl-1 {
    margin-left: 8.33333333%;
  }

  .offset-xl-2 {
    margin-left: 16.66666667%;
  }

  .offset-xl-3 {
    margin-left: 25%;
  }

  .offset-xl-4 {
    margin-left: 33.33333333%;
  }

  .offset-xl-5 {
    margin-left: 41.66666667%;
  }

  .offset-xl-6 {
    margin-left: 50%;
  }

  .offset-xl-7 {
    margin-left: 58.33333333%;
  }

  .offset-xl-8 {
    margin-left: 66.66666667%;
  }

  .offset-xl-9 {
    margin-left: 75%;
  }

  .offset-xl-10 {
    margin-left: 83.33333333%;
  }

  .offset-xl-11 {
    margin-left: 91.66666667%;
  }

  .g-xl-0,
  .gx-xl-0 {
    --bs-gutter-x: 0;
  }

  .g-xl-0,
  .gy-xl-0 {
    --bs-gutter-y: 0;
  }

  .g-xl-1,
  .gx-xl-1 {
    --bs-gutter-x: 0.25rem;
  }

  .g-xl-1,
  .gy-xl-1 {
    --bs-gutter-y: 0.25rem;
  }

  .g-xl-2,
  .gx-xl-2 {
    --bs-gutter-x: 0.5rem;
  }

  .g-xl-2,
  .gy-xl-2 {
    --bs-gutter-y: 0.5rem;
  }

  .g-xl-3,
  .gx-xl-3 {
    --bs-gutter-x: 1rem;
  }

  .g-xl-3,
  .gy-xl-3 {
    --bs-gutter-y: 1rem;
  }

  .g-xl-4,
  .gx-xl-4 {
    --bs-gutter-x: 1.5rem;
  }

  .g-xl-4,
  .gy-xl-4 {
    --bs-gutter-y: 1.5rem;
  }

  .g-xl-5,
  .gx-xl-5 {
    --bs-gutter-x: 3rem;
  }

  .g-xl-5,
  .gy-xl-5 {
    --bs-gutter-y: 3rem;
  }
}

@media (min-width: 1400px) {
  .col-xxl {
    flex: 1 0 0%;
  }

  .row-cols-xxl-auto>* {
    flex: 0 0 auto;
    width: auto;
  }

  .row-cols-xxl-1>* {
    flex: 0 0 auto;
    width: 100%;
  }

  .row-cols-xxl-2>* {
    flex: 0 0 auto;
    width: 50%;
  }

  .row-cols-xxl-3>* {
    flex: 0 0 auto;
    width: 33.3333333333%;
  }

  .row-cols-xxl-4>* {
    flex: 0 0 auto;
    width: 25%;
  }

  .row-cols-xxl-5>* {
    flex: 0 0 auto;
    width: 20%;
  }

  .row-cols-xxl-6>* {
    flex: 0 0 auto;
    width: 16.6666666667%;
  }

  .col-xxl-auto {
    flex: 0 0 auto;
    width: auto;
  }

  .col-xxl-1 {
    flex: 0 0 auto;
    width: 8.33333333%;
  }

  .col-xxl-2 {
    flex: 0 0 auto;
    width: 16.66666667%;
  }

  .col-xxl-3 {
    flex: 0 0 auto;
    width: 25%;
  }

  .col-xxl-4 {
    flex: 0 0 auto;
    width: 33.33333333%;
  }

  .col-xxl-5 {
    flex: 0 0 auto;
    width: 41.66666667%;
  }

  .col-xxl-6 {
    flex: 0 0 auto;
    width: 50%;
  }

  .col-xxl-7 {
    flex: 0 0 auto;
    width: 58.33333333%;
  }

  .col-xxl-8 {
    flex: 0 0 auto;
    width: 66.66666667%;
  }

  .col-xxl-9 {
    flex: 0 0 auto;
    width: 75%;
  }

  .col-xxl-10 {
    flex: 0 0 auto;
    width: 83.33333333%;
  }

  .col-xxl-11 {
    flex: 0 0 auto;
    width: 91.66666667%;
  }

  .col-xxl-12 {
    flex: 0 0 auto;
    width: 100%;
  }

  .offset-xxl-0 {
    margin-left: 0;
  }

  .offset-xxl-1 {
    margin-left: 8.33333333%;
  }

  .offset-xxl-2 {
    margin-left: 16.66666667%;
  }

  .offset-xxl-3 {
    margin-left: 25%;
  }

  .offset-xxl-4 {
    margin-left: 33.33333333%;
  }

  .offset-xxl-5 {
    margin-left: 41.66666667%;
  }

  .offset-xxl-6 {
    margin-left: 50%;
  }

  .offset-xxl-7 {
    margin-left: 58.33333333%;
  }

  .offset-xxl-8 {
    margin-left: 66.66666667%;
  }

  .offset-xxl-9 {
    margin-left: 75%;
  }

  .offset-xxl-10 {
    margin-left: 83.33333333%;
  }

  .offset-xxl-11 {
    margin-left: 91.66666667%;
  }

  .g-xxl-0,
  .gx-xxl-0 {
    --bs-gutter-x: 0;
  }

  .g-xxl-0,
  .gy-xxl-0 {
    --bs-gutter-y: 0;
  }

  .g-xxl-1,
  .gx-xxl-1 {
    --bs-gutter-x: 0.25rem;
  }

  .g-xxl-1,
  .gy-xxl-1 {
    --bs-gutter-y: 0.25rem;
  }

  .g-xxl-2,
  .gx-xxl-2 {
    --bs-gutter-x: 0.5rem;
  }

  .g-xxl-2,
  .gy-xxl-2 {
    --bs-gutter-y: 0.5rem;
  }

  .g-xxl-3,
  .gx-xxl-3 {
    --bs-gutter-x: 1rem;
  }

  .g-xxl-3,
  .gy-xxl-3 {
    --bs-gutter-y: 1rem;
  }

  .g-xxl-4,
  .gx-xxl-4 {
    --bs-gutter-x: 1.5rem;
  }

  .g-xxl-4,
  .gy-xxl-4 {
    --bs-gutter-y: 1.5rem;
  }

  .g-xxl-5,
  .gx-xxl-5 {
    --bs-gutter-x: 3rem;
  }

  .g-xxl-5,
  .gy-xxl-5 {
    --bs-gutter-y: 3rem;
  }
}

.table {
  --bs-table-color: var(--bs-body-color);
  --bs-table-bg: transparent;
  --bs-table-border-color: var(--bs-border-color);
  --bs-table-accent-bg: transparent;
  --bs-table-striped-color: var(--bs-body-color);
  --bs-table-striped-bg: rgba(0, 0, 0, 0.05);
  --bs-table-active-color: var(--bs-body-color);
  --bs-table-active-bg: rgba(0, 0, 0, 0.1);
  --bs-table-hover-color: var(--bs-body-color);
  --bs-table-hover-bg: rgba(0, 0, 0, 0.075);
  width: 100%;
  margin-bottom: 1rem;
  color: var(--bs-table-color);
  vertical-align: top;
  border-color: var(--bs-table-border-color);
}

.table> :not(caption)>*>* {
  padding: 0.5rem 0.5rem;
  background-color: var(--bs-table-bg);
  border-bottom-width: 1px;
  box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg);
}

.table>tbody {
  vertical-align: inherit;
}

.table>thead {
  vertical-align: bottom;
}

.table-group-divider {
  border-top: 2px solid currentcolor;
}

.caption-top {
  caption-side: top;
}

.table-sm> :not(caption)>*>* {
  padding: 0.25rem 0.25rem;
}

.table-bordered> :not(caption)>* {
  border-width: 1px 0;
}

.table-bordered> :not(caption)>*>* {
  border-width: 0 1px;
}

.table-borderless> :not(caption)>*>* {
  border-bottom-width: 0;
}

.table-borderless> :not(:first-child) {
  border-top-width: 0;
}

.table-striped>tbody>tr:nth-of-type(odd)>* {
  --bs-table-accent-bg: var(--bs-table-striped-bg);
  color: var(--bs-table-striped-color);
}

.table-striped-columns> :not(caption)>tr> :nth-child(even) {
  --bs-table-accent-bg: var(--bs-table-striped-bg);
  color: var(--bs-table-striped-color);
}

.table-active {
  --bs-table-accent-bg: var(--bs-table-active-bg);
  color: var(--bs-table-active-color);
}

.table-hover>tbody>tr:hover>* {
  --bs-table-accent-bg: var(--bs-table-hover-bg);
  color: var(--bs-table-hover-color);
}

.table-primary {
  --bs-table-color: #000;
  --bs-table-bg: #cfe2ff;
  --bs-table-border-color: #bacbe6;
  --bs-table-striped-bg: #c5d7f2;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #bacbe6;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #bfd1ec;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-secondary {
  --bs-table-color: #000;
  --bs-table-bg: #e2e3e5;
  --bs-table-border-color: #cbccce;
  --bs-table-striped-bg: #d7d8da;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #cbccce;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #d1d2d4;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-success {
  --bs-table-color: #000;
  --bs-table-bg: #d1e7dd;
  --bs-table-border-color: #bcd0c7;
  --bs-table-striped-bg: #c7dbd2;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #bcd0c7;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #c1d6cc;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-info {
  --bs-table-color: #000;
  --bs-table-bg: #cff4fc;
  --bs-table-border-color: #badce3;
  --bs-table-striped-bg: #c5e8ef;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #badce3;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #bfe2e9;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-warning {
  --bs-table-color: #000;
  --bs-table-bg: #fff3cd;
  --bs-table-border-color: #e6dbb9;
  --bs-table-striped-bg: #f2e7c3;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #e6dbb9;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #ece1be;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-danger {
  --bs-table-color: #000;
  --bs-table-bg: #f8d7da;
  --bs-table-border-color: #dfc2c4;
  --bs-table-striped-bg: #eccccf;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #dfc2c4;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #e5c7ca;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-light {
  --bs-table-color: #000;
  --bs-table-bg: #f8f9fa;
  --bs-table-border-color: #dfe0e1;
  --bs-table-striped-bg: #ecedee;
  --bs-table-striped-color: #000;
  --bs-table-active-bg: #dfe0e1;
  --bs-table-active-color: #000;
  --bs-table-hover-bg: #e5e6e7;
  --bs-table-hover-color: #000;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-dark {
  --bs-table-color: #fff;
  --bs-table-bg: #212529;
  --bs-table-border-color: #373b3e;
  --bs-table-striped-bg: #2c3034;
  --bs-table-striped-color: #fff;
  --bs-table-active-bg: #373b3e;
  --bs-table-active-color: #fff;
  --bs-table-hover-bg: #323539;
  --bs-table-hover-color: #fff;
  color: var(--bs-table-color);
  border-color: var(--bs-table-border-color);
}

.table-responsive {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

@media (max-width: 575.98px) {
  .table-responsive-sm {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}

@media (max-width: 767.98px) {
  .table-responsive-md {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}

@media (max-width: 991.98px) {
  .table-responsive-lg {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}

@media (max-width: 1199.98px) {
  .table-responsive-xl {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}

@media (max-width: 1399.98px) {
  .table-responsive-xxl {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}

.form-label {
  margin-bottom: 0.5rem;
}

.col-form-label {
  padding-top: calc(0.375rem + 1px);
  padding-bottom: calc(0.375rem + 1px);
  margin-bottom: 0;
  font-size: inherit;
  line-height: 1.5;
}

.col-form-label-lg {
  padding-top: calc(0.5rem + 1px);
  padding-bottom: calc(0.5rem + 1px);
  font-size: 1.25rem;
}

.col-form-label-sm {
  padding-top: calc(0.25rem + 1px);
  padding-bottom: calc(0.25rem + 1px);
  font-size: 0.875rem;
}

.form-text {
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #6c757d;
}

.form-control {
  display: block;
  width: 100%;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border-radius: 0.375rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .form-control {
    transition: none;
  }
}

.form-control[type=file] {
  overflow: hidden;
}

.form-control[type=file]:not(:disabled):not([readonly]) {
  cursor: pointer;
}

.form-control:focus {
  color: #212529;
  background-color: #fff;
  border-color: #86b7fe;
  outline: 0;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-control::-webkit-date-and-time-value {
  height: 1.5em;
}

.form-control::-moz-placeholder {
  color: #6c757d;
  opacity: 1;
}

.form-control::placeholder {
  color: #6c757d;
  opacity: 1;
}

.form-control:disabled {
  background-color: #e9ecef;
  opacity: 1;
}

.form-control::file-selector-button {
  padding: 0.375rem 0.75rem;
  margin: -0.375rem -0.75rem;
  -webkit-margin-end: 0.75rem;
  margin-inline-end: 0.75rem;
  color: #212529;
  background-color: #e9ecef;
  pointer-events: none;
  border-color: inherit;
  border-style: solid;
  border-width: 0;
  border-inline-end-width: 1px;
  border-radius: 0;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .form-control::file-selector-button {
    transition: none;
  }
}

.form-control:hover:not(:disabled):not([readonly])::file-selector-button {
  background-color: #dde0e3;
}

.form-control-plaintext {
  display: block;
  width: 100%;
  padding: 0.375rem 0;
  margin-bottom: 0;
  line-height: 1.5;
  color: #212529;
  background-color: transparent;
  border: solid transparent;
  border-width: 1px 0;
}

.form-control-plaintext:focus {
  outline: 0;
}

.form-control-plaintext.form-control-sm,
.form-control-plaintext.form-control-lg {
  padding-right: 0;
  padding-left: 0;
}

.form-control-sm {
  min-height: calc(1.5em + 0.5rem + 2px);
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  border-radius: 0.25rem;
}

.form-control-sm::file-selector-button {
  padding: 0.25rem 0.5rem;
  margin: -0.25rem -0.5rem;
  -webkit-margin-end: 0.5rem;
  margin-inline-end: 0.5rem;
}

.form-control-lg {
  min-height: calc(1.5em + 1rem + 2px);
  padding: 0.5rem 1rem;
  font-size: 1.25rem;
  border-radius: 0.5rem;
}

.form-control-lg::file-selector-button {
  padding: 0.5rem 1rem;
  margin: -0.5rem -1rem;
  -webkit-margin-end: 1rem;
  margin-inline-end: 1rem;
}

textarea.form-control {
  min-height: calc(1.5em + 0.75rem + 2px);
}

textarea.form-control-sm {
  min-height: calc(1.5em + 0.5rem + 2px);
}

textarea.form-control-lg {
  min-height: calc(1.5em + 1rem + 2px);
}

.form-control-color {
  width: 3rem;
  height: calc(1.5em + 0.75rem + 2px);
  padding: 0.375rem;
}

.form-control-color:not(:disabled):not([readonly]) {
  cursor: pointer;
}

.form-control-color::-moz-color-swatch {
  border: 0 !important;
  border-radius: 0.375rem;
}

.form-control-color::-webkit-color-swatch {
  border-radius: 0.375rem;
}

.form-control-color.form-control-sm {
  height: calc(1.5em + 0.5rem + 2px);
}

.form-control-color.form-control-lg {
  height: calc(1.5em + 1rem + 2px);
}

.form-select {
  display: block;
  width: 100%;
  padding: 0.375rem 2.25rem 0.375rem 0.75rem;
  -moz-padding-start: calc(0.75rem - 3px);
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  background-color: #fff;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 16px 12px;
  border: 1px solid #ced4da;
  border-radius: 0.375rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

@media (prefers-reduced-motion: reduce) {
  .form-select {
    transition: none;
  }
}

.form-select:focus {
  border-color: #86b7fe;
  outline: 0;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-select[multiple],
.form-select[size]:not([size="1"]) {
  padding-right: 0.75rem;
  background-image: none;
}

.form-select:disabled {
  background-color: #e9ecef;
}

.form-select:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 #212529;
}

.form-select-sm {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
  padding-left: 0.5rem;
  font-size: 0.875rem;
  border-radius: 0.25rem;
}

.form-select-lg {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  padding-left: 1rem;
  font-size: 1.25rem;
  border-radius: 0.5rem;
}

.form-check {
  display: block;
  min-height: 1.5rem;
  padding-left: 1.5em;
  margin-bottom: 0.125rem;
}

.form-check .form-check-input {
  float: left;
  margin-left: -1.5em;
}

.form-check-reverse {
  padding-right: 1.5em;
  padding-left: 0;
  text-align: right;
}

.form-check-reverse .form-check-input {
  float: right;
  margin-right: -1.5em;
  margin-left: 0;
}

.form-check-input {
  width: 1em;
  height: 1em;
  margin-top: 0.25em;
  vertical-align: top;
  background-color: #fff;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  border: 1px solid rgba(0, 0, 0, 0.25);
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-print-color-adjust: exact;
  print-color-adjust: exact;
}

.form-check-input[type=checkbox] {
  border-radius: 0.25em;
}

.form-check-input[type=radio] {
  border-radius: 50%;
}

.form-check-input:active {
  filter: brightness(90%);
}

.form-check-input:focus {
  border-color: #86b7fe;
  outline: 0;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-check-input:checked {
  background-color: #0d6efd;
  border-color: #0d6efd;
}

.form-check-input:checked[type=checkbox] {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e");
}

.form-check-input:checked[type=radio] {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e");
}

.form-check-input[type=checkbox]:indeterminate {
  background-color: #0d6efd;
  border-color: #0d6efd;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e");
}

.form-check-input:disabled {
  pointer-events: none;
  filter: none;
  opacity: 0.5;
}

.form-check-input[disabled]~.form-check-label,
.form-check-input:disabled~.form-check-label {
  cursor: default;
  opacity: 0.5;
}

.form-switch {
  padding-left: 2.5em;
}

.form-switch .form-check-input {
  width: 2em;
  margin-left: -2.5em;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");
  background-position: left center;
  border-radius: 2em;
  transition: background-position 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .form-switch .form-check-input {
    transition: none;
  }
}

.form-switch .form-check-input:focus {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e");
}

.form-switch .form-check-input:checked {
  background-position: right center;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
}

.form-switch.form-check-reverse {
  padding-right: 2.5em;
  padding-left: 0;
}

.form-switch.form-check-reverse .form-check-input {
  margin-right: -2.5em;
  margin-left: 0;
}

.form-check-inline {
  display: inline-block;
  margin-right: 1rem;
}

.btn-check {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none;
}

.btn-check[disabled]+.btn,
.btn-check:disabled+.btn {
  pointer-events: none;
  filter: none;
  opacity: 0.65;
}

.form-range {
  width: 100%;
  height: 1.5rem;
  padding: 0;
  background-color: transparent;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.form-range:focus {
  outline: 0;
}

.form-range:focus::-webkit-slider-thumb {
  box-shadow: 0 0 0 1px #fff, 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-range:focus::-moz-range-thumb {
  box-shadow: 0 0 0 1px #fff, 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-range::-moz-focus-outer {
  border: 0;
}

.form-range::-webkit-slider-thumb {
  width: 1rem;
  height: 1rem;
  margin-top: -0.25rem;
  background-color: #0d6efd;
  border: 0;
  border-radius: 1rem;
  -webkit-transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  -webkit-appearance: none;
  appearance: none;
}

@media (prefers-reduced-motion: reduce) {
  .form-range::-webkit-slider-thumb {
    -webkit-transition: none;
    transition: none;
  }
}

.form-range::-webkit-slider-thumb:active {
  background-color: #b6d4fe;
}

.form-range::-webkit-slider-runnable-track {
  width: 100%;
  height: 0.5rem;
  color: transparent;
  cursor: pointer;
  background-color: #dee2e6;
  border-color: transparent;
  border-radius: 1rem;
}

.form-range::-moz-range-thumb {
  width: 1rem;
  height: 1rem;
  background-color: #0d6efd;
  border: 0;
  border-radius: 1rem;
  -moz-transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  -moz-appearance: none;
  appearance: none;
}

@media (prefers-reduced-motion: reduce) {
  .form-range::-moz-range-thumb {
    -moz-transition: none;
    transition: none;
  }
}

.form-range::-moz-range-thumb:active {
  background-color: #b6d4fe;
}

.form-range::-moz-range-track {
  width: 100%;
  height: 0.5rem;
  color: transparent;
  cursor: pointer;
  background-color: #dee2e6;
  border-color: transparent;
  border-radius: 1rem;
}

.form-range:disabled {
  pointer-events: none;
}

.form-range:disabled::-webkit-slider-thumb {
  background-color: #adb5bd;
}

.form-range:disabled::-moz-range-thumb {
  background-color: #adb5bd;
}

.form-floating {
  position: relative;
}

.form-floating>.form-control,
.form-floating>.form-control-plaintext,
.form-floating>.form-select {
  height: calc(3.5rem + 2px);
  line-height: 1.25;
}

.form-floating>label {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding: 1rem 0.75rem;
  overflow: hidden;
  text-align: start;
  text-overflow: ellipsis;
  white-space: nowrap;
  pointer-events: none;
  border: 1px solid transparent;
  transform-origin: 0 0;
  transition: opacity 0.1s ease-in-out, transform 0.1s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .form-floating>label {
    transition: none;
  }
}

.form-floating>.form-control,
.form-floating>.form-control-plaintext {
  padding: 1rem 0.75rem;
}

.form-floating>.form-control::-moz-placeholder,
.form-floating>.form-control-plaintext::-moz-placeholder {
  color: transparent;
}

.form-floating>.form-control::placeholder,
.form-floating>.form-control-plaintext::placeholder {
  color: transparent;
}

.form-floating>.form-control:not(:-moz-placeholder-shown),
.form-floating>.form-control-plaintext:not(:-moz-placeholder-shown) {
  padding-top: 1.625rem;
  padding-bottom: 0.625rem;
}

.form-floating>.form-control:focus,
.form-floating>.form-control:not(:placeholder-shown),
.form-floating>.form-control-plaintext:focus,
.form-floating>.form-control-plaintext:not(:placeholder-shown) {
  padding-top: 1.625rem;
  padding-bottom: 0.625rem;
}

.form-floating>.form-control:-webkit-autofill,
.form-floating>.form-control-plaintext:-webkit-autofill {
  padding-top: 1.625rem;
  padding-bottom: 0.625rem;
}

.form-floating>.form-select {
  padding-top: 1.625rem;
  padding-bottom: 0.625rem;
}

.form-floating>.form-control:not(:-moz-placeholder-shown)~label {
  opacity: 0.65;
  transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
}

.form-floating>.form-control:focus~label,
.form-floating>.form-control:not(:placeholder-shown)~label,
.form-floating>.form-control-plaintext~label,
.form-floating>.form-select~label {
  opacity: 0.65;
  transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
}

.form-floating>.form-control:-webkit-autofill~label {
  opacity: 0.65;
  transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
}

.form-floating>.form-control-plaintext~label {
  border-width: 1px 0;
}

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  width: 100%;
}

.input-group>.form-control,
.input-group>.form-select,
.input-group>.form-floating {
  position: relative;
  flex: 1 1 auto;
  width: 1%;
  min-width: 0;
}

.input-group>.form-control:focus,
.input-group>.form-select:focus,
.input-group>.form-floating:focus-within {
  z-index: 5;
}

.input-group .btn {
  position: relative;
  z-index: 2;
}

.input-group .btn:focus {
  z-index: 5;
}

.input-group-text {
  display: flex;
  align-items: center;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  text-align: center;
  white-space: nowrap;
  background-color: #e9ecef;
  border: 1px solid #ced4da;
  border-radius: 0.375rem;
}

.input-group-lg>.form-control,
.input-group-lg>.form-select,
.input-group-lg>.input-group-text,
.input-group-lg>.btn {
  padding: 0.5rem 1rem;
  font-size: 1.25rem;
  border-radius: 0.5rem;
}

.input-group-sm>.form-control,
.input-group-sm>.form-select,
.input-group-sm>.input-group-text,
.input-group-sm>.btn {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  border-radius: 0.25rem;
}

.input-group-lg>.form-select,
.input-group-sm>.form-select {
  padding-right: 3rem;
}

.input-group:not(.has-validation)> :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating),
.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),
.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-control,
.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-select {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.input-group.has-validation> :nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating),
.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),
.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-control,
.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-select {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.input-group> :not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {
  margin-left: -1px;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.input-group>.form-floating:not(:first-child)>.form-control,
.input-group>.form-floating:not(:first-child)>.form-select {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.valid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #198754;
}

.valid-tooltip {
  position: absolute;
  top: 100%;
  z-index: 5;
  display: none;
  max-width: 100%;
  padding: 0.25rem 0.5rem;
  margin-top: 0.1rem;
  font-size: 0.875rem;
  color: #fff;
  background-color: rgba(25, 135, 84, 0.9);
  border-radius: 0.375rem;
}

.was-validated :valid~.valid-feedback,
.was-validated :valid~.valid-tooltip,
.is-valid~.valid-feedback,
.is-valid~.valid-tooltip {
  display: block;
}

.was-validated .form-control:valid,
.form-control.is-valid {
  border-color: #198754;
  padding-right: calc(1.5em + 0.75rem);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-control:valid:focus,
.form-control.is-valid:focus {
  border-color: #198754;
  box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

.was-validated textarea.form-control:valid,
textarea.form-control.is-valid {
  padding-right: calc(1.5em + 0.75rem);
  background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);
}

.was-validated .form-select:valid,
.form-select.is-valid {
  border-color: #198754;
}

.was-validated .form-select:valid:not([multiple]):not([size]),
.was-validated .form-select:valid:not([multiple])[size="1"],
.form-select.is-valid:not([multiple]):not([size]),
.form-select.is-valid:not([multiple])[size="1"] {
  padding-right: 4.125rem;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
  background-position: right 0.75rem center, center right 2.25rem;
  background-size: 16px 12px, calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-select:valid:focus,
.form-select.is-valid:focus {
  border-color: #198754;
  box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

.was-validated .form-control-color:valid,
.form-control-color.is-valid {
  width: calc(3rem + calc(1.5em + 0.75rem));
}

.was-validated .form-check-input:valid,
.form-check-input.is-valid {
  border-color: #198754;
}

.was-validated .form-check-input:valid:checked,
.form-check-input.is-valid:checked {
  background-color: #198754;
}

.was-validated .form-check-input:valid:focus,
.form-check-input.is-valid:focus {
  box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

.was-validated .form-check-input:valid~.form-check-label,
.form-check-input.is-valid~.form-check-label {
  color: #198754;
}

.form-check-inline .form-check-input~.valid-feedback {
  margin-left: 0.5em;
}

.was-validated .input-group>.form-control:not(:focus):valid,
.input-group>.form-control:not(:focus).is-valid,
.was-validated .input-group>.form-select:not(:focus):valid,
.input-group>.form-select:not(:focus).is-valid,
.was-validated .input-group>.form-floating:not(:focus-within):valid,
.input-group>.form-floating:not(:focus-within).is-valid {
  z-index: 3;
}

.invalid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #dc3545;
}

.invalid-tooltip {
  position: absolute;
  top: 100%;
  z-index: 5;
  display: none;
  max-width: 100%;
  padding: 0.25rem 0.5rem;
  margin-top: 0.1rem;
  font-size: 0.875rem;
  color: #fff;
  background-color: rgba(220, 53, 69, 0.9);
  border-radius: 0.375rem;
}

.was-validated :invalid~.invalid-feedback,
.was-validated :invalid~.invalid-tooltip,
.is-invalid~.invalid-feedback,
.is-invalid~.invalid-tooltip {
  display: block;
}

.was-validated .form-control:invalid,
.form-control.is-invalid {
  border-color: #dc3545;
  padding-right: calc(1.5em + 0.75rem);
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-control:invalid:focus,
.form-control.is-invalid:focus {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}

.was-validated textarea.form-control:invalid,
textarea.form-control.is-invalid {
  padding-right: calc(1.5em + 0.75rem);
  background-position: top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem);
}

.was-validated .form-select:invalid,
.form-select.is-invalid {
  border-color: #dc3545;
}

.was-validated .form-select:invalid:not([multiple]):not([size]),
.was-validated .form-select:invalid:not([multiple])[size="1"],
.form-select.is-invalid:not([multiple]):not([size]),
.form-select.is-invalid:not([multiple])[size="1"] {
  padding-right: 4.125rem;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
  background-position: right 0.75rem center, center right 2.25rem;
  background-size: 16px 12px, calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-select:invalid:focus,
.form-select.is-invalid:focus {
  border-color: #dc3545;
  box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}

.was-validated .form-control-color:invalid,
.form-control-color.is-invalid {
  width: calc(3rem + calc(1.5em + 0.75rem));
}

.was-validated .form-check-input:invalid,
.form-check-input.is-invalid {
  border-color: #dc3545;
}

.was-validated .form-check-input:invalid:checked,
.form-check-input.is-invalid:checked {
  background-color: #dc3545;
}

.was-validated .form-check-input:invalid:focus,
.form-check-input.is-invalid:focus {
  box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
}

.was-validated .form-check-input:invalid~.form-check-label,
.form-check-input.is-invalid~.form-check-label {
  color: #dc3545;
}

.form-check-inline .form-check-input~.invalid-feedback {
  margin-left: 0.5em;
}

.was-validated .input-group>.form-control:not(:focus):invalid,
.input-group>.form-control:not(:focus).is-invalid,
.was-validated .input-group>.form-select:not(:focus):invalid,
.input-group>.form-select:not(:focus).is-invalid,
.was-validated .input-group>.form-floating:not(:focus-within):invalid,
.input-group>.form-floating:not(:focus-within).is-invalid {
  z-index: 4;
}

.btn {
  --bs-btn-padding-x: 0.75rem;
  --bs-btn-padding-y: 0.375rem;
  --bs-btn-font-family: ;
  --bs-btn-font-size: 1rem;
  --bs-btn-font-weight: 400;
  --bs-btn-line-height: 1.5;
  --bs-btn-color: #212529;
  --bs-btn-bg: transparent;
  --bs-btn-border-width: 1px;
  --bs-btn-border-color: transparent;
  --bs-btn-border-radius: 0.375rem;
  --bs-btn-hover-border-color: transparent;
  --bs-btn-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.15), 0 1px 1px rgba(0, 0, 0, 0.075);
  --bs-btn-disabled-opacity: 0.65;
  --bs-btn-focus-box-shadow: 0 0 0 0.25rem rgba(var(--bs-btn-focus-shadow-rgb), .5);
  display: inline-block;
  padding: var(--bs-btn-padding-y) var(--bs-btn-padding-x);
  font-family: var(--bs-btn-font-family);
  font-size: var(--bs-btn-font-size);
  font-weight: var(--bs-btn-font-weight);
  line-height: var(--bs-btn-line-height);
  color: var(--bs-btn-color);
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  border: var(--bs-btn-border-width) solid var(--bs-btn-border-color);
  border-radius: var(--bs-btn-border-radius);
  background-color: var(--bs-btn-bg);
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .btn {
    transition: none;
  }
}

.btn:hover {
  color: var(--bs-btn-hover-color);
  background-color: var(--bs-btn-hover-bg);
  border-color: var(--bs-btn-hover-border-color);
}

.btn-check+.btn:hover {
  color: var(--bs-btn-color);
  background-color: var(--bs-btn-bg);
  border-color: var(--bs-btn-border-color);
}

.btn:focus-visible {
  color: var(--bs-btn-hover-color);
  background-color: var(--bs-btn-hover-bg);
  border-color: var(--bs-btn-hover-border-color);
  outline: 0;
  box-shadow: var(--bs-btn-focus-box-shadow);
}

.btn-check:focus-visible+.btn {
  border-color: var(--bs-btn-hover-border-color);
  outline: 0;
  box-shadow: var(--bs-btn-focus-box-shadow);
}

.btn-check:checked+.btn,
:not(.btn-check)+.btn:active,
.btn:first-child:active,
.btn.active,
.btn.show {
  color: var(--bs-btn-active-color);
  background-color: var(--bs-btn-active-bg);
  border-color: var(--bs-btn-active-border-color);
}

.btn-check:checked+.btn:focus-visible,
:not(.btn-check)+.btn:active:focus-visible,
.btn:first-child:active:focus-visible,
.btn.active:focus-visible,
.btn.show:focus-visible {
  box-shadow: var(--bs-btn-focus-box-shadow);
}

.btn:disabled,
.btn.disabled,
fieldset:disabled .btn {
  color: var(--bs-btn-disabled-color);
  pointer-events: none;
  background-color: var(--bs-btn-disabled-bg);
  border-color: var(--bs-btn-disabled-border-color);
  opacity: var(--bs-btn-disabled-opacity);
}

.btn-primary {
  --bs-btn-color: #fff;
  --bs-btn-bg: #0d6efd;
  --bs-btn-border-color: #0d6efd;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #0b5ed7;
  --bs-btn-hover-border-color: #0a58ca;
  --bs-btn-focus-shadow-rgb: 49, 132, 253;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #0a58ca;
  --bs-btn-active-border-color: #0a53be;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #fff;
  --bs-btn-disabled-bg: #0d6efd;
  --bs-btn-disabled-border-color: #0d6efd;
}

.btn-secondary {
  --bs-btn-color: #fff;
  --bs-btn-bg: #6c757d;
  --bs-btn-border-color: #6c757d;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #5c636a;
  --bs-btn-hover-border-color: #565e64;
  --bs-btn-focus-shadow-rgb: 130, 138, 145;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #565e64;
  --bs-btn-active-border-color: #51585e;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #fff;
  --bs-btn-disabled-bg: #6c757d;
  --bs-btn-disabled-border-color: #6c757d;
}

.btn-success {
  --bs-btn-color: #fff;
  --bs-btn-bg: #198754;
  --bs-btn-border-color: #198754;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #157347;
  --bs-btn-hover-border-color: #146c43;
  --bs-btn-focus-shadow-rgb: 60, 153, 110;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #146c43;
  --bs-btn-active-border-color: #13653f;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #fff;
  --bs-btn-disabled-bg: #198754;
  --bs-btn-disabled-border-color: #198754;
}

.btn-info {
  --bs-btn-color: #000;
  --bs-btn-bg: #0dcaf0;
  --bs-btn-border-color: #0dcaf0;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #31d2f2;
  --bs-btn-hover-border-color: #25cff2;
  --bs-btn-focus-shadow-rgb: 11, 172, 204;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #3dd5f3;
  --bs-btn-active-border-color: #25cff2;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #000;
  --bs-btn-disabled-bg: #0dcaf0;
  --bs-btn-disabled-border-color: #0dcaf0;
}

.btn-warning {
  --bs-btn-color: #000;
  --bs-btn-bg: #ffc107;
  --bs-btn-border-color: #ffc107;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #ffca2c;
  --bs-btn-hover-border-color: #ffc720;
  --bs-btn-focus-shadow-rgb: 217, 164, 6;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #ffcd39;
  --bs-btn-active-border-color: #ffc720;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #000;
  --bs-btn-disabled-bg: #ffc107;
  --bs-btn-disabled-border-color: #ffc107;
}

.btn-danger {
  --bs-btn-color: #fff;
  --bs-btn-bg: #dc3545;
  --bs-btn-border-color: #dc3545;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #bb2d3b;
  --bs-btn-hover-border-color: #b02a37;
  --bs-btn-focus-shadow-rgb: 225, 83, 97;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #b02a37;
  --bs-btn-active-border-color: #a52834;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #fff;
  --bs-btn-disabled-bg: #dc3545;
  --bs-btn-disabled-border-color: #dc3545;
}

.btn-light {
  --bs-btn-color: #000;
  --bs-btn-bg: #f8f9fa;
  --bs-btn-border-color: #f8f9fa;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #d3d4d5;
  --bs-btn-hover-border-color: #c6c7c8;
  --bs-btn-focus-shadow-rgb: 211, 212, 213;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #c6c7c8;
  --bs-btn-active-border-color: #babbbc;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #000;
  --bs-btn-disabled-bg: #f8f9fa;
  --bs-btn-disabled-border-color: #f8f9fa;
}

.btn-dark {
  --bs-btn-color: #fff;
  --bs-btn-bg: #212529;
  --bs-btn-border-color: #212529;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #424649;
  --bs-btn-hover-border-color: #373b3e;
  --bs-btn-focus-shadow-rgb: 66, 70, 73;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #4d5154;
  --bs-btn-active-border-color: #373b3e;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #fff;
  --bs-btn-disabled-bg: #212529;
  --bs-btn-disabled-border-color: #212529;
}

.btn-outline-primary {
  --bs-btn-color: #0d6efd;
  --bs-btn-border-color: #0d6efd;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #0d6efd;
  --bs-btn-hover-border-color: #0d6efd;
  --bs-btn-focus-shadow-rgb: 13, 110, 253;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #0d6efd;
  --bs-btn-active-border-color: #0d6efd;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #0d6efd;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #0d6efd;
  --bs-gradient: none;
}

.btn-outline-secondary {
  --bs-btn-color: #6c757d;
  --bs-btn-border-color: #6c757d;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #6c757d;
  --bs-btn-hover-border-color: #6c757d;
  --bs-btn-focus-shadow-rgb: 108, 117, 125;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #6c757d;
  --bs-btn-active-border-color: #6c757d;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #6c757d;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #6c757d;
  --bs-gradient: none;
}

.btn-outline-success {
  --bs-btn-color: #198754;
  --bs-btn-border-color: #198754;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #198754;
  --bs-btn-hover-border-color: #198754;
  --bs-btn-focus-shadow-rgb: 25, 135, 84;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #198754;
  --bs-btn-active-border-color: #198754;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #198754;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #198754;
  --bs-gradient: none;
}

.btn-outline-info {
  --bs-btn-color: #0dcaf0;
  --bs-btn-border-color: #0dcaf0;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #0dcaf0;
  --bs-btn-hover-border-color: #0dcaf0;
  --bs-btn-focus-shadow-rgb: 13, 202, 240;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #0dcaf0;
  --bs-btn-active-border-color: #0dcaf0;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #0dcaf0;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #0dcaf0;
  --bs-gradient: none;
}

.btn-outline-warning {
  --bs-btn-color: #ffc107;
  --bs-btn-border-color: #ffc107;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #ffc107;
  --bs-btn-hover-border-color: #ffc107;
  --bs-btn-focus-shadow-rgb: 255, 193, 7;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #ffc107;
  --bs-btn-active-border-color: #ffc107;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #ffc107;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #ffc107;
  --bs-gradient: none;
}

.btn-outline-danger {
  --bs-btn-color: #dc3545;
  --bs-btn-border-color: #dc3545;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #dc3545;
  --bs-btn-hover-border-color: #dc3545;
  --bs-btn-focus-shadow-rgb: 220, 53, 69;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #dc3545;
  --bs-btn-active-border-color: #dc3545;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #dc3545;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #dc3545;
  --bs-gradient: none;
}

.btn-outline-light {
  --bs-btn-color: #f8f9fa;
  --bs-btn-border-color: #f8f9fa;
  --bs-btn-hover-color: #000;
  --bs-btn-hover-bg: #f8f9fa;
  --bs-btn-hover-border-color: #f8f9fa;
  --bs-btn-focus-shadow-rgb: 248, 249, 250;
  --bs-btn-active-color: #000;
  --bs-btn-active-bg: #f8f9fa;
  --bs-btn-active-border-color: #f8f9fa;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #f8f9fa;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #f8f9fa;
  --bs-gradient: none;
}

.btn-outline-dark {
  --bs-btn-color: #212529;
  --bs-btn-border-color: #212529;
  --bs-btn-hover-color: #fff;
  --bs-btn-hover-bg: #212529;
  --bs-btn-hover-border-color: #212529;
  --bs-btn-focus-shadow-rgb: 33, 37, 41;
  --bs-btn-active-color: #fff;
  --bs-btn-active-bg: #212529;
  --bs-btn-active-border-color: #212529;
  --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
  --bs-btn-disabled-color: #212529;
  --bs-btn-disabled-bg: transparent;
  --bs-btn-disabled-border-color: #212529;
  --bs-gradient: none;
}

.btn-link {
  --bs-btn-font-weight: 400;
  --bs-btn-color: var(--bs-link-color);
  --bs-btn-bg: transparent;
  --bs-btn-border-color: transparent;
  --bs-btn-hover-color: var(--bs-link-hover-color);
  --bs-btn-hover-border-color: transparent;
  --bs-btn-active-color: var(--bs-link-hover-color);
  --bs-btn-active-border-color: transparent;
  --bs-btn-disabled-color: #6c757d;
  --bs-btn-disabled-border-color: transparent;
  --bs-btn-box-shadow: none;
  --bs-btn-focus-shadow-rgb: 49, 132, 253;
  text-decoration: underline;
}

.btn-link:focus-visible {
  color: var(--bs-btn-color);
}

.btn-link:hover {
  color: var(--bs-btn-hover-color);
}

.btn-lg,
.btn-group-lg>.btn {
  --bs-btn-padding-y: 0.5rem;
  --bs-btn-padding-x: 1rem;
  --bs-btn-font-size: 1.25rem;
  --bs-btn-border-radius: 0.5rem;
}

.btn-sm,
.btn-group-sm>.btn {
  --bs-btn-padding-y: 0.25rem;
  --bs-btn-padding-x: 0.5rem;
  --bs-btn-font-size: 0.875rem;
  --bs-btn-border-radius: 0.25rem;
}

.fade {
  transition: opacity 0.15s linear;
}

@media (prefers-reduced-motion: reduce) {
  .fade {
    transition: none;
  }
}

.fade:not(.show) {
  opacity: 0;
}

.collapse:not(.show) {
  display: none;
}

.collapsing {
  height: 0;
  overflow: hidden;
  transition: height 0.35s ease;
}

@media (prefers-reduced-motion: reduce) {
  .collapsing {
    transition: none;
  }
}

.collapsing.collapse-horizontal {
  width: 0;
  height: auto;
  transition: width 0.35s ease;
}

@media (prefers-reduced-motion: reduce) {
  .collapsing.collapse-horizontal {
    transition: none;
  }
}

.dropup,
.dropend,
.dropdown,
.dropstart,
.dropup-center,
.dropdown-center {
  position: relative;
}

.dropdown-toggle {
  white-space: nowrap;
}

.dropdown-toggle::after {
  display: inline-block;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid;
  border-right: 0.3em solid transparent;
  border-bottom: 0;
  border-left: 0.3em solid transparent;
}

.dropdown-toggle:empty::after {
  margin-left: 0;
}

.dropdown-menu {
  --bs-dropdown-zindex: 1000;
  --bs-dropdown-min-width: 10rem;
  --bs-dropdown-padding-x: 0;
  --bs-dropdown-padding-y: 0.5rem;
  --bs-dropdown-spacer: 0.125rem;
  --bs-dropdown-font-size: 1rem;
  --bs-dropdown-color: #212529;
  --bs-dropdown-bg: #fff;
  --bs-dropdown-border-color: var(--bs-border-color-translucent);
  --bs-dropdown-border-radius: 0.375rem;
  --bs-dropdown-border-width: 1px;
  --bs-dropdown-inner-border-radius: calc(0.375rem - 1px);
  --bs-dropdown-divider-bg: var(--bs-border-color-translucent);
  --bs-dropdown-divider-margin-y: 0.5rem;
  --bs-dropdown-box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  --bs-dropdown-link-color: #212529;
  --bs-dropdown-link-hover-color: #1e2125;
  --bs-dropdown-link-hover-bg: #e9ecef;
  --bs-dropdown-link-active-color: #fff;
  --bs-dropdown-link-active-bg: #0d6efd;
  --bs-dropdown-link-disabled-color: #adb5bd;
  --bs-dropdown-item-padding-x: 1rem;
  --bs-dropdown-item-padding-y: 0.25rem;
  --bs-dropdown-header-color: #6c757d;
  --bs-dropdown-header-padding-x: 1rem;
  --bs-dropdown-header-padding-y: 0.5rem;
  position: absolute;
  z-index: var(--bs-dropdown-zindex);
  display: none;
  min-width: var(--bs-dropdown-min-width);
  padding: var(--bs-dropdown-padding-y) var(--bs-dropdown-padding-x);
  margin: 0;
  font-size: var(--bs-dropdown-font-size);
  color: var(--bs-dropdown-color);
  text-align: left;
  list-style: none;
  background-color: var(--bs-dropdown-bg);
  background-clip: padding-box;
  border: var(--bs-dropdown-border-width) solid var(--bs-dropdown-border-color);
  border-radius: var(--bs-dropdown-border-radius);
}

.dropdown-menu[data-bs-popper] {
  top: 100%;
  left: 0;
  margin-top: var(--bs-dropdown-spacer);
}

.dropdown-menu-start {
  --bs-position: start;
}

.dropdown-menu-start[data-bs-popper] {
  right: auto;
  left: 0;
}

.dropdown-menu-end {
  --bs-position: end;
}

.dropdown-menu-end[data-bs-popper] {
  right: 0;
  left: auto;
}

@media (min-width: 576px) {
  .dropdown-menu-sm-start {
    --bs-position: start;
  }

  .dropdown-menu-sm-start[data-bs-popper] {
    right: auto;
    left: 0;
  }

  .dropdown-menu-sm-end {
    --bs-position: end;
  }

  .dropdown-menu-sm-end[data-bs-popper] {
    right: 0;
    left: auto;
  }
}

@media (min-width: 768px) {
  .dropdown-menu-md-start {
    --bs-position: start;
  }

  .dropdown-menu-md-start[data-bs-popper] {
    right: auto;
    left: 0;
  }

  .dropdown-menu-md-end {
    --bs-position: end;
  }

  .dropdown-menu-md-end[data-bs-popper] {
    right: 0;
    left: auto;
  }
}

@media (min-width: 992px) {
  .dropdown-menu-lg-start {
    --bs-position: start;
  }

  .dropdown-menu-lg-start[data-bs-popper] {
    right: auto;
    left: 0;
  }

  .dropdown-menu-lg-end {
    --bs-position: end;
  }

  .dropdown-menu-lg-end[data-bs-popper] {
    right: 0;
    left: auto;
  }
}

@media (min-width: 1200px) {
  .dropdown-menu-xl-start {
    --bs-position: start;
  }

  .dropdown-menu-xl-start[data-bs-popper] {
    right: auto;
    left: 0;
  }

  .dropdown-menu-xl-end {
    --bs-position: end;
  }

  .dropdown-menu-xl-end[data-bs-popper] {
    right: 0;
    left: auto;
  }
}

@media (min-width: 1400px) {
  .dropdown-menu-xxl-start {
    --bs-position: start;
  }

  .dropdown-menu-xxl-start[data-bs-popper] {
    right: auto;
    left: 0;
  }

  .dropdown-menu-xxl-end {
    --bs-position: end;
  }

  .dropdown-menu-xxl-end[data-bs-popper] {
    right: 0;
    left: auto;
  }
}

.dropup .dropdown-menu[data-bs-popper] {
  top: auto;
  bottom: 100%;
  margin-top: 0;
  margin-bottom: var(--bs-dropdown-spacer);
}

.dropup .dropdown-toggle::after {
  display: inline-block;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0;
  border-right: 0.3em solid transparent;
  border-bottom: 0.3em solid;
  border-left: 0.3em solid transparent;
}

.dropup .dropdown-toggle:empty::after {
  margin-left: 0;
}

.dropend .dropdown-menu[data-bs-popper] {
  top: 0;
  right: auto;
  left: 100%;
  margin-top: 0;
  margin-left: var(--bs-dropdown-spacer);
}

.dropend .dropdown-toggle::after {
  display: inline-block;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid transparent;
  border-right: 0;
  border-bottom: 0.3em solid transparent;
  border-left: 0.3em solid;
}

.dropend .dropdown-toggle:empty::after {
  margin-left: 0;
}

.dropend .dropdown-toggle::after {
  vertical-align: 0;
}

.dropstart .dropdown-menu[data-bs-popper] {
  top: 0;
  right: 100%;
  left: auto;
  margin-top: 0;
  margin-right: var(--bs-dropdown-spacer);
}

.dropstart .dropdown-toggle::after {
  display: inline-block;
  margin-left: 0.255em;
  vertical-align: 0.255em;
  content: "";
}

.dropstart .dropdown-toggle::after {
  display: none;
}

.dropstart .dropdown-toggle::before {
  display: inline-block;
  margin-right: 0.255em;
  vertical-align: 0.255em;
  content: "";
  border-top: 0.3em solid transparent;
  border-right: 0.3em solid;
  border-bottom: 0.3em solid transparent;
}

.dropstart .dropdown-toggle:empty::after {
  margin-left: 0;
}

.dropstart .dropdown-toggle::before {
  vertical-align: 0;
}

.dropdown-divider {
  height: 0;
  margin: var(--bs-dropdown-divider-margin-y) 0;
  overflow: hidden;
  border-top: 1px solid var(--bs-dropdown-divider-bg);
  opacity: 1;
}

.dropdown-item {
  display: block;
  width: 100%;
  padding: var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);
  clear: both;
  font-weight: 400;
  color: var(--bs-dropdown-link-color);
  text-align: inherit;
  text-decoration: none;
  white-space: nowrap;
  background-color: transparent;
  border: 0;
}

.dropdown-item:hover,
.dropdown-item:focus {
  color: var(--bs-dropdown-link-hover-color);
  background-color: var(--bs-dropdown-link-hover-bg);
}

.dropdown-item.active,
.dropdown-item:active {
  color: var(--bs-dropdown-link-active-color);
  text-decoration: none;
  background-color: var(--bs-dropdown-link-active-bg);
}

.dropdown-item.disabled,
.dropdown-item:disabled {
  color: var(--bs-dropdown-link-disabled-color);
  pointer-events: none;
  background-color: transparent;
}

.dropdown-menu.show {
  display: block;
}

.dropdown-header {
  display: block;
  padding: var(--bs-dropdown-header-padding-y) var(--bs-dropdown-header-padding-x);
  margin-bottom: 0;
  font-size: 0.875rem;
  color: var(--bs-dropdown-header-color);
  white-space: nowrap;
}

.dropdown-item-text {
  display: block;
  padding: var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);
  color: var(--bs-dropdown-link-color);
}

.dropdown-menu-dark {
  --bs-dropdown-color: #dee2e6;
  --bs-dropdown-bg: #343a40;
  --bs-dropdown-border-color: var(--bs-border-color-translucent);
  --bs-dropdown-box-shadow: ;
  --bs-dropdown-link-color: #dee2e6;
  --bs-dropdown-link-hover-color: #fff;
  --bs-dropdown-divider-bg: var(--bs-border-color-translucent);
  --bs-dropdown-link-hover-bg: rgba(255, 255, 255, 0.15);
  --bs-dropdown-link-active-color: #fff;
  --bs-dropdown-link-active-bg: #0d6efd;
  --bs-dropdown-link-disabled-color: #adb5bd;
  --bs-dropdown-header-color: #adb5bd;
}

.btn-group,
.btn-group-vertical {
  position: relative;
  display: inline-flex;
  vertical-align: middle;
}

.btn-group>.btn,
.btn-group-vertical>.btn {
  position: relative;
  flex: 1 1 auto;
}

.btn-group>.btn-check:checked+.btn,
.btn-group>.btn-check:focus+.btn,
.btn-group>.btn:hover,
.btn-group>.btn:focus,
.btn-group>.btn:active,
.btn-group>.btn.active,
.btn-group-vertical>.btn-check:checked+.btn,
.btn-group-vertical>.btn-check:focus+.btn,
.btn-group-vertical>.btn:hover,
.btn-group-vertical>.btn:focus,
.btn-group-vertical>.btn:active,
.btn-group-vertical>.btn.active {
  z-index: 1;
}

.btn-toolbar {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
}

.btn-toolbar .input-group {
  width: auto;
}

.btn-group {
  border-radius: 0.375rem;
}

.btn-group> :not(.btn-check:first-child)+.btn,
.btn-group>.btn-group:not(:first-child) {
  margin-left: -1px;
}

.btn-group>.btn:not(:last-child):not(.dropdown-toggle),
.btn-group>.btn.dropdown-toggle-split:first-child,
.btn-group>.btn-group:not(:last-child)>.btn {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.btn-group>.btn:nth-child(n+3),
.btn-group> :not(.btn-check)+.btn,
.btn-group>.btn-group:not(:first-child)>.btn {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

.dropdown-toggle-split {
  padding-right: 0.5625rem;
  padding-left: 0.5625rem;
}

.dropdown-toggle-split::after,
.dropup .dropdown-toggle-split::after,
.dropend .dropdown-toggle-split::after {
  margin-left: 0;
}

.dropstart .dropdown-toggle-split::before {
  margin-right: 0;
}

.btn-sm+.dropdown-toggle-split,
.btn-group-sm>.btn+.dropdown-toggle-split {
  padding-right: 0.375rem;
  padding-left: 0.375rem;
}

.btn-lg+.dropdown-toggle-split,
.btn-group-lg>.btn+.dropdown-toggle-split {
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}

.btn-group-vertical {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
}

.btn-group-vertical>.btn,
.btn-group-vertical>.btn-group {
  width: 100%;
}

.btn-group-vertical>.btn:not(:first-child),
.btn-group-vertical>.btn-group:not(:first-child) {
  margin-top: -1px;
}

.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle),
.btn-group-vertical>.btn-group:not(:last-child)>.btn {
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.btn-group-vertical>.btn~.btn,
.btn-group-vertical>.btn-group:not(:first-child)>.btn {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.nav {
  --bs-nav-link-padding-x: 1rem;
  --bs-nav-link-padding-y: 0.5rem;
  --bs-nav-link-font-weight: ;
  --bs-nav-link-color: var(--bs-link-color);
  --bs-nav-link-hover-color: var(--bs-link-hover-color);
  --bs-nav-link-disabled-color: #6c757d;
  display: flex;
  flex-wrap: wrap;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
}

.nav-link {
  display: block;
  padding: var(--bs-nav-link-padding-y) var(--bs-nav-link-padding-x);
  font-size: var(--bs-nav-link-font-size);
  font-weight: var(--bs-nav-link-font-weight);
  color: var(--bs-nav-link-color);
  text-decoration: none;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .nav-link {
    transition: none;
  }
}

.nav-link:hover,
.nav-link:focus {
  color: var(--bs-nav-link-hover-color);
}

.nav-link.disabled {
  color: var(--bs-nav-link-disabled-color);
  pointer-events: none;
  cursor: default;
}

.nav-tabs {
  --bs-nav-tabs-border-width: 1px;
  --bs-nav-tabs-border-color: #dee2e6;
  --bs-nav-tabs-border-radius: 0.375rem;
  --bs-nav-tabs-link-hover-border-color: #e9ecef #e9ecef #dee2e6;
  --bs-nav-tabs-link-active-color: #495057;
  --bs-nav-tabs-link-active-bg: #fff;
  --bs-nav-tabs-link-active-border-color: #dee2e6 #dee2e6 #fff;
  border-bottom: var(--bs-nav-tabs-border-width) solid var(--bs-nav-tabs-border-color);
}

.nav-tabs .nav-link {
  margin-bottom: calc(-1 * var(--bs-nav-tabs-border-width));
  background: none;
  border: var(--bs-nav-tabs-border-width) solid transparent;
  border-top-left-radius: var(--bs-nav-tabs-border-radius);
  border-top-right-radius: var(--bs-nav-tabs-border-radius);
}

.nav-tabs .nav-link:hover,
.nav-tabs .nav-link:focus {
  isolation: isolate;
  border-color: var(--bs-nav-tabs-link-hover-border-color);
}

.nav-tabs .nav-link.disabled,
.nav-tabs .nav-link:disabled {
  color: var(--bs-nav-link-disabled-color);
  background-color: transparent;
  border-color: transparent;
}

.nav-tabs .nav-link.active,
.nav-tabs .nav-item.show .nav-link {
  color: var(--bs-nav-tabs-link-active-color);
  background-color: var(--bs-nav-tabs-link-active-bg);
  border-color: var(--bs-nav-tabs-link-active-border-color);
}

.nav-tabs .dropdown-menu {
  margin-top: calc(-1 * var(--bs-nav-tabs-border-width));
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.nav-pills {
  --bs-nav-pills-border-radius: 0.375rem;
  --bs-nav-pills-link-active-color: #fff;
  --bs-nav-pills-link-active-bg: #0d6efd;
}

.nav-pills .nav-link {
  background: none;
  border: 0;
  border-radius: var(--bs-nav-pills-border-radius);
}

.nav-pills .nav-link:disabled {
  color: var(--bs-nav-link-disabled-color);
  background-color: transparent;
  border-color: transparent;
}

.nav-pills .nav-link.active,
.nav-pills .show>.nav-link {
  color: var(--bs-nav-pills-link-active-color);
  background-color: var(--bs-nav-pills-link-active-bg);
}

.nav-fill>.nav-link,
.nav-fill .nav-item {
  flex: 1 1 auto;
  text-align: center;
}

.nav-justified>.nav-link,
.nav-justified .nav-item {
  flex-basis: 0;
  flex-grow: 1;
  text-align: center;
}

.nav-fill .nav-item .nav-link,
.nav-justified .nav-item .nav-link {
  width: 100%;
}

.tab-content>.tab-pane {
  display: none;
}

.tab-content>.active {
  display: block;
}

.navbar {
  --bs-navbar-padding-x: 0;
  --bs-navbar-padding-y: 0.5rem;
  --bs-navbar-color: rgba(0, 0, 0, 0.55);
  --bs-navbar-hover-color: rgba(0, 0, 0, 0.7);
  --bs-navbar-disabled-color: rgba(0, 0, 0, 0.3);
  --bs-navbar-active-color: rgba(0, 0, 0, 0.9);
  --bs-navbar-brand-padding-y: 0.3125rem;
  --bs-navbar-brand-margin-end: 1rem;
  --bs-navbar-brand-font-size: 1.25rem;
  --bs-navbar-brand-color: rgba(0, 0, 0, 0.9);
  --bs-navbar-brand-hover-color: rgba(0, 0, 0, 0.9);
  --bs-navbar-nav-link-padding-x: 0.5rem;
  --bs-navbar-toggler-padding-y: 0.25rem;
  --bs-navbar-toggler-padding-x: 0.75rem;
  --bs-navbar-toggler-font-size: 1.25rem;
  --bs-navbar-toggler-icon-bg: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
  --bs-navbar-toggler-border-color: rgba(0, 0, 0, 0.1);
  --bs-navbar-toggler-border-radius: 0.375rem;
  --bs-navbar-toggler-focus-width: 0.25rem;
  --bs-navbar-toggler-transition: box-shadow 0.15s ease-in-out;
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: var(--bs-navbar-padding-y) var(--bs-navbar-padding-x);
}

.navbar>.container,
.navbar>.container-fluid,
.navbar>.container-sm,
.navbar>.container-md,
.navbar>.container-lg,
.navbar>.container-xl,
.navbar>.container-xxl {
  display: flex;
  flex-wrap: inherit;
  align-items: center;
  justify-content: space-between;
}

.navbar-brand {
  padding-top: var(--bs-navbar-brand-padding-y);
  padding-bottom: var(--bs-navbar-brand-padding-y);
  margin-right: var(--bs-navbar-brand-margin-end);
  font-size: var(--bs-navbar-brand-font-size);
  color: var(--bs-navbar-brand-color);
  text-decoration: none;
  white-space: nowrap;
}

.navbar-brand:hover,
.navbar-brand:focus {
  color: var(--bs-navbar-brand-hover-color);
}

.navbar-nav {
  --bs-nav-link-padding-x: 0;
  --bs-nav-link-padding-y: 0.5rem;
  --bs-nav-link-font-weight: ;
  --bs-nav-link-color: var(--bs-navbar-color);
  --bs-nav-link-hover-color: var(--bs-navbar-hover-color);
  --bs-nav-link-disabled-color: var(--bs-navbar-disabled-color);
  display: flex;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
  list-style: none;
}

.navbar-nav .show>.nav-link,
.navbar-nav .nav-link.active {
  color: var(--bs-navbar-active-color);
}

.navbar-nav .dropdown-menu {
  position: static;
}

.navbar-text {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
  color: var(--bs-navbar-color);
}

.navbar-text a,
.navbar-text a:hover,
.navbar-text a:focus {
  color: var(--bs-navbar-active-color);
}

.navbar-collapse {
  flex-basis: 100%;
  flex-grow: 1;
  align-items: center;
}

.navbar-toggler {
  padding: var(--bs-navbar-toggler-padding-y) var(--bs-navbar-toggler-padding-x);
  font-size: var(--bs-navbar-toggler-font-size);
  line-height: 1;
  color: var(--bs-navbar-color);
  background-color: transparent;
  border: var(--bs-border-width) solid var(--bs-navbar-toggler-border-color);
  border-radius: var(--bs-navbar-toggler-border-radius);
  transition: var(--bs-navbar-toggler-transition);
}

@media (prefers-reduced-motion: reduce) {
  .navbar-toggler {
    transition: none;
  }
}

.navbar-toggler:hover {
  text-decoration: none;
}

.navbar-toggler:focus {
  text-decoration: none;
  outline: 0;
  box-shadow: 0 0 0 var(--bs-navbar-toggler-focus-width);
}

.navbar-toggler-icon {
  display: inline-block;
  width: 1.5em;
  height: 1.5em;
  vertical-align: middle;
  background-image: var(--bs-navbar-toggler-icon-bg);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 100%;
}

.navbar-nav-scroll {
  max-height: var(--bs-scroll-height, 75vh);
  overflow-y: auto;
}

@media (min-width: 576px) {
  .navbar-expand-sm {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }

  .navbar-expand-sm .navbar-nav {
    flex-direction: row;
  }

  .navbar-expand-sm .navbar-nav .dropdown-menu {
    position: absolute;
  }

  .navbar-expand-sm .navbar-nav .nav-link {
    padding-right: var(--bs-navbar-nav-link-padding-x);
    padding-left: var(--bs-navbar-nav-link-padding-x);
  }

  .navbar-expand-sm .navbar-nav-scroll {
    overflow: visible;
  }

  .navbar-expand-sm .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }

  .navbar-expand-sm .navbar-toggler {
    display: none;
  }

  .navbar-expand-sm .offcanvas {
    position: static;
    z-index: auto;
    flex-grow: 1;
    width: auto !important;
    height: auto !important;
    visibility: visible !important;
    background-color: transparent !important;
    border: 0 !important;
    transform: none !important;
    transition: none;
  }

  .navbar-expand-sm .offcanvas .offcanvas-header {
    display: none;
  }

  .navbar-expand-sm .offcanvas .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
  }
}

@media (min-width: 768px) {
  .navbar-expand-md {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }

  .navbar-expand-md .navbar-nav {
    flex-direction: row;
  }

  .navbar-expand-md .navbar-nav .dropdown-menu {
    position: absolute;
  }

  .navbar-expand-md .navbar-nav .nav-link {
    padding-right: var(--bs-navbar-nav-link-padding-x);
    padding-left: var(--bs-navbar-nav-link-padding-x);
  }

  .navbar-expand-md .navbar-nav-scroll {
    overflow: visible;
  }

  .navbar-expand-md .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }

  .navbar-expand-md .navbar-toggler {
    display: none;
  }

  .navbar-expand-md .offcanvas {
    position: static;
    z-index: auto;
    flex-grow: 1;
    width: auto !important;
    height: auto !important;
    visibility: visible !important;
    background-color: transparent !important;
    border: 0 !important;
    transform: none !important;
    transition: none;
  }

  .navbar-expand-md .offcanvas .offcanvas-header {
    display: none;
  }

  .navbar-expand-md .offcanvas .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
  }
}

@media (min-width: 992px) {
  .navbar-expand-lg {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }

  .navbar-expand-lg .navbar-nav {
    flex-direction: row;
  }

  .navbar-expand-lg .navbar-nav .dropdown-menu {
    position: absolute;
  }

  .navbar-expand-lg .navbar-nav .nav-link {
    padding-right: var(--bs-navbar-nav-link-padding-x);
    padding-left: var(--bs-navbar-nav-link-padding-x);
  }

  .navbar-expand-lg .navbar-nav-scroll {
    overflow: visible;
  }

  .navbar-expand-lg .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }

  .navbar-expand-lg .navbar-toggler {
    display: none;
  }

  .navbar-expand-lg .offcanvas {
    position: static;
    z-index: auto;
    flex-grow: 1;
    width: auto !important;
    height: auto !important;
    visibility: visible !important;
    background-color: transparent !important;
    border: 0 !important;
    transform: none !important;
    transition: none;
  }

  .navbar-expand-lg .offcanvas .offcanvas-header {
    display: none;
  }

  .navbar-expand-lg .offcanvas .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
  }
}

@media (min-width: 1200px) {
  .navbar-expand-xl {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }

  .navbar-expand-xl .navbar-nav {
    flex-direction: row;
  }

  .navbar-expand-xl .navbar-nav .dropdown-menu {
    position: absolute;
  }

  .navbar-expand-xl .navbar-nav .nav-link {
    padding-right: var(--bs-navbar-nav-link-padding-x);
    padding-left: var(--bs-navbar-nav-link-padding-x);
  }

  .navbar-expand-xl .navbar-nav-scroll {
    overflow: visible;
  }

  .navbar-expand-xl .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }

  .navbar-expand-xl .navbar-toggler {
    display: none;
  }

  .navbar-expand-xl .offcanvas {
    position: static;
    z-index: auto;
    flex-grow: 1;
    width: auto !important;
    height: auto !important;
    visibility: visible !important;
    background-color: transparent !important;
    border: 0 !important;
    transform: none !important;
    transition: none;
  }

  .navbar-expand-xl .offcanvas .offcanvas-header {
    display: none;
  }

  .navbar-expand-xl .offcanvas .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
  }
}

@media (min-width: 1400px) {
  .navbar-expand-xxl {
    flex-wrap: nowrap;
    justify-content: flex-start;
  }

  .navbar-expand-xxl .navbar-nav {
    flex-direction: row;
  }

  .navbar-expand-xxl .navbar-nav .dropdown-menu {
    position: absolute;
  }

  .navbar-expand-xxl .navbar-nav .nav-link {
    padding-right: var(--bs-navbar-nav-link-padding-x);
    padding-left: var(--bs-navbar-nav-link-padding-x);
  }

  .navbar-expand-xxl .navbar-nav-scroll {
    overflow: visible;
  }

  .navbar-expand-xxl .navbar-collapse {
    display: flex !important;
    flex-basis: auto;
  }

  .navbar-expand-xxl .navbar-toggler {
    display: none;
  }

  .navbar-expand-xxl .offcanvas {
    position: static;
    z-index: auto;
    flex-grow: 1;
    width: auto !important;
    height: auto !important;
    visibility: visible !important;
    background-color: transparent !important;
    border: 0 !important;
    transform: none !important;
    transition: none;
  }

  .navbar-expand-xxl .offcanvas .offcanvas-header {
    display: none;
  }

  .navbar-expand-xxl .offcanvas .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
  }
}

.navbar-expand {
  flex-wrap: nowrap;
  justify-content: flex-start;
}

.navbar-expand .navbar-nav {
  flex-direction: row;
}

.navbar-expand .navbar-nav .dropdown-menu {
  position: absolute;
}

.navbar-expand .navbar-nav .nav-link {
  padding-right: var(--bs-navbar-nav-link-padding-x);
  padding-left: var(--bs-navbar-nav-link-padding-x);
}

.navbar-expand .navbar-nav-scroll {
  overflow: visible;
}

.navbar-expand .navbar-collapse {
  display: flex !important;
  flex-basis: auto;
}

.navbar-expand .navbar-toggler {
  display: none;
}

.navbar-expand .offcanvas {
  position: static;
  z-index: auto;
  flex-grow: 1;
  width: auto !important;
  height: auto !important;
  visibility: visible !important;
  background-color: transparent !important;
  border: 0 !important;
  transform: none !important;
  transition: none;
}

.navbar-expand .offcanvas .offcanvas-header {
  display: none;
}

.navbar-expand .offcanvas .offcanvas-body {
  display: flex;
  flex-grow: 0;
  padding: 0;
  overflow-y: visible;
}

.navbar-dark {
  --bs-navbar-color: rgba(255, 255, 255, 0.55);
  --bs-navbar-hover-color: rgba(255, 255, 255, 0.75);
  --bs-navbar-disabled-color: rgba(255, 255, 255, 0.25);
  --bs-navbar-active-color: #fff;
  --bs-navbar-brand-color: #fff;
  --bs-navbar-brand-hover-color: #fff;
  --bs-navbar-toggler-border-color: rgba(255, 255, 255, 0.1);
  --bs-navbar-toggler-icon-bg: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
}

.card {
  --bs-card-spacer-y: 1rem;
  --bs-card-spacer-x: 1rem;
  --bs-card-title-spacer-y: 0.5rem;
  --bs-card-border-width: 1px;
  --bs-card-border-color: var(--bs-border-color-translucent);
  --bs-card-border-radius: 0.375rem;
  --bs-card-box-shadow: ;
  --bs-card-inner-border-radius: calc(0.375rem - 1px);
  --bs-card-cap-padding-y: 0.5rem;
  --bs-card-cap-padding-x: 1rem;
  --bs-card-cap-bg: rgba(0, 0, 0, 0.03);
  --bs-card-cap-color: ;
  --bs-card-height: ;
  --bs-card-color: ;
  --bs-card-bg: #fff;
  --bs-card-img-overlay-padding: 1rem;
  --bs-card-group-margin: 0.75rem;
  position: relative;
  display: flex;
  flex-direction: column;
  min-width: 0;
  height: var(--bs-card-height);
  word-wrap: break-word;
  background-color: var(--bs-card-bg);
  background-clip: border-box;
  border: var(--bs-card-border-width) solid var(--bs-card-border-color);
  border-radius: var(--bs-card-border-radius);
}

.card>hr {
  margin-right: 0;
  margin-left: 0;
}

.card>.list-group {
  border-top: inherit;
  border-bottom: inherit;
}

.card>.list-group:first-child {
  border-top-width: 0;
  border-top-left-radius: var(--bs-card-inner-border-radius);
  border-top-right-radius: var(--bs-card-inner-border-radius);
}

.card>.list-group:last-child {
  border-bottom-width: 0;
  border-bottom-right-radius: var(--bs-card-inner-border-radius);
  border-bottom-left-radius: var(--bs-card-inner-border-radius);
}

.card>.card-header+.list-group,
.card>.list-group+.card-footer {
  border-top: 0;
}

.card-body {
  flex: 1 1 auto;
  padding: var(--bs-card-spacer-y) var(--bs-card-spacer-x);
  color: var(--bs-card-color);
}

.card-title {
  margin-bottom: var(--bs-card-title-spacer-y);
}

.card-subtitle {
  margin-top: calc(-0.5 * var(--bs-card-title-spacer-y));
  margin-bottom: 0;
}

.card-text:last-child {
  margin-bottom: 0;
}

.card-link+.card-link {
  margin-left: var(--bs-card-spacer-x);
}

.card-header {
  padding: var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);
  margin-bottom: 0;
  color: var(--bs-card-cap-color);
  background-color: var(--bs-card-cap-bg);
  border-bottom: var(--bs-card-border-width) solid var(--bs-card-border-color);
}

.card-header:first-child {
  border-radius: var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius) 0 0;
}

.card-footer {
  padding: var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);
  color: var(--bs-card-cap-color);
  background-color: var(--bs-card-cap-bg);
  border-top: var(--bs-card-border-width) solid var(--bs-card-border-color);
}

.card-footer:last-child {
  border-radius: 0 0 var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius);
}

.card-header-tabs {
  margin-right: calc(-0.5 * var(--bs-card-cap-padding-x));
  margin-bottom: calc(-1 * var(--bs-card-cap-padding-y));
  margin-left: calc(-0.5 * var(--bs-card-cap-padding-x));
  border-bottom: 0;
}

.card-header-tabs .nav-link.active {
  background-color: var(--bs-card-bg);
  border-bottom-color: var(--bs-card-bg);
}

.card-header-pills {
  margin-right: calc(-0.5 * var(--bs-card-cap-padding-x));
  margin-left: calc(-0.5 * var(--bs-card-cap-padding-x));
}

.card-img-overlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: var(--bs-card-img-overlay-padding);
  border-radius: var(--bs-card-inner-border-radius);
}

.card-img,
.card-img-top,
.card-img-bottom {
  width: 100%;
}

.card-img,
.card-img-top {
  border-top-left-radius: var(--bs-card-inner-border-radius);
  border-top-right-radius: var(--bs-card-inner-border-radius);
}

.card-img,
.card-img-bottom {
  border-bottom-right-radius: var(--bs-card-inner-border-radius);
  border-bottom-left-radius: var(--bs-card-inner-border-radius);
}

.card-group>.card {
  margin-bottom: var(--bs-card-group-margin);
}

@media (min-width: 576px) {
  .card-group {
    display: flex;
    flex-flow: row wrap;
  }

  .card-group>.card {
    flex: 1 0 0%;
    margin-bottom: 0;
  }

  .card-group>.card+.card {
    margin-left: 0;
    border-left: 0;
  }

  .card-group>.card:not(:last-child) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  .card-group>.card:not(:last-child) .card-img-top,
  .card-group>.card:not(:last-child) .card-header {
    border-top-right-radius: 0;
  }

  .card-group>.card:not(:last-child) .card-img-bottom,
  .card-group>.card:not(:last-child) .card-footer {
    border-bottom-right-radius: 0;
  }

  .card-group>.card:not(:first-child) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  .card-group>.card:not(:first-child) .card-img-top,
  .card-group>.card:not(:first-child) .card-header {
    border-top-left-radius: 0;
  }

  .card-group>.card:not(:first-child) .card-img-bottom,
  .card-group>.card:not(:first-child) .card-footer {
    border-bottom-left-radius: 0;
  }
}

.accordion {
  --bs-accordion-color: #212529;
  --bs-accordion-bg: #fff;
  --bs-accordion-transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, border-radius 0.15s ease;
  --bs-accordion-border-color: var(--bs-border-color);
  --bs-accordion-border-width: 1px;
  --bs-accordion-border-radius: 0.375rem;
  --bs-accordion-inner-border-radius: calc(0.375rem - 1px);
  --bs-accordion-btn-padding-x: 1.25rem;
  --bs-accordion-btn-padding-y: 1rem;
  --bs-accordion-btn-color: #212529;
  --bs-accordion-btn-bg: var(--bs-accordion-bg);
  --bs-accordion-btn-icon: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
  --bs-accordion-btn-icon-width: 1.25rem;
  --bs-accordion-btn-icon-transform: rotate(-180deg);
  --bs-accordion-btn-icon-transition: transform 0.2s ease-in-out;
  --bs-accordion-btn-active-icon: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%230c63e4'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
  --bs-accordion-btn-focus-border-color: #86b7fe;
  --bs-accordion-btn-focus-box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  --bs-accordion-body-padding-x: 1.25rem;
  --bs-accordion-body-padding-y: 1rem;
  --bs-accordion-active-color: #0c63e4;
  --bs-accordion-active-bg: #e7f1ff;
}

.accordion-button {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  padding: var(--bs-accordion-btn-padding-y) var(--bs-accordion-btn-padding-x);
  font-size: 1rem;
  color: var(--bs-accordion-btn-color);
  text-align: left;
  background-color: var(--bs-accordion-btn-bg);
  border: 0;
  border-radius: 0;
  overflow-anchor: none;
  transition: var(--bs-accordion-transition);
}

@media (prefers-reduced-motion: reduce) {
  .accordion-button {
    transition: none;
  }
}

.accordion-button:not(.collapsed) {
  color: var(--bs-accordion-active-color);
  background-color: var(--bs-accordion-active-bg);
  box-shadow: inset 0 calc(-1 * var(--bs-accordion-border-width)) 0 var(--bs-accordion-border-color);
}

.accordion-button:not(.collapsed)::after {
  background-image: var(--bs-accordion-btn-active-icon);
  transform: var(--bs-accordion-btn-icon-transform);
}

.accordion-button::after {
  flex-shrink: 0;
  width: var(--bs-accordion-btn-icon-width);
  height: var(--bs-accordion-btn-icon-width);
  margin-left: auto;
  content: "";
  background-image: var(--bs-accordion-btn-icon);
  background-repeat: no-repeat;
  background-size: var(--bs-accordion-btn-icon-width);
  transition: var(--bs-accordion-btn-icon-transition);
}

@media (prefers-reduced-motion: reduce) {
  .accordion-button::after {
    transition: none;
  }
}

.accordion-button:hover {
  z-index: 2;
}

.accordion-button:focus {
  z-index: 3;
  border-color: var(--bs-accordion-btn-focus-border-color);
  outline: 0;
  box-shadow: var(--bs-accordion-btn-focus-box-shadow);
}

.accordion-header {
  margin-bottom: 0;
}

.accordion-item {
  color: var(--bs-accordion-color);
  background-color: var(--bs-accordion-bg);
  border: var(--bs-accordion-border-width) solid var(--bs-accordion-border-color);
}

.accordion-item:first-of-type {
  border-top-left-radius: var(--bs-accordion-border-radius);
  border-top-right-radius: var(--bs-accordion-border-radius);
}

.accordion-item:first-of-type .accordion-button {
  border-top-left-radius: var(--bs-accordion-inner-border-radius);
  border-top-right-radius: var(--bs-accordion-inner-border-radius);
}

.accordion-item:not(:first-of-type) {
  border-top: 0;
}

.accordion-item:last-of-type {
  border-bottom-right-radius: var(--bs-accordion-border-radius);
  border-bottom-left-radius: var(--bs-accordion-border-radius);
}

.accordion-item:last-of-type .accordion-button.collapsed {
  border-bottom-right-radius: var(--bs-accordion-inner-border-radius);
  border-bottom-left-radius: var(--bs-accordion-inner-border-radius);
}

.accordion-item:last-of-type .accordion-collapse {
  border-bottom-right-radius: var(--bs-accordion-border-radius);
  border-bottom-left-radius: var(--bs-accordion-border-radius);
}

.accordion-body {
  padding: var(--bs-accordion-body-padding-y) var(--bs-accordion-body-padding-x);
}

.accordion-flush .accordion-collapse {
  border-width: 0;
}

.accordion-flush .accordion-item {
  border-right: 0;
  border-left: 0;
  border-radius: 0;
}

.accordion-flush .accordion-item:first-child {
  border-top: 0;
}

.accordion-flush .accordion-item:last-child {
  border-bottom: 0;
}

.accordion-flush .accordion-item .accordion-button,
.accordion-flush .accordion-item .accordion-button.collapsed {
  border-radius: 0;
}

.breadcrumb {
  --bs-breadcrumb-padding-x: 0;
  --bs-breadcrumb-padding-y: 0;
  --bs-breadcrumb-margin-bottom: 1rem;
  --bs-breadcrumb-bg: ;
  --bs-breadcrumb-border-radius: ;
  --bs-breadcrumb-divider-color: #6c757d;
  --bs-breadcrumb-item-padding-x: 0.5rem;
  --bs-breadcrumb-item-active-color: #6c757d;
  display: flex;
  flex-wrap: wrap;
  padding: var(--bs-breadcrumb-padding-y) var(--bs-breadcrumb-padding-x);
  margin-bottom: var(--bs-breadcrumb-margin-bottom);
  font-size: var(--bs-breadcrumb-font-size);
  list-style: none;
  background-color: var(--bs-breadcrumb-bg);
  border-radius: var(--bs-breadcrumb-border-radius);
}

.breadcrumb-item+.breadcrumb-item {
  padding-left: var(--bs-breadcrumb-item-padding-x);
}

.breadcrumb-item+.breadcrumb-item::before {
  float: left;
  padding-right: var(--bs-breadcrumb-item-padding-x);
  color: var(--bs-breadcrumb-divider-color);
  content: var(--bs-breadcrumb-divider, "/")
    /* rtl: var(--bs-breadcrumb-divider, "/") */
  ;
}

.breadcrumb-item.active {
  color: var(--bs-breadcrumb-item-active-color);
}

.pagination {
  --bs-pagination-padding-x: 0.75rem;
  --bs-pagination-padding-y: 0.375rem;
  --bs-pagination-font-size: 1rem;
  --bs-pagination-color: var(--bs-link-color);
  --bs-pagination-bg: #fff;
  --bs-pagination-border-width: 1px;
  --bs-pagination-border-color: #dee2e6;
  --bs-pagination-border-radius: 0.375rem;
  --bs-pagination-hover-color: var(--bs-link-hover-color);
  --bs-pagination-hover-bg: #e9ecef;
  --bs-pagination-hover-border-color: #dee2e6;
  --bs-pagination-focus-color: var(--bs-link-hover-color);
  --bs-pagination-focus-bg: #e9ecef;
  --bs-pagination-focus-box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  --bs-pagination-active-color: #fff;
  --bs-pagination-active-bg: #0d6efd;
  --bs-pagination-active-border-color: #0d6efd;
  --bs-pagination-disabled-color: #6c757d;
  --bs-pagination-disabled-bg: #fff;
  --bs-pagination-disabled-border-color: #dee2e6;
  display: flex;
  padding-left: 0;
  list-style: none;
}

.page-link {
  position: relative;
  display: block;
  padding: var(--bs-pagination-padding-y) var(--bs-pagination-padding-x);
  font-size: var(--bs-pagination-font-size);
  color: var(--bs-pagination-color);
  text-decoration: none;
  background-color: var(--bs-pagination-bg);
  border: var(--bs-pagination-border-width) solid var(--bs-pagination-border-color);
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .page-link {
    transition: none;
  }
}

.page-link:hover {
  z-index: 2;
  color: var(--bs-pagination-hover-color);
  background-color: var(--bs-pagination-hover-bg);
  border-color: var(--bs-pagination-hover-border-color);
}

.page-link:focus {
  z-index: 3;
  color: var(--bs-pagination-focus-color);
  background-color: var(--bs-pagination-focus-bg);
  outline: 0;
  box-shadow: var(--bs-pagination-focus-box-shadow);
}

.page-link.active,
.active>.page-link {
  z-index: 3;
  color: var(--bs-pagination-active-color);
  background-color: var(--bs-pagination-active-bg);
  border-color: var(--bs-pagination-active-border-color);
}

.page-link.disabled,
.disabled>.page-link {
  color: var(--bs-pagination-disabled-color);
  pointer-events: none;
  background-color: var(--bs-pagination-disabled-bg);
  border-color: var(--bs-pagination-disabled-border-color);
}

.page-item:not(:first-child) .page-link {
  margin-left: -1px;
}

.page-item:first-child .page-link {
  border-top-left-radius: var(--bs-pagination-border-radius);
  border-bottom-left-radius: var(--bs-pagination-border-radius);
}

.page-item:last-child .page-link {
  border-top-right-radius: var(--bs-pagination-border-radius);
  border-bottom-right-radius: var(--bs-pagination-border-radius);
}

.pagination-lg {
  --bs-pagination-padding-x: 1.5rem;
  --bs-pagination-padding-y: 0.75rem;
  --bs-pagination-font-size: 1.25rem;
  --bs-pagination-border-radius: 0.5rem;
}

.pagination-sm {
  --bs-pagination-padding-x: 0.5rem;
  --bs-pagination-padding-y: 0.25rem;
  --bs-pagination-font-size: 0.875rem;
  --bs-pagination-border-radius: 0.25rem;
}

.badge {
  --bs-badge-padding-x: 0.65em;
  --bs-badge-padding-y: 0.35em;
  --bs-badge-font-size: 0.75em;
  --bs-badge-font-weight: 700;
  --bs-badge-color: #fff;
  --bs-badge-border-radius: 0.375rem;
  display: inline-block;
  padding: var(--bs-badge-padding-y) var(--bs-badge-padding-x);
  font-size: var(--bs-badge-font-size);
  font-weight: var(--bs-badge-font-weight);
  line-height: 1;
  color: var(--bs-badge-color);
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: var(--bs-badge-border-radius);
}

.badge:empty {
  display: none;
}

.btn .badge {
  position: relative;
  top: -1px;
}

.alert {
  --bs-alert-bg: transparent;
  --bs-alert-padding-x: 1rem;
  --bs-alert-padding-y: 1rem;
  --bs-alert-margin-bottom: 1rem;
  --bs-alert-color: inherit;
  --bs-alert-border-color: transparent;
  --bs-alert-border: 1px solid var(--bs-alert-border-color);
  --bs-alert-border-radius: 0.375rem;
  position: relative;
  padding: var(--bs-alert-padding-y) var(--bs-alert-padding-x);
  margin-bottom: var(--bs-alert-margin-bottom);
  color: var(--bs-alert-color);
  background-color: var(--bs-alert-bg);
  border: var(--bs-alert-border);
  border-radius: var(--bs-alert-border-radius);
}

.alert-heading {
  color: inherit;
}

.alert-link {
  font-weight: 700;
}

.alert-dismissible {
  padding-right: 3rem;
}

.alert-dismissible .btn-close {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2;
  padding: 1.25rem 1rem;
}

.alert-primary {
  --bs-alert-color: #084298;
  --bs-alert-bg: #cfe2ff;
  --bs-alert-border-color: #b6d4fe;
}

.alert-primary .alert-link {
  color: #06357a;
}

.alert-secondary {
  --bs-alert-color: #41464b;
  --bs-alert-bg: #e2e3e5;
  --bs-alert-border-color: #d3d6d8;
}

.alert-secondary .alert-link {
  color: #34383c;
}

.alert-success {
  --bs-alert-color: #0f5132;
  --bs-alert-bg: #d1e7dd;
  --bs-alert-border-color: #badbcc;
}

.alert-success .alert-link {
  color: #0c4128;
}

.alert-info {
  --bs-alert-color: #055160;
  --bs-alert-bg: #cff4fc;
  --bs-alert-border-color: #b6effb;
}

.alert-info .alert-link {
  color: #04414d;
}

.alert-warning {
  --bs-alert-color: #664d03;
  --bs-alert-bg: #fff3cd;
  --bs-alert-border-color: #ffecb5;
}

.alert-warning .alert-link {
  color: #523e02;
}

.alert-danger {
  --bs-alert-color: #842029;
  --bs-alert-bg: #f8d7da;
  --bs-alert-border-color: #f5c2c7;
}

.alert-danger .alert-link {
  color: #6a1a21;
}

.alert-light {
  --bs-alert-color: #636464;
  --bs-alert-bg: #fefefe;
  --bs-alert-border-color: #fdfdfe;
}

.alert-light .alert-link {
  color: #4f5050;
}

.alert-dark {
  --bs-alert-color: #141619;
  --bs-alert-bg: #d3d3d4;
  --bs-alert-border-color: #bcbebf;
}

.alert-dark .alert-link {
  color: #101214;
}

@keyframes progress-bar-stripes {
  0% {
    background-position-x: 1rem;
  }
}

.progress {
  --bs-progress-height: 1rem;
  --bs-progress-font-size: 0.75rem;
  --bs-progress-bg: #e9ecef;
  --bs-progress-border-radius: 0.375rem;
  --bs-progress-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075);
  --bs-progress-bar-color: #fff;
  --bs-progress-bar-bg: #0d6efd;
  --bs-progress-bar-transition: width 0.6s ease;
  display: flex;
  height: var(--bs-progress-height);
  overflow: hidden;
  font-size: var(--bs-progress-font-size);
  background-color: var(--bs-progress-bg);
  border-radius: var(--bs-progress-border-radius);
}

.progress-bar {
  display: flex;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
  color: var(--bs-progress-bar-color);
  text-align: center;
  white-space: nowrap;
  background-color: var(--bs-progress-bar-bg);
  transition: var(--bs-progress-bar-transition);
}

@media (prefers-reduced-motion: reduce) {
  .progress-bar {
    transition: none;
  }
}

.progress-bar-striped {
  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
  background-size: var(--bs-progress-height) var(--bs-progress-height);
}

.progress-bar-animated {
  animation: 1s linear infinite progress-bar-stripes;
}

@media (prefers-reduced-motion: reduce) {
  .progress-bar-animated {
    animation: none;
  }
}

.list-group {
  --bs-list-group-color: #212529;
  --bs-list-group-bg: #fff;
  --bs-list-group-border-color: rgba(0, 0, 0, 0.125);
  --bs-list-group-border-width: 1px;
  --bs-list-group-border-radius: 0.375rem;
  --bs-list-group-item-padding-x: 1rem;
  --bs-list-group-item-padding-y: 0.5rem;
  --bs-list-group-action-color: #495057;
  --bs-list-group-action-hover-color: #495057;
  --bs-list-group-action-hover-bg: #f8f9fa;
  --bs-list-group-action-active-color: #212529;
  --bs-list-group-action-active-bg: #e9ecef;
  --bs-list-group-disabled-color: #6c757d;
  --bs-list-group-disabled-bg: #fff;
  --bs-list-group-active-color: #fff;
  --bs-list-group-active-bg: #0d6efd;
  --bs-list-group-active-border-color: #0d6efd;
  display: flex;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
  border-radius: var(--bs-list-group-border-radius);
}

.list-group-numbered {
  list-style-type: none;
  counter-reset: section;
}

.list-group-numbered>.list-group-item::before {
  content: counters(section, ".") ". ";
  counter-increment: section;
}

.list-group-item-action {
  width: 100%;
  color: var(--bs-list-group-action-color);
  text-align: inherit;
}

.list-group-item-action:hover,
.list-group-item-action:focus {
  z-index: 1;
  color: var(--bs-list-group-action-hover-color);
  text-decoration: none;
  background-color: var(--bs-list-group-action-hover-bg);
}

.list-group-item-action:active {
  color: var(--bs-list-group-action-active-color);
  background-color: var(--bs-list-group-action-active-bg);
}

.list-group-item {
  position: relative;
  display: block;
  padding: var(--bs-list-group-item-padding-y) var(--bs-list-group-item-padding-x);
  color: var(--bs-list-group-color);
  text-decoration: none;
  background-color: var(--bs-list-group-bg);
  border: var(--bs-list-group-border-width) solid var(--bs-list-group-border-color);
}

.list-group-item:first-child {
  border-top-left-radius: inherit;
  border-top-right-radius: inherit;
}

.list-group-item:last-child {
  border-bottom-right-radius: inherit;
  border-bottom-left-radius: inherit;
}

.list-group-item.disabled,
.list-group-item:disabled {
  color: var(--bs-list-group-disabled-color);
  pointer-events: none;
  background-color: var(--bs-list-group-disabled-bg);
}

.list-group-item.active {
  z-index: 2;
  color: var(--bs-list-group-active-color);
  background-color: var(--bs-list-group-active-bg);
  border-color: var(--bs-list-group-active-border-color);
}

.list-group-item+.list-group-item {
  border-top-width: 0;
}

.list-group-item+.list-group-item.active {
  margin-top: calc(-1 * var(--bs-list-group-border-width));
  border-top-width: var(--bs-list-group-border-width);
}

.list-group-horizontal {
  flex-direction: row;
}

.list-group-horizontal>.list-group-item:first-child:not(:last-child) {
  border-bottom-left-radius: var(--bs-list-group-border-radius);
  border-top-right-radius: 0;
}

.list-group-horizontal>.list-group-item:last-child:not(:first-child) {
  border-top-right-radius: var(--bs-list-group-border-radius);
  border-bottom-left-radius: 0;
}

.list-group-horizontal>.list-group-item.active {
  margin-top: 0;
}

.list-group-horizontal>.list-group-item+.list-group-item {
  border-top-width: var(--bs-list-group-border-width);
  border-left-width: 0;
}

.list-group-horizontal>.list-group-item+.list-group-item.active {
  margin-left: calc(-1 * var(--bs-list-group-border-width));
  border-left-width: var(--bs-list-group-border-width);
}

@media (min-width: 576px) {
  .list-group-horizontal-sm {
    flex-direction: row;
  }

  .list-group-horizontal-sm>.list-group-item:first-child:not(:last-child) {
    border-bottom-left-radius: var(--bs-list-group-border-radius);
    border-top-right-radius: 0;
  }

  .list-group-horizontal-sm>.list-group-item:last-child:not(:first-child) {
    border-top-right-radius: var(--bs-list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  .list-group-horizontal-sm>.list-group-item.active {
    margin-top: 0;
  }

  .list-group-horizontal-sm>.list-group-item+.list-group-item {
    border-top-width: var(--bs-list-group-border-width);
    border-left-width: 0;
  }

  .list-group-horizontal-sm>.list-group-item+.list-group-item.active {
    margin-left: calc(-1 * var(--bs-list-group-border-width));
    border-left-width: var(--bs-list-group-border-width);
  }
}

@media (min-width: 768px) {
  .list-group-horizontal-md {
    flex-direction: row;
  }

  .list-group-horizontal-md>.list-group-item:first-child:not(:last-child) {
    border-bottom-left-radius: var(--bs-list-group-border-radius);
    border-top-right-radius: 0;
  }

  .list-group-horizontal-md>.list-group-item:last-child:not(:first-child) {
    border-top-right-radius: var(--bs-list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  .list-group-horizontal-md>.list-group-item.active {
    margin-top: 0;
  }

  .list-group-horizontal-md>.list-group-item+.list-group-item {
    border-top-width: var(--bs-list-group-border-width);
    border-left-width: 0;
  }

  .list-group-horizontal-md>.list-group-item+.list-group-item.active {
    margin-left: calc(-1 * var(--bs-list-group-border-width));
    border-left-width: var(--bs-list-group-border-width);
  }
}

@media (min-width: 992px) {
  .list-group-horizontal-lg {
    flex-direction: row;
  }

  .list-group-horizontal-lg>.list-group-item:first-child:not(:last-child) {
    border-bottom-left-radius: var(--bs-list-group-border-radius);
    border-top-right-radius: 0;
  }

  .list-group-horizontal-lg>.list-group-item:last-child:not(:first-child) {
    border-top-right-radius: var(--bs-list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  .list-group-horizontal-lg>.list-group-item.active {
    margin-top: 0;
  }

  .list-group-horizontal-lg>.list-group-item+.list-group-item {
    border-top-width: var(--bs-list-group-border-width);
    border-left-width: 0;
  }

  .list-group-horizontal-lg>.list-group-item+.list-group-item.active {
    margin-left: calc(-1 * var(--bs-list-group-border-width));
    border-left-width: var(--bs-list-group-border-width);
  }
}

@media (min-width: 1200px) {
  .list-group-horizontal-xl {
    flex-direction: row;
  }

  .list-group-horizontal-xl>.list-group-item:first-child:not(:last-child) {
    border-bottom-left-radius: var(--bs-list-group-border-radius);
    border-top-right-radius: 0;
  }

  .list-group-horizontal-xl>.list-group-item:last-child:not(:first-child) {
    border-top-right-radius: var(--bs-list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  .list-group-horizontal-xl>.list-group-item.active {
    margin-top: 0;
  }

  .list-group-horizontal-xl>.list-group-item+.list-group-item {
    border-top-width: var(--bs-list-group-border-width);
    border-left-width: 0;
  }

  .list-group-horizontal-xl>.list-group-item+.list-group-item.active {
    margin-left: calc(-1 * var(--bs-list-group-border-width));
    border-left-width: var(--bs-list-group-border-width);
  }
}

@media (min-width: 1400px) {
  .list-group-horizontal-xxl {
    flex-direction: row;
  }

  .list-group-horizontal-xxl>.list-group-item:first-child:not(:last-child) {
    border-bottom-left-radius: var(--bs-list-group-border-radius);
    border-top-right-radius: 0;
  }

  .list-group-horizontal-xxl>.list-group-item:last-child:not(:first-child) {
    border-top-right-radius: var(--bs-list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  .list-group-horizontal-xxl>.list-group-item.active {
    margin-top: 0;
  }

  .list-group-horizontal-xxl>.list-group-item+.list-group-item {
    border-top-width: var(--bs-list-group-border-width);
    border-left-width: 0;
  }

  .list-group-horizontal-xxl>.list-group-item+.list-group-item.active {
    margin-left: calc(-1 * var(--bs-list-group-border-width));
    border-left-width: var(--bs-list-group-border-width);
  }
}

.list-group-flush {
  border-radius: 0;
}

.list-group-flush>.list-group-item {
  border-width: 0 0 var(--bs-list-group-border-width);
}

.list-group-flush>.list-group-item:last-child {
  border-bottom-width: 0;
}

.list-group-item-primary {
  color: #084298;
  background-color: #cfe2ff;
}

.list-group-item-primary.list-group-item-action:hover,
.list-group-item-primary.list-group-item-action:focus {
  color: #084298;
  background-color: #bacbe6;
}

.list-group-item-primary.list-group-item-action.active {
  color: #fff;
  background-color: #084298;
  border-color: #084298;
}

.list-group-item-secondary {
  color: #41464b;
  background-color: #e2e3e5;
}

.list-group-item-secondary.list-group-item-action:hover,
.list-group-item-secondary.list-group-item-action:focus {
  color: #41464b;
  background-color: #cbccce;
}

.list-group-item-secondary.list-group-item-action.active {
  color: #fff;
  background-color: #41464b;
  border-color: #41464b;
}

.list-group-item-success {
  color: #0f5132;
  background-color: #d1e7dd;
}

.list-group-item-success.list-group-item-action:hover,
.list-group-item-success.list-group-item-action:focus {
  color: #0f5132;
  background-color: #bcd0c7;
}

.list-group-item-success.list-group-item-action.active {
  color: #fff;
  background-color: #0f5132;
  border-color: #0f5132;
}

.list-group-item-info {
  color: #055160;
  background-color: #cff4fc;
}

.list-group-item-info.list-group-item-action:hover,
.list-group-item-info.list-group-item-action:focus {
  color: #055160;
  background-color: #badce3;
}

.list-group-item-info.list-group-item-action.active {
  color: #fff;
  background-color: #055160;
  border-color: #055160;
}

.list-group-item-warning {
  color: #664d03;
  background-color: #fff3cd;
}

.list-group-item-warning.list-group-item-action:hover,
.list-group-item-warning.list-group-item-action:focus {
  color: #664d03;
  background-color: #e6dbb9;
}

.list-group-item-warning.list-group-item-action.active {
  color: #fff;
  background-color: #664d03;
  border-color: #664d03;
}

.list-group-item-danger {
  color: #842029;
  background-color: #f8d7da;
}

.list-group-item-danger.list-group-item-action:hover,
.list-group-item-danger.list-group-item-action:focus {
  color: #842029;
  background-color: #dfc2c4;
}

.list-group-item-danger.list-group-item-action.active {
  color: #fff;
  background-color: #842029;
  border-color: #842029;
}

.list-group-item-light {
  color: #636464;
  background-color: #fefefe;
}

.list-group-item-light.list-group-item-action:hover,
.list-group-item-light.list-group-item-action:focus {
  color: #636464;
  background-color: #e5e5e5;
}

.list-group-item-light.list-group-item-action.active {
  color: #fff;
  background-color: #636464;
  border-color: #636464;
}

.list-group-item-dark {
  color: #141619;
  background-color: #d3d3d4;
}

.list-group-item-dark.list-group-item-action:hover,
.list-group-item-dark.list-group-item-action:focus {
  color: #141619;
  background-color: #bebebf;
}

.list-group-item-dark.list-group-item-action.active {
  color: #fff;
  background-color: #141619;
  border-color: #141619;
}

.btn-close {
  box-sizing: content-box;
  width: 1em;
  height: 1em;
  padding: 0.25em 0.25em;
  color: #000;
  background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
  border: 0;
  border-radius: 0.375rem;
  opacity: 0.5;
}

.btn-close:hover {
  color: #000;
  text-decoration: none;
  opacity: 0.75;
}

.btn-close:focus {
  outline: 0;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  opacity: 1;
}

.btn-close:disabled,
.btn-close.disabled {
  pointer-events: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  opacity: 0.25;
}

.btn-close-white {
  filter: invert(1) grayscale(100%) brightness(200%);
}

.toast {
  --bs-toast-zindex: 1090;
  --bs-toast-padding-x: 0.75rem;
  --bs-toast-padding-y: 0.5rem;
  --bs-toast-spacing: 1.5rem;
  --bs-toast-max-width: 350px;
  --bs-toast-font-size: 0.875rem;
  --bs-toast-color: ;
  --bs-toast-bg: rgba(255, 255, 255, 0.85);
  --bs-toast-border-width: 1px;
  --bs-toast-border-color: var(--bs-border-color-translucent);
  --bs-toast-border-radius: 0.375rem;
  --bs-toast-box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  --bs-toast-header-color: #6c757d;
  --bs-toast-header-bg: rgba(255, 255, 255, 0.85);
  --bs-toast-header-border-color: rgba(0, 0, 0, 0.05);
  width: var(--bs-toast-max-width);
  max-width: 100%;
  font-size: var(--bs-toast-font-size);
  color: var(--bs-toast-color);
  pointer-events: auto;
  background-color: var(--bs-toast-bg);
  background-clip: padding-box;
  border: var(--bs-toast-border-width) solid var(--bs-toast-border-color);
  box-shadow: var(--bs-toast-box-shadow);
  border-radius: var(--bs-toast-border-radius);
}

.toast.showing {
  opacity: 0;
}

.toast:not(.show) {
  display: none;
}

.toast-container {
  --bs-toast-zindex: 1090;
  position: absolute;
  z-index: var(--bs-toast-zindex);
  width: -moz-max-content;
  width: max-content;
  max-width: 100%;
  pointer-events: none;
}

.toast-container> :not(:last-child) {
  margin-bottom: var(--bs-toast-spacing);
}

.toast-header {
  display: flex;
  align-items: center;
  padding: var(--bs-toast-padding-y) var(--bs-toast-padding-x);
  color: var(--bs-toast-header-color);
  background-color: var(--bs-toast-header-bg);
  background-clip: padding-box;
  border-bottom: var(--bs-toast-border-width) solid var(--bs-toast-header-border-color);
  border-top-left-radius: calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));
  border-top-right-radius: calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));
}

.toast-header .btn-close {
  margin-right: calc(-0.5 * var(--bs-toast-padding-x));
  margin-left: var(--bs-toast-padding-x);
}

.toast-body {
  padding: var(--bs-toast-padding-x);
  word-wrap: break-word;
}

.modal {
  --bs-modal-zindex: 1055;
  --bs-modal-width: 500px;
  --bs-modal-padding: 1rem;
  --bs-modal-margin: 0.5rem;
  --bs-modal-color: ;
  --bs-modal-bg: #fff;
  --bs-modal-border-color: var(--bs-border-color-translucent);
  --bs-modal-border-width: 1px;
  --bs-modal-border-radius: 0.5rem;
  --bs-modal-box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
  --bs-modal-inner-border-radius: calc(0.5rem - 1px);
  --bs-modal-header-padding-x: 1rem;
  --bs-modal-header-padding-y: 1rem;
  --bs-modal-header-padding: 1rem 1rem;
  --bs-modal-header-border-color: var(--bs-border-color);
  --bs-modal-header-border-width: 1px;
  --bs-modal-title-line-height: 1.5;
  --bs-modal-footer-gap: 0.5rem;
  --bs-modal-footer-bg: ;
  --bs-modal-footer-border-color: var(--bs-border-color);
  --bs-modal-footer-border-width: 1px;
  position: fixed;
  top: 0;
  left: 0;
  z-index: var(--bs-modal-zindex);
  display: none;
  width: 100%;
  height: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  outline: 0;
}

.modal-dialog {
  position: relative;
  width: auto;
  margin: var(--bs-modal-margin);
  pointer-events: none;
}

.modal.fade .modal-dialog {
  transition: transform 0.3s ease-out;
  transform: translate(0, -50px);
}

@media (prefers-reduced-motion: reduce) {
  .modal.fade .modal-dialog {
    transition: none;
  }
}

.modal.show .modal-dialog {
  transform: none;
}

.modal.modal-static .modal-dialog {
  transform: scale(1.02);
}

.modal-dialog-scrollable {
  height: calc(100% - var(--bs-modal-margin) * 2);
}

.modal-dialog-scrollable .modal-content {
  max-height: 100%;
  overflow: hidden;
}

.modal-dialog-scrollable .modal-body {
  overflow-y: auto;
}

.modal-dialog-centered {
  display: flex;
  align-items: center;
  min-height: calc(100% - var(--bs-modal-margin) * 2);
}

.modal-content {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 100%;
  color: var(--bs-modal-color);
  pointer-events: auto;
  background-color: var(--bs-modal-bg);
  background-clip: padding-box;
  border: var(--bs-modal-border-width) solid var(--bs-modal-border-color);
  border-radius: var(--bs-modal-border-radius);
  outline: 0;
}

.modal-backdrop {
  --bs-backdrop-zindex: 1050;
  --bs-backdrop-bg: #000;
  --bs-backdrop-opacity: 0.5;
  position: fixed;
  top: 0;
  left: 0;
  z-index: var(--bs-backdrop-zindex);
  width: 100vw;
  height: 100vh;
  background-color: var(--bs-backdrop-bg);
}

.modal-backdrop.fade {
  opacity: 0;
}

.modal-backdrop.show {
  opacity: var(--bs-backdrop-opacity);
}

.modal-header {
  display: flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: space-between;
  padding: var(--bs-modal-header-padding);
  border-bottom: var(--bs-modal-header-border-width) solid var(--bs-modal-header-border-color);
  border-top-left-radius: var(--bs-modal-inner-border-radius);
  border-top-right-radius: var(--bs-modal-inner-border-radius);
}

.modal-header .btn-close {
  padding: calc(var(--bs-modal-header-padding-y) * 0.5) calc(var(--bs-modal-header-padding-x) * 0.5);
  margin: calc(-0.5 * var(--bs-modal-header-padding-y)) calc(-0.5 * var(--bs-modal-header-padding-x)) calc(-0.5 * var(--bs-modal-header-padding-y)) auto;
}

.modal-title {
  margin-bottom: 0;
  line-height: var(--bs-modal-title-line-height);
}

.modal-body {
  position: relative;
  flex: 1 1 auto;
  padding: var(--bs-modal-padding);
}

.modal-footer {
  display: flex;
  flex-shrink: 0;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-end;
  padding: calc(var(--bs-modal-padding) - var(--bs-modal-footer-gap) * 0.5);
  background-color: var(--bs-modal-footer-bg);
  border-top: var(--bs-modal-footer-border-width) solid var(--bs-modal-footer-border-color);
  border-bottom-right-radius: var(--bs-modal-inner-border-radius);
  border-bottom-left-radius: var(--bs-modal-inner-border-radius);
}

.modal-footer>* {
  margin: calc(var(--bs-modal-footer-gap) * 0.5);
}

@media (min-width: 576px) {
  .modal {
    --bs-modal-margin: 1.75rem;
    --bs-modal-box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  }

  .modal-dialog {
    max-width: var(--bs-modal-width);
    margin-right: auto;
    margin-left: auto;
  }

  .modal-sm {
    --bs-modal-width: 300px;
  }
}

@media (min-width: 992px) {

  .modal-lg,
  .modal-xl {
    --bs-modal-width: 800px;
  }
}

@media (min-width: 1200px) {
  .modal-xl {
    --bs-modal-width: 1140px;
  }
}

.modal-fullscreen {
  width: 100vw;
  max-width: none;
  height: 100%;
  margin: 0;
}

.modal-fullscreen .modal-content {
  height: 100%;
  border: 0;
  border-radius: 0;
}

.modal-fullscreen .modal-header,
.modal-fullscreen .modal-footer {
  border-radius: 0;
}

.modal-fullscreen .modal-body {
  overflow-y: auto;
}

@media (max-width: 575.98px) {
  .modal-fullscreen-sm-down {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }

  .modal-fullscreen-sm-down .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }

  .modal-fullscreen-sm-down .modal-header,
  .modal-fullscreen-sm-down .modal-footer {
    border-radius: 0;
  }

  .modal-fullscreen-sm-down .modal-body {
    overflow-y: auto;
  }
}

@media (max-width: 767.98px) {
  .modal-fullscreen-md-down {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }

  .modal-fullscreen-md-down .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }

  .modal-fullscreen-md-down .modal-header,
  .modal-fullscreen-md-down .modal-footer {
    border-radius: 0;
  }

  .modal-fullscreen-md-down .modal-body {
    overflow-y: auto;
  }
}

@media (max-width: 991.98px) {
  .modal-fullscreen-lg-down {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }

  .modal-fullscreen-lg-down .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }

  .modal-fullscreen-lg-down .modal-header,
  .modal-fullscreen-lg-down .modal-footer {
    border-radius: 0;
  }

  .modal-fullscreen-lg-down .modal-body {
    overflow-y: auto;
  }
}

@media (max-width: 1199.98px) {
  .modal-fullscreen-xl-down {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }

  .modal-fullscreen-xl-down .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }

  .modal-fullscreen-xl-down .modal-header,
  .modal-fullscreen-xl-down .modal-footer {
    border-radius: 0;
  }

  .modal-fullscreen-xl-down .modal-body {
    overflow-y: auto;
  }
}

@media (max-width: 1399.98px) {
  .modal-fullscreen-xxl-down {
    width: 100vw;
    max-width: none;
    height: 100%;
    margin: 0;
  }

  .modal-fullscreen-xxl-down .modal-content {
    height: 100%;
    border: 0;
    border-radius: 0;
  }

  .modal-fullscreen-xxl-down .modal-header,
  .modal-fullscreen-xxl-down .modal-footer {
    border-radius: 0;
  }

  .modal-fullscreen-xxl-down .modal-body {
    overflow-y: auto;
  }
}

.tooltip {
  --bs-tooltip-zindex: 1080;
  --bs-tooltip-max-width: 200px;
  --bs-tooltip-padding-x: 0.5rem;
  --bs-tooltip-padding-y: 0.25rem;
  --bs-tooltip-margin: ;
  --bs-tooltip-font-size: 0.875rem;
  --bs-tooltip-color: #fff;
  --bs-tooltip-bg: #000;
  --bs-tooltip-border-radius: 0.375rem;
  --bs-tooltip-opacity: 0.9;
  --bs-tooltip-arrow-width: 0.8rem;
  --bs-tooltip-arrow-height: 0.4rem;
  z-index: var(--bs-tooltip-zindex);
  display: block;
  padding: var(--bs-tooltip-arrow-height);
  margin: var(--bs-tooltip-margin);
  font-family: var(--bs-font-sans-serif);
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  white-space: normal;
  word-spacing: normal;
  line-break: auto;
  font-size: var(--bs-tooltip-font-size);
  word-wrap: break-word;
  opacity: 0;
}

.tooltip.show {
  opacity: var(--bs-tooltip-opacity);
}

.tooltip .tooltip-arrow {
  display: block;
  width: var(--bs-tooltip-arrow-width);
  height: var(--bs-tooltip-arrow-height);
}

.tooltip .tooltip-arrow::before {
  position: absolute;
  content: "";
  border-color: transparent;
  border-style: solid;
}

.bs-tooltip-top .tooltip-arrow,
.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow {
  bottom: 0;
}

.bs-tooltip-top .tooltip-arrow::before,
.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before {
  top: -1px;
  border-width: var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * 0.5) 0;
  border-top-color: var(--bs-tooltip-bg);
}

/* rtl:begin:ignore */
.bs-tooltip-end .tooltip-arrow,
.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow {
  left: 0;
  width: var(--bs-tooltip-arrow-height);
  height: var(--bs-tooltip-arrow-width);
}

.bs-tooltip-end .tooltip-arrow::before,
.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before {
  right: -1px;
  border-width: calc(var(--bs-tooltip-arrow-width) * 0.5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * 0.5) 0;
  border-right-color: var(--bs-tooltip-bg);
}

/* rtl:end:ignore */
.bs-tooltip-bottom .tooltip-arrow,
.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow {
  top: 0;
}

.bs-tooltip-bottom .tooltip-arrow::before,
.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before {
  bottom: -1px;
  border-width: 0 calc(var(--bs-tooltip-arrow-width) * 0.5) var(--bs-tooltip-arrow-height);
  border-bottom-color: var(--bs-tooltip-bg);
}

/* rtl:begin:ignore */
.bs-tooltip-start .tooltip-arrow,
.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow {
  right: 0;
  width: var(--bs-tooltip-arrow-height);
  height: var(--bs-tooltip-arrow-width);
}

.bs-tooltip-start .tooltip-arrow::before,
.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before {
  left: -1px;
  border-width: calc(var(--bs-tooltip-arrow-width) * 0.5) 0 calc(var(--bs-tooltip-arrow-width) * 0.5) var(--bs-tooltip-arrow-height);
  border-left-color: var(--bs-tooltip-bg);
}

/* rtl:end:ignore */
.tooltip-inner {
  max-width: var(--bs-tooltip-max-width);
  padding: var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);
  color: var(--bs-tooltip-color);
  text-align: center;
  background-color: var(--bs-tooltip-bg);
  border-radius: var(--bs-tooltip-border-radius);
}

.popover {
  --bs-popover-zindex: 1070;
  --bs-popover-max-width: 276px;
  --bs-popover-font-size: 0.875rem;
  --bs-popover-bg: #fff;
  --bs-popover-border-width: 1px;
  --bs-popover-border-color: var(--bs-border-color-translucent);
  --bs-popover-border-radius: 0.5rem;
  --bs-popover-inner-border-radius: calc(0.5rem - 1px);
  --bs-popover-box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  --bs-popover-header-padding-x: 1rem;
  --bs-popover-header-padding-y: 0.5rem;
  --bs-popover-header-font-size: 1rem;
  --bs-popover-header-color: ;
  --bs-popover-header-bg: #f0f0f0;
  --bs-popover-body-padding-x: 1rem;
  --bs-popover-body-padding-y: 1rem;
  --bs-popover-body-color: #212529;
  --bs-popover-arrow-width: 1rem;
  --bs-popover-arrow-height: 0.5rem;
  --bs-popover-arrow-border: var(--bs-popover-border-color);
  z-index: var(--bs-popover-zindex);
  display: block;
  max-width: var(--bs-popover-max-width);
  font-family: var(--bs-font-sans-serif);
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  white-space: normal;
  word-spacing: normal;
  line-break: auto;
  font-size: var(--bs-popover-font-size);
  word-wrap: break-word;
  background-color: var(--bs-popover-bg);
  background-clip: padding-box;
  border: var(--bs-popover-border-width) solid var(--bs-popover-border-color);
  border-radius: var(--bs-popover-border-radius);
}

.popover .popover-arrow {
  display: block;
  width: var(--bs-popover-arrow-width);
  height: var(--bs-popover-arrow-height);
}

.popover .popover-arrow::before,
.popover .popover-arrow::after {
  position: absolute;
  display: block;
  content: "";
  border-color: transparent;
  border-style: solid;
  border-width: 0;
}

.bs-popover-top>.popover-arrow,
.bs-popover-auto[data-popper-placement^=top]>.popover-arrow {
  bottom: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));
}

.bs-popover-top>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,
.bs-popover-top>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after {
  border-width: var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * 0.5) 0;
}

.bs-popover-top>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before {
  bottom: 0;
  border-top-color: var(--bs-popover-arrow-border);
}

.bs-popover-top>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after {
  bottom: var(--bs-popover-border-width);
  border-top-color: var(--bs-popover-bg);
}

/* rtl:begin:ignore */
.bs-popover-end>.popover-arrow,
.bs-popover-auto[data-popper-placement^=right]>.popover-arrow {
  left: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));
  width: var(--bs-popover-arrow-height);
  height: var(--bs-popover-arrow-width);
}

.bs-popover-end>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,
.bs-popover-end>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after {
  border-width: calc(var(--bs-popover-arrow-width) * 0.5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * 0.5) 0;
}

.bs-popover-end>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before {
  left: 0;
  border-right-color: var(--bs-popover-arrow-border);
}

.bs-popover-end>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after {
  left: var(--bs-popover-border-width);
  border-right-color: var(--bs-popover-bg);
}

/* rtl:end:ignore */
.bs-popover-bottom>.popover-arrow,
.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow {
  top: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));
}

.bs-popover-bottom>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,
.bs-popover-bottom>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after {
  border-width: 0 calc(var(--bs-popover-arrow-width) * 0.5) var(--bs-popover-arrow-height);
}

.bs-popover-bottom>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before {
  top: 0;
  border-bottom-color: var(--bs-popover-arrow-border);
}

.bs-popover-bottom>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after {
  top: var(--bs-popover-border-width);
  border-bottom-color: var(--bs-popover-bg);
}

.bs-popover-bottom .popover-header::before,
.bs-popover-auto[data-popper-placement^=bottom] .popover-header::before {
  position: absolute;
  top: 0;
  left: 50%;
  display: block;
  width: var(--bs-popover-arrow-width);
  margin-left: calc(-0.5 * var(--bs-popover-arrow-width));
  content: "";
  border-bottom: var(--bs-popover-border-width) solid var(--bs-popover-header-bg);
}

/* rtl:begin:ignore */
.bs-popover-start>.popover-arrow,
.bs-popover-auto[data-popper-placement^=left]>.popover-arrow {
  right: calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));
  width: var(--bs-popover-arrow-height);
  height: var(--bs-popover-arrow-width);
}

.bs-popover-start>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,
.bs-popover-start>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after {
  border-width: calc(var(--bs-popover-arrow-width) * 0.5) 0 calc(var(--bs-popover-arrow-width) * 0.5) var(--bs-popover-arrow-height);
}

.bs-popover-start>.popover-arrow::before,
.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before {
  right: 0;
  border-left-color: var(--bs-popover-arrow-border);
}

.bs-popover-start>.popover-arrow::after,
.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after {
  right: var(--bs-popover-border-width);
  border-left-color: var(--bs-popover-bg);
}

/* rtl:end:ignore */
.popover-header {
  padding: var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);
  margin-bottom: 0;
  font-size: var(--bs-popover-header-font-size);
  color: var(--bs-popover-header-color);
  background-color: var(--bs-popover-header-bg);
  border-bottom: var(--bs-popover-border-width) solid var(--bs-popover-border-color);
  border-top-left-radius: var(--bs-popover-inner-border-radius);
  border-top-right-radius: var(--bs-popover-inner-border-radius);
}

.popover-header:empty {
  display: none;
}

.popover-body {
  padding: var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);
  color: var(--bs-popover-body-color);
}

.carousel {
  position: relative;
}

.carousel.pointer-event {
  touch-action: pan-y;
}

.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.carousel-inner::after {
  display: block;
  clear: both;
  content: "";
}

.carousel-item {
  position: relative;
  display: none;
  float: left;
  width: 100%;
  margin-right: -100%;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transition: transform 0.6s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .carousel-item {
    transition: none;
  }
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
  display: block;
}

.carousel-item-next:not(.carousel-item-start),
.active.carousel-item-end {
  transform: translateX(100%);
}

.carousel-item-prev:not(.carousel-item-end),
.active.carousel-item-start {
  transform: translateX(-100%);
}

.carousel-fade .carousel-item {
  opacity: 0;
  transition-property: opacity;
  transform: none;
}

.carousel-fade .carousel-item.active,
.carousel-fade .carousel-item-next.carousel-item-start,
.carousel-fade .carousel-item-prev.carousel-item-end {
  z-index: 1;
  opacity: 1;
}

.carousel-fade .active.carousel-item-start,
.carousel-fade .active.carousel-item-end {
  z-index: 0;
  opacity: 0;
  transition: opacity 0s 0.6s;
}

@media (prefers-reduced-motion: reduce) {

  .carousel-fade .active.carousel-item-start,
  .carousel-fade .active.carousel-item-end {
    transition: none;
  }
}

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 15%;
  padding: 0;
  color: #fff;
  text-align: center;
  background: none;
  border: 0;
  opacity: 0.5;
  transition: opacity 0.15s ease;
}

@media (prefers-reduced-motion: reduce) {

  .carousel-control-prev,
  .carousel-control-next {
    transition: none;
  }
}

.carousel-control-prev:hover,
.carousel-control-prev:focus,
.carousel-control-next:hover,
.carousel-control-next:focus {
  color: #fff;
  text-decoration: none;
  outline: 0;
  opacity: 0.9;
}

.carousel-control-prev {
  left: 0;
}

.carousel-control-next {
  right: 0;
}

.carousel-control-prev-icon,
.carousel-control-next-icon {
  display: inline-block;
  width: 2rem;
  height: 2rem;
  background-repeat: no-repeat;
  background-position: 50%;
  background-size: 100% 100%;
}

/* rtl:options: {
  "autoRename": true,
  "stringMap":[ {
    "name"    : "prev-next",
    "search"  : "prev",
    "replace" : "next"
  } ]
} */
.carousel-control-prev-icon {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e");
}

.carousel-control-next-icon {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
}

.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 2;
  display: flex;
  justify-content: center;
  padding: 0;
  margin-right: 15%;
  margin-bottom: 1rem;
  margin-left: 15%;
  list-style: none;
}

.carousel-indicators [data-bs-target] {
  box-sizing: content-box;
  flex: 0 1 auto;
  width: 30px;
  height: 3px;
  padding: 0;
  margin-right: 3px;
  margin-left: 3px;
  text-indent: -999px;
  cursor: pointer;
  background-color: #fff;
  background-clip: padding-box;
  border: 0;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  opacity: 0.5;
  transition: opacity 0.6s ease;
}

@media (prefers-reduced-motion: reduce) {
  .carousel-indicators [data-bs-target] {
    transition: none;
  }
}

.carousel-indicators .active {
  opacity: 1;
}

.carousel-caption {
  position: absolute;
  right: 15%;
  bottom: 1.25rem;
  left: 15%;
  padding-top: 1.25rem;
  padding-bottom: 1.25rem;
  color: #fff;
  text-align: center;
}

.carousel-dark .carousel-control-prev-icon,
.carousel-dark .carousel-control-next-icon {
  filter: invert(1) grayscale(100);
}

.carousel-dark .carousel-indicators [data-bs-target] {
  background-color: #000;
}

.carousel-dark .carousel-caption {
  color: #000;
}

.spinner-grow,
.spinner-border {
  display: inline-block;
  width: var(--bs-spinner-width);
  height: var(--bs-spinner-height);
  vertical-align: var(--bs-spinner-vertical-align);
  border-radius: 50%;
  animation: var(--bs-spinner-animation-speed) linear infinite var(--bs-spinner-animation-name);
}

@keyframes spinner-border {
  to {
    transform: rotate(360deg)
      /* rtl:ignore */
    ;
  }
}

.spinner-border {
  --bs-spinner-width: 2rem;
  --bs-spinner-height: 2rem;
  --bs-spinner-vertical-align: -0.125em;
  --bs-spinner-border-width: 0.25em;
  --bs-spinner-animation-speed: 0.75s;
  --bs-spinner-animation-name: spinner-border;
  border: var(--bs-spinner-border-width) solid currentcolor;
  border-right-color: transparent;
}

.spinner-border-sm {
  --bs-spinner-width: 1rem;
  --bs-spinner-height: 1rem;
  --bs-spinner-border-width: 0.2em;
}

@keyframes spinner-grow {
  0% {
    transform: scale(0);
  }

  50% {
    opacity: 1;
    transform: none;
  }
}

.spinner-grow {
  --bs-spinner-width: 2rem;
  --bs-spinner-height: 2rem;
  --bs-spinner-vertical-align: -0.125em;
  --bs-spinner-animation-speed: 0.75s;
  --bs-spinner-animation-name: spinner-grow;
  background-color: currentcolor;
  opacity: 0;
}

.spinner-grow-sm {
  --bs-spinner-width: 1rem;
  --bs-spinner-height: 1rem;
}

@media (prefers-reduced-motion: reduce) {

  .spinner-border,
  .spinner-grow {
    --bs-spinner-animation-speed: 1.5s;
  }
}

.offcanvas,
.offcanvas-xxl,
.offcanvas-xl,
.offcanvas-lg,
.offcanvas-md,
.offcanvas-sm {
  --bs-offcanvas-zindex: 1045;
  --bs-offcanvas-width: 400px;
  --bs-offcanvas-height: 30vh;
  --bs-offcanvas-padding-x: 1rem;
  --bs-offcanvas-padding-y: 1rem;
  --bs-offcanvas-color: ;
  --bs-offcanvas-bg: #fff;
  --bs-offcanvas-border-width: 1px;
  --bs-offcanvas-border-color: var(--bs-border-color-translucent);
  --bs-offcanvas-box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

@media (max-width: 575.98px) {
  .offcanvas-sm {
    position: fixed;
    bottom: 0;
    z-index: var(--bs-offcanvas-zindex);
    display: flex;
    flex-direction: column;
    max-width: 100%;
    color: var(--bs-offcanvas-color);
    visibility: hidden;
    background-color: var(--bs-offcanvas-bg);
    background-clip: padding-box;
    outline: 0;
    transition: transform 0.3s ease-in-out;
  }
}

@media (max-width: 575.98px) and (prefers-reduced-motion: reduce) {
  .offcanvas-sm {
    transition: none;
  }
}

@media (max-width: 575.98px) {
  .offcanvas-sm.offcanvas-start {
    top: 0;
    left: 0;
    width: var(--bs-offcanvas-width);
    border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(-100%);
  }
}

@media (max-width: 575.98px) {
  .offcanvas-sm.offcanvas-end {
    top: 0;
    right: 0;
    width: var(--bs-offcanvas-width);
    border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(100%);
  }
}

@media (max-width: 575.98px) {
  .offcanvas-sm.offcanvas-top {
    top: 0;
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(-100%);
  }
}

@media (max-width: 575.98px) {
  .offcanvas-sm.offcanvas-bottom {
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(100%);
  }
}

@media (max-width: 575.98px) {

  .offcanvas-sm.showing,
  .offcanvas-sm.show:not(.hiding) {
    transform: none;
  }
}

@media (max-width: 575.98px) {

  .offcanvas-sm.showing,
  .offcanvas-sm.hiding,
  .offcanvas-sm.show {
    visibility: visible;
  }
}

@media (min-width: 576px) {
  .offcanvas-sm {
    --bs-offcanvas-height: auto;
    --bs-offcanvas-border-width: 0;
    background-color: transparent !important;
  }

  .offcanvas-sm .offcanvas-header {
    display: none;
  }

  .offcanvas-sm .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
    background-color: transparent !important;
  }
}

@media (max-width: 767.98px) {
  .offcanvas-md {
    position: fixed;
    bottom: 0;
    z-index: var(--bs-offcanvas-zindex);
    display: flex;
    flex-direction: column;
    max-width: 100%;
    color: var(--bs-offcanvas-color);
    visibility: hidden;
    background-color: var(--bs-offcanvas-bg);
    background-clip: padding-box;
    outline: 0;
    transition: transform 0.3s ease-in-out;
  }
}

@media (max-width: 767.98px) and (prefers-reduced-motion: reduce) {
  .offcanvas-md {
    transition: none;
  }
}

@media (max-width: 767.98px) {
  .offcanvas-md.offcanvas-start {
    top: 0;
    left: 0;
    width: var(--bs-offcanvas-width);
    border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(-100%);
  }
}

@media (max-width: 767.98px) {
  .offcanvas-md.offcanvas-end {
    top: 0;
    right: 0;
    width: var(--bs-offcanvas-width);
    border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(100%);
  }
}

@media (max-width: 767.98px) {
  .offcanvas-md.offcanvas-top {
    top: 0;
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(-100%);
  }
}

@media (max-width: 767.98px) {
  .offcanvas-md.offcanvas-bottom {
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(100%);
  }
}

@media (max-width: 767.98px) {

  .offcanvas-md.showing,
  .offcanvas-md.show:not(.hiding) {
    transform: none;
  }
}

@media (max-width: 767.98px) {

  .offcanvas-md.showing,
  .offcanvas-md.hiding,
  .offcanvas-md.show {
    visibility: visible;
  }
}

@media (min-width: 768px) {
  .offcanvas-md {
    --bs-offcanvas-height: auto;
    --bs-offcanvas-border-width: 0;
    background-color: transparent !important;
  }

  .offcanvas-md .offcanvas-header {
    display: none;
  }

  .offcanvas-md .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
    background-color: transparent !important;
  }
}

@media (max-width: 991.98px) {
  .offcanvas-lg {
    position: fixed;
    bottom: 0;
    z-index: var(--bs-offcanvas-zindex);
    display: flex;
    flex-direction: column;
    max-width: 100%;
    color: var(--bs-offcanvas-color);
    visibility: hidden;
    background-color: var(--bs-offcanvas-bg);
    background-clip: padding-box;
    outline: 0;
    transition: transform 0.3s ease-in-out;
  }
}

@media (max-width: 991.98px) and (prefers-reduced-motion: reduce) {
  .offcanvas-lg {
    transition: none;
  }
}

@media (max-width: 991.98px) {
  .offcanvas-lg.offcanvas-start {
    top: 0;
    left: 0;
    width: var(--bs-offcanvas-width);
    border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(-100%);
  }
}

@media (max-width: 991.98px) {
  .offcanvas-lg.offcanvas-end {
    top: 0;
    right: 0;
    width: var(--bs-offcanvas-width);
    border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(100%);
  }
}

@media (max-width: 991.98px) {
  .offcanvas-lg.offcanvas-top {
    top: 0;
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(-100%);
  }
}

@media (max-width: 991.98px) {
  .offcanvas-lg.offcanvas-bottom {
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(100%);
  }
}

@media (max-width: 991.98px) {

  .offcanvas-lg.showing,
  .offcanvas-lg.show:not(.hiding) {
    transform: none;
  }
}

@media (max-width: 991.98px) {

  .offcanvas-lg.showing,
  .offcanvas-lg.hiding,
  .offcanvas-lg.show {
    visibility: visible;
  }
}

@media (min-width: 992px) {
  .offcanvas-lg {
    --bs-offcanvas-height: auto;
    --bs-offcanvas-border-width: 0;
    background-color: transparent !important;
  }

  .offcanvas-lg .offcanvas-header {
    display: none;
  }

  .offcanvas-lg .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
    background-color: transparent !important;
  }
}

@media (max-width: 1199.98px) {
  .offcanvas-xl {
    position: fixed;
    bottom: 0;
    z-index: var(--bs-offcanvas-zindex);
    display: flex;
    flex-direction: column;
    max-width: 100%;
    color: var(--bs-offcanvas-color);
    visibility: hidden;
    background-color: var(--bs-offcanvas-bg);
    background-clip: padding-box;
    outline: 0;
    transition: transform 0.3s ease-in-out;
  }
}

@media (max-width: 1199.98px) and (prefers-reduced-motion: reduce) {
  .offcanvas-xl {
    transition: none;
  }
}

@media (max-width: 1199.98px) {
  .offcanvas-xl.offcanvas-start {
    top: 0;
    left: 0;
    width: var(--bs-offcanvas-width);
    border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(-100%);
  }
}

@media (max-width: 1199.98px) {
  .offcanvas-xl.offcanvas-end {
    top: 0;
    right: 0;
    width: var(--bs-offcanvas-width);
    border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(100%);
  }
}

@media (max-width: 1199.98px) {
  .offcanvas-xl.offcanvas-top {
    top: 0;
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(-100%);
  }
}

@media (max-width: 1199.98px) {
  .offcanvas-xl.offcanvas-bottom {
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(100%);
  }
}

@media (max-width: 1199.98px) {

  .offcanvas-xl.showing,
  .offcanvas-xl.show:not(.hiding) {
    transform: none;
  }
}

@media (max-width: 1199.98px) {

  .offcanvas-xl.showing,
  .offcanvas-xl.hiding,
  .offcanvas-xl.show {
    visibility: visible;
  }
}

@media (min-width: 1200px) {
  .offcanvas-xl {
    --bs-offcanvas-height: auto;
    --bs-offcanvas-border-width: 0;
    background-color: transparent !important;
  }

  .offcanvas-xl .offcanvas-header {
    display: none;
  }

  .offcanvas-xl .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
    background-color: transparent !important;
  }
}

@media (max-width: 1399.98px) {
  .offcanvas-xxl {
    position: fixed;
    bottom: 0;
    z-index: var(--bs-offcanvas-zindex);
    display: flex;
    flex-direction: column;
    max-width: 100%;
    color: var(--bs-offcanvas-color);
    visibility: hidden;
    background-color: var(--bs-offcanvas-bg);
    background-clip: padding-box;
    outline: 0;
    transition: transform 0.3s ease-in-out;
  }
}

@media (max-width: 1399.98px) and (prefers-reduced-motion: reduce) {
  .offcanvas-xxl {
    transition: none;
  }
}

@media (max-width: 1399.98px) {
  .offcanvas-xxl.offcanvas-start {
    top: 0;
    left: 0;
    width: var(--bs-offcanvas-width);
    border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(-100%);
  }
}

@media (max-width: 1399.98px) {
  .offcanvas-xxl.offcanvas-end {
    top: 0;
    right: 0;
    width: var(--bs-offcanvas-width);
    border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateX(100%);
  }
}

@media (max-width: 1399.98px) {
  .offcanvas-xxl.offcanvas-top {
    top: 0;
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(-100%);
  }
}

@media (max-width: 1399.98px) {
  .offcanvas-xxl.offcanvas-bottom {
    right: 0;
    left: 0;
    height: var(--bs-offcanvas-height);
    max-height: 100%;
    border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
    transform: translateY(100%);
  }
}

@media (max-width: 1399.98px) {

  .offcanvas-xxl.showing,
  .offcanvas-xxl.show:not(.hiding) {
    transform: none;
  }
}

@media (max-width: 1399.98px) {

  .offcanvas-xxl.showing,
  .offcanvas-xxl.hiding,
  .offcanvas-xxl.show {
    visibility: visible;
  }
}

@media (min-width: 1400px) {
  .offcanvas-xxl {
    --bs-offcanvas-height: auto;
    --bs-offcanvas-border-width: 0;
    background-color: transparent !important;
  }

  .offcanvas-xxl .offcanvas-header {
    display: none;
  }

  .offcanvas-xxl .offcanvas-body {
    display: flex;
    flex-grow: 0;
    padding: 0;
    overflow-y: visible;
    background-color: transparent !important;
  }
}

.offcanvas {
  position: fixed;
  bottom: 0;
  z-index: var(--bs-offcanvas-zindex);
  display: flex;
  flex-direction: column;
  max-width: 100%;
  color: var(--bs-offcanvas-color);
  visibility: hidden;
  background-color: var(--bs-offcanvas-bg);
  background-clip: padding-box;
  outline: 0;
  transition: transform 0.3s ease-in-out;
}

@media (prefers-reduced-motion: reduce) {
  .offcanvas {
    transition: none;
  }
}

.offcanvas.offcanvas-start {
  top: 0;
  left: 0;
  width: var(--bs-offcanvas-width);
  border-right: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
  transform: translateX(-100%);
}

.offcanvas.offcanvas-end {
  top: 0;
  right: 0;
  width: var(--bs-offcanvas-width);
  border-left: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
  transform: translateX(100%);
}

.offcanvas.offcanvas-top {
  top: 0;
  right: 0;
  left: 0;
  height: var(--bs-offcanvas-height);
  max-height: 100%;
  border-bottom: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
  transform: translateY(-100%);
}

.offcanvas.offcanvas-bottom {
  right: 0;
  left: 0;
  height: var(--bs-offcanvas-height);
  max-height: 100%;
  border-top: var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);
  transform: translateY(100%);
}

.offcanvas.showing,
.offcanvas.show:not(.hiding) {
  transform: none;
}

.offcanvas.showing,
.offcanvas.hiding,
.offcanvas.show {
  visibility: visible;
}

.offcanvas-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1040;
  width: 100vw;
  height: 100vh;
  background-color: #000;
}

.offcanvas-backdrop.fade {
  opacity: 0;
}

.offcanvas-backdrop.show {
  opacity: 0.5;
}

.offcanvas-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x);
}

.offcanvas-header .btn-close {
  padding: calc(var(--bs-offcanvas-padding-y) * 0.5) calc(var(--bs-offcanvas-padding-x) * 0.5);
  margin-top: calc(-0.5 * var(--bs-offcanvas-padding-y));
  margin-right: calc(-0.5 * var(--bs-offcanvas-padding-x));
  margin-bottom: calc(-0.5 * var(--bs-offcanvas-padding-y));
}

.offcanvas-title {
  margin-bottom: 0;
  line-height: 1.5;
}

.offcanvas-body {
  flex-grow: 1;
  padding: var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x);
  overflow-y: auto;
}

.placeholder {
  display: inline-block;
  min-height: 1em;
  vertical-align: middle;
  cursor: wait;
  background-color: currentcolor;
  opacity: 0.5;
}

.placeholder.btn::before {
  display: inline-block;
  content: "";
}

.placeholder-xs {
  min-height: 0.6em;
}

.placeholder-sm {
  min-height: 0.8em;
}

.placeholder-lg {
  min-height: 1.2em;
}

.placeholder-glow .placeholder {
  animation: placeholder-glow 2s ease-in-out infinite;
}

@keyframes placeholder-glow {
  50% {
    opacity: 0.2;
  }
}

.placeholder-wave {
  -webkit-mask-image: linear-gradient(130deg, #000 55%, rgba(0, 0, 0, 0.8) 75%, #000 95%);
  mask-image: linear-gradient(130deg, #000 55%, rgba(0, 0, 0, 0.8) 75%, #000 95%);
  -webkit-mask-size: 200% 100%;
  mask-size: 200% 100%;
  animation: placeholder-wave 2s linear infinite;
}

@keyframes placeholder-wave {
  100% {
    -webkit-mask-position: -200% 0%;
    mask-position: -200% 0%;
  }
}

.clearfix::after {
  display: block;
  clear: both;
  content: "";
}

.text-bg-primary {
  color: #fff !important;
  background-color: RGBA(13, 110, 253, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-secondary {
  color: #fff !important;
  background-color: RGBA(108, 117, 125, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-success {
  color: #fff !important;
  background-color: RGBA(25, 135, 84, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-info {
  color: #000 !important;
  background-color: RGBA(13, 202, 240, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-warning {
  color: #000 !important;
  background-color: RGBA(255, 193, 7, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-danger {
  color: #fff !important;
  background-color: RGBA(220, 53, 69, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-light {
  color: #000 !important;
  background-color: RGBA(248, 249, 250, var(--bs-bg-opacity, 1)) !important;
}

.text-bg-dark {
  color: #fff !important;
  background-color: RGBA(33, 37, 41, var(--bs-bg-opacity, 1)) !important;
}

.link-primary {
  color: #0d6efd !important;
}

.link-primary:hover,
.link-primary:focus {
  color: #0a58ca !important;
}

.link-secondary {
  color: #6c757d !important;
}

.link-secondary:hover,
.link-secondary:focus {
  color: #565e64 !important;
}

.link-success {
  color: #198754 !important;
}

.link-success:hover,
.link-success:focus {
  color: #146c43 !important;
}

.link-info {
  color: #0dcaf0 !important;
}

.link-info:hover,
.link-info:focus {
  color: #3dd5f3 !important;
}

.link-warning {
  color: #ffc107 !important;
}

.link-warning:hover,
.link-warning:focus {
  color: #ffcd39 !important;
}

.link-danger {
  color: #dc3545 !important;
}

.link-danger:hover,
.link-danger:focus {
  color: #b02a37 !important;
}

.link-light {
  color: #f8f9fa !important;
}

.link-light:hover,
.link-light:focus {
  color: #f9fafb !important;
}

.link-dark {
  color: #212529 !important;
}

.link-dark:hover,
.link-dark:focus {
  color: #1a1e21 !important;
}

.ratio {
  position: relative;
  width: 100%;
}

.ratio::before {
  display: block;
  padding-top: var(--bs-aspect-ratio);
  content: "";
}

.ratio>* {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.ratio-1x1 {
  --bs-aspect-ratio: 100%;
}

.ratio-4x3 {
  --bs-aspect-ratio: 75%;
}

.ratio-16x9 {
  --bs-aspect-ratio: 56.25%;
}

.ratio-21x9 {
  --bs-aspect-ratio: 42.8571428571%;
}

.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: 1030;
}

.fixed-bottom {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1030;
}

.sticky-top {
  position: sticky;
  top: 0;
  z-index: 1020;
}

.sticky-bottom {
  position: sticky;
  bottom: 0;
  z-index: 1020;
}

@media (min-width: 576px) {
  .sticky-sm-top {
    position: sticky;
    top: 0;
    z-index: 1020;
  }

  .sticky-sm-bottom {
    position: sticky;
    bottom: 0;
    z-index: 1020;
  }
}

@media (min-width: 768px) {
  .sticky-md-top {
    position: sticky;
    top: 0;
    z-index: 1020;
  }

  .sticky-md-bottom {
    position: sticky;
    bottom: 0;
    z-index: 1020;
  }
}

@media (min-width: 992px) {
  .sticky-lg-top {
    position: sticky;
    top: 0;
    z-index: 1020;
  }

  .sticky-lg-bottom {
    position: sticky;
    bottom: 0;
    z-index: 1020;
  }
}

@media (min-width: 1200px) {
  .sticky-xl-top {
    position: sticky;
    top: 0;
    z-index: 1020;
  }

  .sticky-xl-bottom {
    position: sticky;
    bottom: 0;
    z-index: 1020;
  }
}

@media (min-width: 1400px) {
  .sticky-xxl-top {
    position: sticky;
    top: 0;
    z-index: 1020;
  }

  .sticky-xxl-bottom {
    position: sticky;
    bottom: 0;
    z-index: 1020;
  }
}

.hstack {
  display: flex;
  flex-direction: row;
  align-items: center;
  align-self: stretch;
}

.vstack {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  align-self: stretch;
}

.visually-hidden,
.visually-hidden-focusable:not(:focus):not(:focus-within) {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

.stretched-link::after {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1;
  content: "";
}

.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.vr {
  display: inline-block;
  align-self: stretch;
  width: 1px;
  min-height: 1em;
  background-color: currentcolor;
  opacity: 0.25;
}

.align-baseline {
  vertical-align: baseline !important;
}

.align-top {
  vertical-align: top !important;
}

.align-middle {
  vertical-align: middle !important;
}

.align-bottom {
  vertical-align: bottom !important;
}

.align-text-bottom {
  vertical-align: text-bottom !important;
}

.align-text-top {
  vertical-align: text-top !important;
}

.float-start {
  float: left !important;
}

.float-end {
  float: right !important;
}

.float-none {
  float: none !important;
}

.opacity-0 {
  opacity: 0 !important;
}

.opacity-25 {
  opacity: 0.25 !important;
}

.opacity-50 {
  opacity: 0.5 !important;
}

.opacity-75 {
  opacity: 0.75 !important;
}

.opacity-100 {
  opacity: 1 !important;
}

.overflow-auto {
  overflow: auto !important;
}

.overflow-hidden {
  overflow: hidden !important;
}

.overflow-visible {
  overflow: visible !important;
}

.overflow-scroll {
  overflow: scroll !important;
}

.d-inline {
  display: inline !important;
}

.d-inline-block {
  display: inline-block !important;
}

.d-block {
  display: block !important;
}

.d-grid {
  display: grid !important;
}

.d-table {
  display: table !important;
}

.d-table-row {
  display: table-row !important;
}

.d-table-cell {
  display: table-cell !important;
}

.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

.d-none {
  display: none !important;
}

.shadow {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
}

.shadow-lg {
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;
}

.shadow-none {
  box-shadow: none !important;
}

.position-static {
  position: static !important;
}

.position-relative {
  position: relative !important;
}

.position-absolute {
  position: absolute !important;
}

.position-fixed {
  position: fixed !important;
}

.position-sticky {
  position: sticky !important;
}

.top-0 {
  top: 0 !important;
}

.top-50 {
  top: 50% !important;
}

.top-100 {
  top: 100% !important;
}

.bottom-0 {
  bottom: 0 !important;
}

.bottom-50 {
  bottom: 50% !important;
}

.bottom-100 {
  bottom: 100% !important;
}

.start-0 {
  left: 0 !important;
}

.start-50 {
  left: 50% !important;
}

.start-100 {
  left: 100% !important;
}

.end-0 {
  right: 0 !important;
}

.end-50 {
  right: 50% !important;
}

.end-100 {
  right: 100% !important;
}

.translate-middle {
  transform: translate(-50%, -50%) !important;
}

.translate-middle-x {
  transform: translateX(-50%) !important;
}

.translate-middle-y {
  transform: translateY(-50%) !important;
}

.border {
  border: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
}

.border-0 {
  border: 0 !important;
}

.border-top {
  border-top: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
}

.border-top-0 {
  border-top: 0 !important;
}

.border-end {
  border-right: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
}

.border-end-0 {
  border-right: 0 !important;
}

.border-bottom {
  border-bottom: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
}

.border-bottom-0 {
  border-bottom: 0 !important;
}

.border-start {
  border-left: var(--bs-border-width) var(--bs-border-style) var(--bs-border-color) !important;
}

.border-start-0 {
  border-left: 0 !important;
}

.border-primary {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-primary-rgb), var(--bs-border-opacity)) !important;
}

.border-secondary {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-secondary-rgb), var(--bs-border-opacity)) !important;
}

.border-success {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-success-rgb), var(--bs-border-opacity)) !important;
}

.border-info {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-info-rgb), var(--bs-border-opacity)) !important;
}

.border-warning {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-warning-rgb), var(--bs-border-opacity)) !important;
}

.border-danger {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-danger-rgb), var(--bs-border-opacity)) !important;
}

.border-light {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-light-rgb), var(--bs-border-opacity)) !important;
}

.border-dark {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-dark-rgb), var(--bs-border-opacity)) !important;
}

.border-white {
  --bs-border-opacity: 1;
  border-color: rgba(var(--bs-white-rgb), var(--bs-border-opacity)) !important;
}

.border-1 {
  --bs-border-width: 1px;
}

.border-2 {
  --bs-border-width: 2px;
}

.border-3 {
  --bs-border-width: 3px;
}

.border-4 {
  --bs-border-width: 4px;
}

.border-5 {
  --bs-border-width: 5px;
}

.border-opacity-10 {
  --bs-border-opacity: 0.1;
}

.border-opacity-25 {
  --bs-border-opacity: 0.25;
}

.border-opacity-50 {
  --bs-border-opacity: 0.5;
}

.border-opacity-75 {
  --bs-border-opacity: 0.75;
}

.border-opacity-100 {
  --bs-border-opacity: 1;
}

.w-25 {
  width: 25% !important;
}

.w-50 {
  width: 50% !important;
}

.w-75 {
  width: 75% !important;
}

.w-100 {
  width: 100% !important;
}

.w-auto {
  width: auto !important;
}

.mw-100 {
  max-width: 100% !important;
}

.vw-100 {
  width: 100vw !important;
}

.min-vw-100 {
  min-width: 100vw !important;
}

.h-25 {
  height: 25% !important;
}

.h-50 {
  height: 50% !important;
}

.h-75 {
  height: 75% !important;
}

.h-100 {
  height: 100% !important;
}

.h-auto {
  height: auto !important;
}

.mh-100 {
  max-height: 100% !important;
}

.vh-100 {
  height: 100vh !important;
}

.min-vh-100 {
  min-height: 100vh !important;
}

.flex-fill {
  flex: 1 1 auto !important;
}

.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.flex-row-reverse {
  flex-direction: row-reverse !important;
}

.flex-column-reverse {
  flex-direction: column-reverse !important;
}

.flex-grow-0 {
  flex-grow: 0 !important;
}

.flex-grow-1 {
  flex-grow: 1 !important;
}

.flex-shrink-0 {
  flex-shrink: 0 !important;
}

.flex-shrink-1 {
  flex-shrink: 1 !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.justify-content-evenly {
  justify-content: space-evenly !important;
}

.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}

.align-content-start {
  align-content: flex-start !important;
}

.align-content-end {
  align-content: flex-end !important;
}

.align-content-center {
  align-content: center !important;
}

.align-content-between {
  align-content: space-between !important;
}

.align-content-around {
  align-content: space-around !important;
}

.align-content-stretch {
  align-content: stretch !important;
}

.align-self-auto {
  align-self: auto !important;
}

.align-self-start {
  align-self: flex-start !important;
}

.align-self-end {
  align-self: flex-end !important;
}

.align-self-center {
  align-self: center !important;
}

.align-self-baseline {
  align-self: baseline !important;
}

.align-self-stretch {
  align-self: stretch !important;
}

.order-first {
  order: -1 !important;
}

.order-0 {
  order: 0 !important;
}

.order-1 {
  order: 1 !important;
}

.order-2 {
  order: 2 !important;
}

.order-3 {
  order: 3 !important;
}

.order-4 {
  order: 4 !important;
}

.order-5 {
  order: 5 !important;
}

.order-last {
  order: 6 !important;
}

.m-0 {
  margin: 0 !important;
}

.m-1 {
  margin: 0.25rem !important;
}

.m-2 {
  margin: 0.5rem !important;
}

.m-3 {
  margin: 1rem !important;
}

.m-4 {
  margin: 1.5rem !important;
}

.m-5 {
  margin: 3rem !important;
}

.m-auto {
  margin: auto !important;
}

.mx-0 {
  margin-right: 0 !important;
  margin-left: 0 !important;
}

.mx-1 {
  margin-right: 0.25rem !important;
  margin-left: 0.25rem !important;
}

.mx-2 {
  margin-right: 0.5rem !important;
  margin-left: 0.5rem !important;
}

.mx-3 {
  margin-right: 1rem !important;
  margin-left: 1rem !important;
}

.mx-4 {
  margin-right: 1.5rem !important;
  margin-left: 1.5rem !important;
}

.mx-5 {
  margin-right: 3rem !important;
  margin-left: 3rem !important;
}

.mx-auto {
  margin-right: auto !important;
  margin-left: auto !important;
}

.my-0 {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}

.my-1 {
  margin-top: 0.25rem !important;
  margin-bottom: 0.25rem !important;
}

.my-2 {
  margin-top: 0.5rem !important;
  margin-bottom: 0.5rem !important;
}

.my-3 {
  margin-top: 1rem !important;
  margin-bottom: 1rem !important;
}

.my-4 {
  margin-top: 1.5rem !important;
  margin-bottom: 1.5rem !important;
}

.my-5 {
  margin-top: 3rem !important;
  margin-bottom: 3rem !important;
}

.my-auto {
  margin-top: auto !important;
  margin-bottom: auto !important;
}

.mt-0 {
  margin-top: 0 !important;
}

.mt-1 {
  margin-top: 0.25rem !important;
}

.mt-2 {
  margin-top: 0.5rem !important;
}

.mt-3 {
  margin-top: 1rem !important;
}

.mt-4 {
  margin-top: 1.5rem !important;
}

.mt-5 {
  margin-top: 3rem !important;
}

.mt-auto {
  margin-top: auto !important;
}

.me-0 {
  margin-right: 0 !important;
}

.me-1 {
  margin-right: 0.25rem !important;
}

.me-2 {
  margin-right: 0.5rem !important;
}

.me-3 {
  margin-right: 1rem !important;
}

.me-4 {
  margin-right: 1.5rem !important;
}

.me-5 {
  margin-right: 3rem !important;
}

.me-auto {
  margin-right: auto !important;
}

.mb-0 {
  margin-bottom: 0 !important;
}

.mb-1 {
  margin-bottom: 0.25rem !important;
}

.mb-2 {
  margin-bottom: 0.5rem !important;
}

.mb-3 {
  margin-bottom: 1rem !important;
}

.mb-4 {
  margin-bottom: 1.5rem !important;
}

.mb-5 {
  margin-bottom: 3rem !important;
}

.mb-auto {
  margin-bottom: auto !important;
}

.ms-0 {
  margin-left: 0 !important;
}

.ms-1 {
  margin-left: 0.25rem !important;
}

.ms-2 {
  margin-left: 0.5rem !important;
}

.ms-3 {
  margin-left: 1rem !important;
}

.ms-4 {
  margin-left: 1.5rem !important;
}

.ms-5 {
  margin-left: 3rem !important;
}

.ms-auto {
  margin-left: auto !important;
}

.p-0 {
  padding: 0 !important;
}

.p-1 {
  padding: 0.25rem !important;
}

.p-2 {
  padding: 0.5rem !important;
}

.p-3 {
  padding: 1rem !important;
}

.p-4 {
  padding: 1.5rem !important;
}

.p-5 {
  padding: 3rem !important;
}

.px-0 {
  padding-right: 0 !important;
  padding-left: 0 !important;
}

.px-1 {
  padding-right: 0.25rem !important;
  padding-left: 0.25rem !important;
}

.px-2 {
  padding-right: 0.5rem !important;
  padding-left: 0.5rem !important;
}

.px-3 {
  padding-right: 1rem !important;
  padding-left: 1rem !important;
}

.px-4 {
  padding-right: 1.5rem !important;
  padding-left: 1.5rem !important;
}

.px-5 {
  padding-right: 3rem !important;
  padding-left: 3rem !important;
}

.py-0 {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

.py-1 {
  padding-top: 0.25rem !important;
  padding-bottom: 0.25rem !important;
}

.py-2 {
  padding-top: 0.5rem !important;
  padding-bottom: 0.5rem !important;
}

.py-3 {
  padding-top: 1rem !important;
  padding-bottom: 1rem !important;
}

.py-4 {
  padding-top: 1.5rem !important;
  padding-bottom: 1.5rem !important;
}

.py-5 {
  padding-top: 3rem !important;
  padding-bottom: 3rem !important;
}

.pt-0 {
  padding-top: 0 !important;
}

.pt-1 {
  padding-top: 0.25rem !important;
}

.pt-2 {
  padding-top: 0.5rem !important;
}

.pt-3 {
  padding-top: 1rem !important;
}

.pt-4 {
  padding-top: 1.5rem !important;
}

.pt-5 {
  padding-top: 3rem !important;
}

.pe-0 {
  padding-right: 0 !important;
}

.pe-1 {
  padding-right: 0.25rem !important;
}

.pe-2 {
  padding-right: 0.5rem !important;
}

.pe-3 {
  padding-right: 1rem !important;
}

.pe-4 {
  padding-right: 1.5rem !important;
}

.pe-5 {
  padding-right: 3rem !important;
}

.pb-0 {
  padding-bottom: 0 !important;
}

.pb-1 {
  padding-bottom: 0.25rem !important;
}

.pb-2 {
  padding-bottom: 0.5rem !important;
}

.pb-3 {
  padding-bottom: 1rem !important;
}

.pb-4 {
  padding-bottom: 1.5rem !important;
}

.pb-5 {
  padding-bottom: 3rem !important;
}

.ps-0 {
  padding-left: 0 !important;
}

.ps-1 {
  padding-left: 0.25rem !important;
}

.ps-2 {
  padding-left: 0.5rem !important;
}

.ps-3 {
  padding-left: 1rem !important;
}

.ps-4 {
  padding-left: 1.5rem !important;
}

.ps-5 {
  padding-left: 3rem !important;
}

.gap-0 {
  gap: 0 !important;
}

.gap-1 {
  gap: 0.25rem !important;
}

.gap-2 {
  gap: 0.5rem !important;
}

.gap-3 {
  gap: 1rem !important;
}

.gap-4 {
  gap: 1.5rem !important;
}

.gap-5 {
  gap: 3rem !important;
}

.font-monospace {
  font-family: var(--bs-font-monospace) !important;
}

.fs-1 {
  font-size: calc(1.375rem + 1.5vw) !important;
}

.fs-2 {
  font-size: calc(1.325rem + 0.9vw) !important;
}

.fs-3 {
  font-size: calc(1.3rem + 0.6vw) !important;
}

.fs-4 {
  font-size: calc(1.275rem + 0.3vw) !important;
}

.fs-5 {
  font-size: 1.25rem !important;
}

.fs-6 {
  font-size: 1rem !important;
}

.fst-italic {
  font-style: italic !important;
}

.fst-normal {
  font-style: normal !important;
}

.fw-light {
  font-weight: 300 !important;
}

.fw-lighter {
  font-weight: lighter !important;
}

.fw-normal {
  font-weight: 400 !important;
}

.fw-bold {
  font-weight: 700 !important;
}

.fw-semibold {
  font-weight: 600 !important;
}

.fw-bolder {
  font-weight: bolder !important;
}

.lh-1 {
  line-height: 1 !important;
}

.lh-sm {
  line-height: 1.25 !important;
}

.lh-base {
  line-height: 1.5 !important;
}

.lh-lg {
  line-height: 2 !important;
}

.text-start {
  text-align: left !important;
}

.text-end {
  text-align: right !important;
}

.text-center {
  text-align: center !important;
}

.text-decoration-none {
  text-decoration: none !important;
}

.text-decoration-underline {
  text-decoration: underline !important;
}

.text-decoration-line-through {
  text-decoration: line-through !important;
}

.text-lowercase {
  text-transform: lowercase !important;
}

.text-uppercase {
  text-transform: uppercase !important;
}

.text-capitalize {
  text-transform: capitalize !important;
}

.text-wrap {
  white-space: normal !important;
}

.text-nowrap {
  white-space: nowrap !important;
}

/* rtl:begin:remove */
.text-break {
  word-wrap: break-word !important;
  word-break: break-word !important;
}

/* rtl:end:remove */
.text-primary {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;
}

.text-secondary {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-secondary-rgb), var(--bs-text-opacity)) !important;
}

.text-success {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-success-rgb), var(--bs-text-opacity)) !important;
}

.text-info {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-info-rgb), var(--bs-text-opacity)) !important;
}

.text-warning {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-warning-rgb), var(--bs-text-opacity)) !important;
}

.text-danger {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-danger-rgb), var(--bs-text-opacity)) !important;
}

.text-light {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-light-rgb), var(--bs-text-opacity)) !important;
}

.text-dark {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-dark-rgb), var(--bs-text-opacity)) !important;
}

.text-black {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-black-rgb), var(--bs-text-opacity)) !important;
}

.text-white {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-white-rgb), var(--bs-text-opacity)) !important;
}

.text-body {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-body-color-rgb), var(--bs-text-opacity)) !important;
}

.text-muted {
  --bs-text-opacity: 1;
  color: #6c757d !important;
}

.text-black-50 {
  --bs-text-opacity: 1;
  color: rgba(0, 0, 0, 0.5) !important;
}

.text-white-50 {
  --bs-text-opacity: 1;
  color: rgba(255, 255, 255, 0.5) !important;
}

.text-reset {
  --bs-text-opacity: 1;
  color: inherit !important;
}

.text-opacity-25 {
  --bs-text-opacity: 0.25;
}

.text-opacity-50 {
  --bs-text-opacity: 0.5;
}

.text-opacity-75 {
  --bs-text-opacity: 0.75;
}

.text-opacity-100 {
  --bs-text-opacity: 1;
}

.bg-primary {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)) !important;
}

.bg-secondary {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)) !important;
}

.bg-success {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-success-rgb), var(--bs-bg-opacity)) !important;
}

.bg-info {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-info-rgb), var(--bs-bg-opacity)) !important;
}

.bg-warning {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-warning-rgb), var(--bs-bg-opacity)) !important;
}

.bg-danger {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-danger-rgb), var(--bs-bg-opacity)) !important;
}

.bg-light {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-light-rgb), var(--bs-bg-opacity)) !important;
}

.bg-dark {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;
}

.bg-black {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-black-rgb), var(--bs-bg-opacity)) !important;
}

.bg-white {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-white-rgb), var(--bs-bg-opacity)) !important;
}

.bg-body {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-body-bg-rgb), var(--bs-bg-opacity)) !important;
}

.bg-transparent {
  --bs-bg-opacity: 1;
  background-color: transparent !important;
}

.bg-opacity-10 {
  --bs-bg-opacity: 0.1;
}

.bg-opacity-25 {
  --bs-bg-opacity: 0.25;
}

.bg-opacity-50 {
  --bs-bg-opacity: 0.5;
}

.bg-opacity-75 {
  --bs-bg-opacity: 0.75;
}

.bg-opacity-100 {
  --bs-bg-opacity: 1;
}

.bg-gradient {
  background-image: var(--bs-gradient) !important;
}

.user-select-all {
  -webkit-user-select: all !important;
  -moz-user-select: all !important;
  user-select: all !important;
}

.user-select-auto {
  -webkit-user-select: auto !important;
  -moz-user-select: auto !important;
  user-select: auto !important;
}

.user-select-none {
  -webkit-user-select: none !important;
  -moz-user-select: none !important;
  user-select: none !important;
}

.pe-none {
  pointer-events: none !important;
}

.pe-auto {
  pointer-events: auto !important;
}

.rounded {
  border-radius: var(--bs-border-radius) !important;
}

.rounded-0 {
  border-radius: 0 !important;
}

.rounded-1 {
  border-radius: var(--bs-border-radius-sm) !important;
}

.rounded-2 {
  border-radius: var(--bs-border-radius) !important;
}

.rounded-3 {
  border-radius: var(--bs-border-radius-lg) !important;
}

.rounded-4 {
  border-radius: var(--bs-border-radius-xl) !important;
}

.rounded-5 {
  border-radius: var(--bs-border-radius-2xl) !important;
}

.rounded-circle {
  border-radius: 50% !important;
}

.rounded-pill {
  border-radius: var(--bs-border-radius-pill) !important;
}

.rounded-top {
  border-top-left-radius: var(--bs-border-radius) !important;
  border-top-right-radius: var(--bs-border-radius) !important;
}

.rounded-end {
  border-top-right-radius: var(--bs-border-radius) !important;
  border-bottom-right-radius: var(--bs-border-radius) !important;
}

.rounded-bottom {
  border-bottom-right-radius: var(--bs-border-radius) !important;
  border-bottom-left-radius: var(--bs-border-radius) !important;
}

.rounded-start {
  border-bottom-left-radius: var(--bs-border-radius) !important;
  border-top-left-radius: var(--bs-border-radius) !important;
}

.visible {
  visibility: visible !important;
}

.invisible {
  visibility: hidden !important;
}

@media (min-width: 576px) {
  .float-sm-start {
    float: left !important;
  }

  .float-sm-end {
    float: right !important;
  }

  .float-sm-none {
    float: none !important;
  }

  .d-sm-inline {
    display: inline !important;
  }

  .d-sm-inline-block {
    display: inline-block !important;
  }

  .d-sm-block {
    display: block !important;
  }

  .d-sm-grid {
    display: grid !important;
  }

  .d-sm-table {
    display: table !important;
  }

  .d-sm-table-row {
    display: table-row !important;
  }

  .d-sm-table-cell {
    display: table-cell !important;
  }

  .d-sm-flex {
    display: flex !important;
  }

  .d-sm-inline-flex {
    display: inline-flex !important;
  }

  .d-sm-none {
    display: none !important;
  }

  .flex-sm-fill {
    flex: 1 1 auto !important;
  }

  .flex-sm-row {
    flex-direction: row !important;
  }

  .flex-sm-column {
    flex-direction: column !important;
  }

  .flex-sm-row-reverse {
    flex-direction: row-reverse !important;
  }

  .flex-sm-column-reverse {
    flex-direction: column-reverse !important;
  }

  .flex-sm-grow-0 {
    flex-grow: 0 !important;
  }

  .flex-sm-grow-1 {
    flex-grow: 1 !important;
  }

  .flex-sm-shrink-0 {
    flex-shrink: 0 !important;
  }

  .flex-sm-shrink-1 {
    flex-shrink: 1 !important;
  }

  .flex-sm-wrap {
    flex-wrap: wrap !important;
  }

  .flex-sm-nowrap {
    flex-wrap: nowrap !important;
  }

  .flex-sm-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  .justify-content-sm-start {
    justify-content: flex-start !important;
  }

  .justify-content-sm-end {
    justify-content: flex-end !important;
  }

  .justify-content-sm-center {
    justify-content: center !important;
  }

  .justify-content-sm-between {
    justify-content: space-between !important;
  }

  .justify-content-sm-around {
    justify-content: space-around !important;
  }

  .justify-content-sm-evenly {
    justify-content: space-evenly !important;
  }

  .align-items-sm-start {
    align-items: flex-start !important;
  }

  .align-items-sm-end {
    align-items: flex-end !important;
  }

  .align-items-sm-center {
    align-items: center !important;
  }

  .align-items-sm-baseline {
    align-items: baseline !important;
  }

  .align-items-sm-stretch {
    align-items: stretch !important;
  }

  .align-content-sm-start {
    align-content: flex-start !important;
  }

  .align-content-sm-end {
    align-content: flex-end !important;
  }

  .align-content-sm-center {
    align-content: center !important;
  }

  .align-content-sm-between {
    align-content: space-between !important;
  }

  .align-content-sm-around {
    align-content: space-around !important;
  }

  .align-content-sm-stretch {
    align-content: stretch !important;
  }

  .align-self-sm-auto {
    align-self: auto !important;
  }

  .align-self-sm-start {
    align-self: flex-start !important;
  }

  .align-self-sm-end {
    align-self: flex-end !important;
  }

  .align-self-sm-center {
    align-self: center !important;
  }

  .align-self-sm-baseline {
    align-self: baseline !important;
  }

  .align-self-sm-stretch {
    align-self: stretch !important;
  }

  .order-sm-first {
    order: -1 !important;
  }

  .order-sm-0 {
    order: 0 !important;
  }

  .order-sm-1 {
    order: 1 !important;
  }

  .order-sm-2 {
    order: 2 !important;
  }

  .order-sm-3 {
    order: 3 !important;
  }

  .order-sm-4 {
    order: 4 !important;
  }

  .order-sm-5 {
    order: 5 !important;
  }

  .order-sm-last {
    order: 6 !important;
  }

  .m-sm-0 {
    margin: 0 !important;
  }

  .m-sm-1 {
    margin: 0.25rem !important;
  }

  .m-sm-2 {
    margin: 0.5rem !important;
  }

  .m-sm-3 {
    margin: 1rem !important;
  }

  .m-sm-4 {
    margin: 1.5rem !important;
  }

  .m-sm-5 {
    margin: 3rem !important;
  }

  .m-sm-auto {
    margin: auto !important;
  }

  .mx-sm-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }

  .mx-sm-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }

  .mx-sm-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }

  .mx-sm-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }

  .mx-sm-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }

  .mx-sm-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }

  .mx-sm-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }

  .my-sm-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .my-sm-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .my-sm-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  .my-sm-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  .my-sm-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }

  .my-sm-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }

  .my-sm-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }

  .mt-sm-0 {
    margin-top: 0 !important;
  }

  .mt-sm-1 {
    margin-top: 0.25rem !important;
  }

  .mt-sm-2 {
    margin-top: 0.5rem !important;
  }

  .mt-sm-3 {
    margin-top: 1rem !important;
  }

  .mt-sm-4 {
    margin-top: 1.5rem !important;
  }

  .mt-sm-5 {
    margin-top: 3rem !important;
  }

  .mt-sm-auto {
    margin-top: auto !important;
  }

  .me-sm-0 {
    margin-right: 0 !important;
  }

  .me-sm-1 {
    margin-right: 0.25rem !important;
  }

  .me-sm-2 {
    margin-right: 0.5rem !important;
  }

  .me-sm-3 {
    margin-right: 1rem !important;
  }

  .me-sm-4 {
    margin-right: 1.5rem !important;
  }

  .me-sm-5 {
    margin-right: 3rem !important;
  }

  .me-sm-auto {
    margin-right: auto !important;
  }

  .mb-sm-0 {
    margin-bottom: 0 !important;
  }

  .mb-sm-1 {
    margin-bottom: 0.25rem !important;
  }

  .mb-sm-2 {
    margin-bottom: 0.5rem !important;
  }

  .mb-sm-3 {
    margin-bottom: 1rem !important;
  }

  .mb-sm-4 {
    margin-bottom: 1.5rem !important;
  }

  .mb-sm-5 {
    margin-bottom: 3rem !important;
  }

  .mb-sm-auto {
    margin-bottom: auto !important;
  }

  .ms-sm-0 {
    margin-left: 0 !important;
  }

  .ms-sm-1 {
    margin-left: 0.25rem !important;
  }

  .ms-sm-2 {
    margin-left: 0.5rem !important;
  }

  .ms-sm-3 {
    margin-left: 1rem !important;
  }

  .ms-sm-4 {
    margin-left: 1.5rem !important;
  }

  .ms-sm-5 {
    margin-left: 3rem !important;
  }

  .ms-sm-auto {
    margin-left: auto !important;
  }

  .p-sm-0 {
    padding: 0 !important;
  }

  .p-sm-1 {
    padding: 0.25rem !important;
  }

  .p-sm-2 {
    padding: 0.5rem !important;
  }

  .p-sm-3 {
    padding: 1rem !important;
  }

  .p-sm-4 {
    padding: 1.5rem !important;
  }

  .p-sm-5 {
    padding: 3rem !important;
  }

  .px-sm-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }

  .px-sm-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }

  .px-sm-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }

  .px-sm-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }

  .px-sm-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .px-sm-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }

  .py-sm-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .py-sm-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }

  .py-sm-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }

  .py-sm-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .py-sm-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }

  .py-sm-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }

  .pt-sm-0 {
    padding-top: 0 !important;
  }

  .pt-sm-1 {
    padding-top: 0.25rem !important;
  }

  .pt-sm-2 {
    padding-top: 0.5rem !important;
  }

  .pt-sm-3 {
    padding-top: 1rem !important;
  }

  .pt-sm-4 {
    padding-top: 1.5rem !important;
  }

  .pt-sm-5 {
    padding-top: 3rem !important;
  }

  .pe-sm-0 {
    padding-right: 0 !important;
  }

  .pe-sm-1 {
    padding-right: 0.25rem !important;
  }

  .pe-sm-2 {
    padding-right: 0.5rem !important;
  }

  .pe-sm-3 {
    padding-right: 1rem !important;
  }

  .pe-sm-4 {
    padding-right: 1.5rem !important;
  }

  .pe-sm-5 {
    padding-right: 3rem !important;
  }

  .pb-sm-0 {
    padding-bottom: 0 !important;
  }

  .pb-sm-1 {
    padding-bottom: 0.25rem !important;
  }

  .pb-sm-2 {
    padding-bottom: 0.5rem !important;
  }

  .pb-sm-3 {
    padding-bottom: 1rem !important;
  }

  .pb-sm-4 {
    padding-bottom: 1.5rem !important;
  }

  .pb-sm-5 {
    padding-bottom: 3rem !important;
  }

  .ps-sm-0 {
    padding-left: 0 !important;
  }

  .ps-sm-1 {
    padding-left: 0.25rem !important;
  }

  .ps-sm-2 {
    padding-left: 0.5rem !important;
  }

  .ps-sm-3 {
    padding-left: 1rem !important;
  }

  .ps-sm-4 {
    padding-left: 1.5rem !important;
  }

  .ps-sm-5 {
    padding-left: 3rem !important;
  }

  .gap-sm-0 {
    gap: 0 !important;
  }

  .gap-sm-1 {
    gap: 0.25rem !important;
  }

  .gap-sm-2 {
    gap: 0.5rem !important;
  }

  .gap-sm-3 {
    gap: 1rem !important;
  }

  .gap-sm-4 {
    gap: 1.5rem !important;
  }

  .gap-sm-5 {
    gap: 3rem !important;
  }

  .text-sm-start {
    text-align: left !important;
  }

  .text-sm-end {
    text-align: right !important;
  }

  .text-sm-center {
    text-align: center !important;
  }
}

@media (min-width: 768px) {
  .float-md-start {
    float: left !important;
  }

  .float-md-end {
    float: right !important;
  }

  .float-md-none {
    float: none !important;
  }

  .d-md-inline {
    display: inline !important;
  }

  .d-md-inline-block {
    display: inline-block !important;
  }

  .d-md-block {
    display: block !important;
  }

  .d-md-grid {
    display: grid !important;
  }

  .d-md-table {
    display: table !important;
  }

  .d-md-table-row {
    display: table-row !important;
  }

  .d-md-table-cell {
    display: table-cell !important;
  }

  .d-md-flex {
    display: flex !important;
  }

  .d-md-inline-flex {
    display: inline-flex !important;
  }

  .d-md-none {
    display: none !important;
  }

  .flex-md-fill {
    flex: 1 1 auto !important;
  }

  .flex-md-row {
    flex-direction: row !important;
  }

  .flex-md-column {
    flex-direction: column !important;
  }

  .flex-md-row-reverse {
    flex-direction: row-reverse !important;
  }

  .flex-md-column-reverse {
    flex-direction: column-reverse !important;
  }

  .flex-md-grow-0 {
    flex-grow: 0 !important;
  }

  .flex-md-grow-1 {
    flex-grow: 1 !important;
  }

  .flex-md-shrink-0 {
    flex-shrink: 0 !important;
  }

  .flex-md-shrink-1 {
    flex-shrink: 1 !important;
  }

  .flex-md-wrap {
    flex-wrap: wrap !important;
  }

  .flex-md-nowrap {
    flex-wrap: nowrap !important;
  }

  .flex-md-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  .justify-content-md-start {
    justify-content: flex-start !important;
  }

  .justify-content-md-end {
    justify-content: flex-end !important;
  }

  .justify-content-md-center {
    justify-content: center !important;
  }

  .justify-content-md-between {
    justify-content: space-between !important;
  }

  .justify-content-md-around {
    justify-content: space-around !important;
  }

  .justify-content-md-evenly {
    justify-content: space-evenly !important;
  }

  .align-items-md-start {
    align-items: flex-start !important;
  }

  .align-items-md-end {
    align-items: flex-end !important;
  }

  .align-items-md-center {
    align-items: center !important;
  }

  .align-items-md-baseline {
    align-items: baseline !important;
  }

  .align-items-md-stretch {
    align-items: stretch !important;
  }

  .align-content-md-start {
    align-content: flex-start !important;
  }

  .align-content-md-end {
    align-content: flex-end !important;
  }

  .align-content-md-center {
    align-content: center !important;
  }

  .align-content-md-between {
    align-content: space-between !important;
  }

  .align-content-md-around {
    align-content: space-around !important;
  }

  .align-content-md-stretch {
    align-content: stretch !important;
  }

  .align-self-md-auto {
    align-self: auto !important;
  }

  .align-self-md-start {
    align-self: flex-start !important;
  }

  .align-self-md-end {
    align-self: flex-end !important;
  }

  .align-self-md-center {
    align-self: center !important;
  }

  .align-self-md-baseline {
    align-self: baseline !important;
  }

  .align-self-md-stretch {
    align-self: stretch !important;
  }

  .order-md-first {
    order: -1 !important;
  }

  .order-md-0 {
    order: 0 !important;
  }

  .order-md-1 {
    order: 1 !important;
  }

  .order-md-2 {
    order: 2 !important;
  }

  .order-md-3 {
    order: 3 !important;
  }

  .order-md-4 {
    order: 4 !important;
  }

  .order-md-5 {
    order: 5 !important;
  }

  .order-md-last {
    order: 6 !important;
  }

  .m-md-0 {
    margin: 0 !important;
  }

  .m-md-1 {
    margin: 0.25rem !important;
  }

  .m-md-2 {
    margin: 0.5rem !important;
  }

  .m-md-3 {
    margin: 1rem !important;
  }

  .m-md-4 {
    margin: 1.5rem !important;
  }

  .m-md-5 {
    margin: 3rem !important;
  }

  .m-md-auto {
    margin: auto !important;
  }

  .mx-md-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }

  .mx-md-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }

  .mx-md-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }

  .mx-md-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }

  .mx-md-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }

  .mx-md-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }

  .mx-md-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }

  .my-md-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .my-md-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .my-md-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  .my-md-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  .my-md-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }

  .my-md-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }

  .my-md-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }

  .mt-md-0 {
    margin-top: 0 !important;
  }

  .mt-md-1 {
    margin-top: 0.25rem !important;
  }

  .mt-md-2 {
    margin-top: 0.5rem !important;
  }

  .mt-md-3 {
    margin-top: 1rem !important;
  }

  .mt-md-4 {
    margin-top: 1.5rem !important;
  }

  .mt-md-5 {
    margin-top: 3rem !important;
  }

  .mt-md-auto {
    margin-top: auto !important;
  }

  .me-md-0 {
    margin-right: 0 !important;
  }

  .me-md-1 {
    margin-right: 0.25rem !important;
  }

  .me-md-2 {
    margin-right: 0.5rem !important;
  }

  .me-md-3 {
    margin-right: 1rem !important;
  }

  .me-md-4 {
    margin-right: 1.5rem !important;
  }

  .me-md-5 {
    margin-right: 3rem !important;
  }

  .me-md-auto {
    margin-right: auto !important;
  }

  .mb-md-0 {
    margin-bottom: 0 !important;
  }

  .mb-md-1 {
    margin-bottom: 0.25rem !important;
  }

  .mb-md-2 {
    margin-bottom: 0.5rem !important;
  }

  .mb-md-3 {
    margin-bottom: 1rem !important;
  }

  .mb-md-4 {
    margin-bottom: 1.5rem !important;
  }

  .mb-md-5 {
    margin-bottom: 3rem !important;
  }

  .mb-md-auto {
    margin-bottom: auto !important;
  }

  .ms-md-0 {
    margin-left: 0 !important;
  }

  .ms-md-1 {
    margin-left: 0.25rem !important;
  }

  .ms-md-2 {
    margin-left: 0.5rem !important;
  }

  .ms-md-3 {
    margin-left: 1rem !important;
  }

  .ms-md-4 {
    margin-left: 1.5rem !important;
  }

  .ms-md-5 {
    margin-left: 3rem !important;
  }

  .ms-md-auto {
    margin-left: auto !important;
  }

  .p-md-0 {
    padding: 0 !important;
  }

  .p-md-1 {
    padding: 0.25rem !important;
  }

  .p-md-2 {
    padding: 0.5rem !important;
  }

  .p-md-3 {
    padding: 1rem !important;
  }

  .p-md-4 {
    padding: 1.5rem !important;
  }

  .p-md-5 {
    padding: 3rem !important;
  }

  .px-md-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }

  .px-md-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }

  .px-md-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }

  .px-md-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }

  .px-md-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .px-md-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }

  .py-md-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .py-md-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }

  .py-md-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }

  .py-md-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .py-md-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }

  .py-md-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }

  .pt-md-0 {
    padding-top: 0 !important;
  }

  .pt-md-1 {
    padding-top: 0.25rem !important;
  }

  .pt-md-2 {
    padding-top: 0.5rem !important;
  }

  .pt-md-3 {
    padding-top: 1rem !important;
  }

  .pt-md-4 {
    padding-top: 1.5rem !important;
  }

  .pt-md-5 {
    padding-top: 3rem !important;
  }

  .pe-md-0 {
    padding-right: 0 !important;
  }

  .pe-md-1 {
    padding-right: 0.25rem !important;
  }

  .pe-md-2 {
    padding-right: 0.5rem !important;
  }

  .pe-md-3 {
    padding-right: 1rem !important;
  }

  .pe-md-4 {
    padding-right: 1.5rem !important;
  }

  .pe-md-5 {
    padding-right: 3rem !important;
  }

  .pb-md-0 {
    padding-bottom: 0 !important;
  }

  .pb-md-1 {
    padding-bottom: 0.25rem !important;
  }

  .pb-md-2 {
    padding-bottom: 0.5rem !important;
  }

  .pb-md-3 {
    padding-bottom: 1rem !important;
  }

  .pb-md-4 {
    padding-bottom: 1.5rem !important;
  }

  .pb-md-5 {
    padding-bottom: 3rem !important;
  }

  .ps-md-0 {
    padding-left: 0 !important;
  }

  .ps-md-1 {
    padding-left: 0.25rem !important;
  }

  .ps-md-2 {
    padding-left: 0.5rem !important;
  }

  .ps-md-3 {
    padding-left: 1rem !important;
  }

  .ps-md-4 {
    padding-left: 1.5rem !important;
  }

  .ps-md-5 {
    padding-left: 3rem !important;
  }

  .gap-md-0 {
    gap: 0 !important;
  }

  .gap-md-1 {
    gap: 0.25rem !important;
  }

  .gap-md-2 {
    gap: 0.5rem !important;
  }

  .gap-md-3 {
    gap: 1rem !important;
  }

  .gap-md-4 {
    gap: 1.5rem !important;
  }

  .gap-md-5 {
    gap: 3rem !important;
  }

  .text-md-start {
    text-align: left !important;
  }

  .text-md-end {
    text-align: right !important;
  }

  .text-md-center {
    text-align: center !important;
  }
}

@media (min-width: 992px) {
  .float-lg-start {
    float: left !important;
  }

  .float-lg-end {
    float: right !important;
  }

  .float-lg-none {
    float: none !important;
  }

  .d-lg-inline {
    display: inline !important;
  }

  .d-lg-inline-block {
    display: inline-block !important;
  }

  .d-lg-block {
    display: block !important;
  }

  .d-lg-grid {
    display: grid !important;
  }

  .d-lg-table {
    display: table !important;
  }

  .d-lg-table-row {
    display: table-row !important;
  }

  .d-lg-table-cell {
    display: table-cell !important;
  }

  .d-lg-flex {
    display: flex !important;
  }

  .d-lg-inline-flex {
    display: inline-flex !important;
  }

  .d-lg-none {
    display: none !important;
  }

  .flex-lg-fill {
    flex: 1 1 auto !important;
  }

  .flex-lg-row {
    flex-direction: row !important;
  }

  .flex-lg-column {
    flex-direction: column !important;
  }

  .flex-lg-row-reverse {
    flex-direction: row-reverse !important;
  }

  .flex-lg-column-reverse {
    flex-direction: column-reverse !important;
  }

  .flex-lg-grow-0 {
    flex-grow: 0 !important;
  }

  .flex-lg-grow-1 {
    flex-grow: 1 !important;
  }

  .flex-lg-shrink-0 {
    flex-shrink: 0 !important;
  }

  .flex-lg-shrink-1 {
    flex-shrink: 1 !important;
  }

  .flex-lg-wrap {
    flex-wrap: wrap !important;
  }

  .flex-lg-nowrap {
    flex-wrap: nowrap !important;
  }

  .flex-lg-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  .justify-content-lg-start {
    justify-content: flex-start !important;
  }

  .justify-content-lg-end {
    justify-content: flex-end !important;
  }

  .justify-content-lg-center {
    justify-content: center !important;
  }

  .justify-content-lg-between {
    justify-content: space-between !important;
  }

  .justify-content-lg-around {
    justify-content: space-around !important;
  }

  .justify-content-lg-evenly {
    justify-content: space-evenly !important;
  }

  .align-items-lg-start {
    align-items: flex-start !important;
  }

  .align-items-lg-end {
    align-items: flex-end !important;
  }

  .align-items-lg-center {
    align-items: center !important;
  }

  .align-items-lg-baseline {
    align-items: baseline !important;
  }

  .align-items-lg-stretch {
    align-items: stretch !important;
  }

  .align-content-lg-start {
    align-content: flex-start !important;
  }

  .align-content-lg-end {
    align-content: flex-end !important;
  }

  .align-content-lg-center {
    align-content: center !important;
  }

  .align-content-lg-between {
    align-content: space-between !important;
  }

  .align-content-lg-around {
    align-content: space-around !important;
  }

  .align-content-lg-stretch {
    align-content: stretch !important;
  }

  .align-self-lg-auto {
    align-self: auto !important;
  }

  .align-self-lg-start {
    align-self: flex-start !important;
  }

  .align-self-lg-end {
    align-self: flex-end !important;
  }

  .align-self-lg-center {
    align-self: center !important;
  }

  .align-self-lg-baseline {
    align-self: baseline !important;
  }

  .align-self-lg-stretch {
    align-self: stretch !important;
  }

  .order-lg-first {
    order: -1 !important;
  }

  .order-lg-0 {
    order: 0 !important;
  }

  .order-lg-1 {
    order: 1 !important;
  }

  .order-lg-2 {
    order: 2 !important;
  }

  .order-lg-3 {
    order: 3 !important;
  }

  .order-lg-4 {
    order: 4 !important;
  }

  .order-lg-5 {
    order: 5 !important;
  }

  .order-lg-last {
    order: 6 !important;
  }

  .m-lg-0 {
    margin: 0 !important;
  }

  .m-lg-1 {
    margin: 0.25rem !important;
  }

  .m-lg-2 {
    margin: 0.5rem !important;
  }

  .m-lg-3 {
    margin: 1rem !important;
  }

  .m-lg-4 {
    margin: 1.5rem !important;
  }

  .m-lg-5 {
    margin: 3rem !important;
  }

  .m-lg-auto {
    margin: auto !important;
  }

  .mx-lg-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }

  .mx-lg-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }

  .mx-lg-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }

  .mx-lg-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }

  .mx-lg-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }

  .mx-lg-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }

  .mx-lg-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }

  .my-lg-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .my-lg-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .my-lg-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  .my-lg-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  .my-lg-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }

  .my-lg-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }

  .my-lg-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }

  .mt-lg-0 {
    margin-top: 0 !important;
  }

  .mt-lg-1 {
    margin-top: 0.25rem !important;
  }

  .mt-lg-2 {
    margin-top: 0.5rem !important;
  }

  .mt-lg-3 {
    margin-top: 1rem !important;
  }

  .mt-lg-4 {
    margin-top: 1.5rem !important;
  }

  .mt-lg-5 {
    margin-top: 3rem !important;
  }

  .mt-lg-auto {
    margin-top: auto !important;
  }

  .me-lg-0 {
    margin-right: 0 !important;
  }

  .me-lg-1 {
    margin-right: 0.25rem !important;
  }

  .me-lg-2 {
    margin-right: 0.5rem !important;
  }

  .me-lg-3 {
    margin-right: 1rem !important;
  }

  .me-lg-4 {
    margin-right: 1.5rem !important;
  }

  .me-lg-5 {
    margin-right: 3rem !important;
  }

  .me-lg-auto {
    margin-right: auto !important;
  }

  .mb-lg-0 {
    margin-bottom: 0 !important;
  }

  .mb-lg-1 {
    margin-bottom: 0.25rem !important;
  }

  .mb-lg-2 {
    margin-bottom: 0.5rem !important;
  }

  .mb-lg-3 {
    margin-bottom: 1rem !important;
  }

  .mb-lg-4 {
    margin-bottom: 1.5rem !important;
  }

  .mb-lg-5 {
    margin-bottom: 3rem !important;
  }

  .mb-lg-auto {
    margin-bottom: auto !important;
  }

  .ms-lg-0 {
    margin-left: 0 !important;
  }

  .ms-lg-1 {
    margin-left: 0.25rem !important;
  }

  .ms-lg-2 {
    margin-left: 0.5rem !important;
  }

  .ms-lg-3 {
    margin-left: 1rem !important;
  }

  .ms-lg-4 {
    margin-left: 1.5rem !important;
  }

  .ms-lg-5 {
    margin-left: 3rem !important;
  }

  .ms-lg-auto {
    margin-left: auto !important;
  }

  .p-lg-0 {
    padding: 0 !important;
  }

  .p-lg-1 {
    padding: 0.25rem !important;
  }

  .p-lg-2 {
    padding: 0.5rem !important;
  }

  .p-lg-3 {
    padding: 1rem !important;
  }

  .p-lg-4 {
    padding: 1.5rem !important;
  }

  .p-lg-5 {
    padding: 3rem !important;
  }

  .px-lg-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }

  .px-lg-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }

  .px-lg-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }

  .px-lg-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }

  .px-lg-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .px-lg-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }

  .py-lg-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .py-lg-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }

  .py-lg-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }

  .py-lg-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .py-lg-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }

  .py-lg-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }

  .pt-lg-0 {
    padding-top: 0 !important;
  }

  .pt-lg-1 {
    padding-top: 0.25rem !important;
  }

  .pt-lg-2 {
    padding-top: 0.5rem !important;
  }

  .pt-lg-3 {
    padding-top: 1rem !important;
  }

  .pt-lg-4 {
    padding-top: 1.5rem !important;
  }

  .pt-lg-5 {
    padding-top: 3rem !important;
  }

  .pe-lg-0 {
    padding-right: 0 !important;
  }

  .pe-lg-1 {
    padding-right: 0.25rem !important;
  }

  .pe-lg-2 {
    padding-right: 0.5rem !important;
  }

  .pe-lg-3 {
    padding-right: 1rem !important;
  }

  .pe-lg-4 {
    padding-right: 1.5rem !important;
  }

  .pe-lg-5 {
    padding-right: 3rem !important;
  }

  .pb-lg-0 {
    padding-bottom: 0 !important;
  }

  .pb-lg-1 {
    padding-bottom: 0.25rem !important;
  }

  .pb-lg-2 {
    padding-bottom: 0.5rem !important;
  }

  .pb-lg-3 {
    padding-bottom: 1rem !important;
  }

  .pb-lg-4 {
    padding-bottom: 1.5rem !important;
  }

  .pb-lg-5 {
    padding-bottom: 3rem !important;
  }

  .ps-lg-0 {
    padding-left: 0 !important;
  }

  .ps-lg-1 {
    padding-left: 0.25rem !important;
  }

  .ps-lg-2 {
    padding-left: 0.5rem !important;
  }

  .ps-lg-3 {
    padding-left: 1rem !important;
  }

  .ps-lg-4 {
    padding-left: 1.5rem !important;
  }

  .ps-lg-5 {
    padding-left: 3rem !important;
  }

  .gap-lg-0 {
    gap: 0 !important;
  }

  .gap-lg-1 {
    gap: 0.25rem !important;
  }

  .gap-lg-2 {
    gap: 0.5rem !important;
  }

  .gap-lg-3 {
    gap: 1rem !important;
  }

  .gap-lg-4 {
    gap: 1.5rem !important;
  }

  .gap-lg-5 {
    gap: 3rem !important;
  }

  .text-lg-start {
    text-align: left !important;
  }

  .text-lg-end {
    text-align: right !important;
  }

  .text-lg-center {
    text-align: center !important;
  }
}

@media (min-width: 1200px) {
  .float-xl-start {
    float: left !important;
  }

  .float-xl-end {
    float: right !important;
  }

  .float-xl-none {
    float: none !important;
  }

  .d-xl-inline {
    display: inline !important;
  }

  .d-xl-inline-block {
    display: inline-block !important;
  }

  .d-xl-block {
    display: block !important;
  }

  .d-xl-grid {
    display: grid !important;
  }

  .d-xl-table {
    display: table !important;
  }

  .d-xl-table-row {
    display: table-row !important;
  }

  .d-xl-table-cell {
    display: table-cell !important;
  }

  .d-xl-flex {
    display: flex !important;
  }

  .d-xl-inline-flex {
    display: inline-flex !important;
  }

  .d-xl-none {
    display: none !important;
  }

  .flex-xl-fill {
    flex: 1 1 auto !important;
  }

  .flex-xl-row {
    flex-direction: row !important;
  }

  .flex-xl-column {
    flex-direction: column !important;
  }

  .flex-xl-row-reverse {
    flex-direction: row-reverse !important;
  }

  .flex-xl-column-reverse {
    flex-direction: column-reverse !important;
  }

  .flex-xl-grow-0 {
    flex-grow: 0 !important;
  }

  .flex-xl-grow-1 {
    flex-grow: 1 !important;
  }

  .flex-xl-shrink-0 {
    flex-shrink: 0 !important;
  }

  .flex-xl-shrink-1 {
    flex-shrink: 1 !important;
  }

  .flex-xl-wrap {
    flex-wrap: wrap !important;
  }

  .flex-xl-nowrap {
    flex-wrap: nowrap !important;
  }

  .flex-xl-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  .justify-content-xl-start {
    justify-content: flex-start !important;
  }

  .justify-content-xl-end {
    justify-content: flex-end !important;
  }

  .justify-content-xl-center {
    justify-content: center !important;
  }

  .justify-content-xl-between {
    justify-content: space-between !important;
  }

  .justify-content-xl-around {
    justify-content: space-around !important;
  }

  .justify-content-xl-evenly {
    justify-content: space-evenly !important;
  }

  .align-items-xl-start {
    align-items: flex-start !important;
  }

  .align-items-xl-end {
    align-items: flex-end !important;
  }

  .align-items-xl-center {
    align-items: center !important;
  }

  .align-items-xl-baseline {
    align-items: baseline !important;
  }

  .align-items-xl-stretch {
    align-items: stretch !important;
  }

  .align-content-xl-start {
    align-content: flex-start !important;
  }

  .align-content-xl-end {
    align-content: flex-end !important;
  }

  .align-content-xl-center {
    align-content: center !important;
  }

  .align-content-xl-between {
    align-content: space-between !important;
  }

  .align-content-xl-around {
    align-content: space-around !important;
  }

  .align-content-xl-stretch {
    align-content: stretch !important;
  }

  .align-self-xl-auto {
    align-self: auto !important;
  }

  .align-self-xl-start {
    align-self: flex-start !important;
  }

  .align-self-xl-end {
    align-self: flex-end !important;
  }

  .align-self-xl-center {
    align-self: center !important;
  }

  .align-self-xl-baseline {
    align-self: baseline !important;
  }

  .align-self-xl-stretch {
    align-self: stretch !important;
  }

  .order-xl-first {
    order: -1 !important;
  }

  .order-xl-0 {
    order: 0 !important;
  }

  .order-xl-1 {
    order: 1 !important;
  }

  .order-xl-2 {
    order: 2 !important;
  }

  .order-xl-3 {
    order: 3 !important;
  }

  .order-xl-4 {
    order: 4 !important;
  }

  .order-xl-5 {
    order: 5 !important;
  }

  .order-xl-last {
    order: 6 !important;
  }

  .m-xl-0 {
    margin: 0 !important;
  }

  .m-xl-1 {
    margin: 0.25rem !important;
  }

  .m-xl-2 {
    margin: 0.5rem !important;
  }

  .m-xl-3 {
    margin: 1rem !important;
  }

  .m-xl-4 {
    margin: 1.5rem !important;
  }

  .m-xl-5 {
    margin: 3rem !important;
  }

  .m-xl-auto {
    margin: auto !important;
  }

  .mx-xl-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }

  .mx-xl-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }

  .mx-xl-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }

  .mx-xl-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }

  .mx-xl-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }

  .mx-xl-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }

  .mx-xl-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }

  .my-xl-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .my-xl-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .my-xl-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  .my-xl-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  .my-xl-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }

  .my-xl-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }

  .my-xl-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }

  .mt-xl-0 {
    margin-top: 0 !important;
  }

  .mt-xl-1 {
    margin-top: 0.25rem !important;
  }

  .mt-xl-2 {
    margin-top: 0.5rem !important;
  }

  .mt-xl-3 {
    margin-top: 1rem !important;
  }

  .mt-xl-4 {
    margin-top: 1.5rem !important;
  }

  .mt-xl-5 {
    margin-top: 3rem !important;
  }

  .mt-xl-auto {
    margin-top: auto !important;
  }

  .me-xl-0 {
    margin-right: 0 !important;
  }

  .me-xl-1 {
    margin-right: 0.25rem !important;
  }

  .me-xl-2 {
    margin-right: 0.5rem !important;
  }

  .me-xl-3 {
    margin-right: 1rem !important;
  }

  .me-xl-4 {
    margin-right: 1.5rem !important;
  }

  .me-xl-5 {
    margin-right: 3rem !important;
  }

  .me-xl-auto {
    margin-right: auto !important;
  }

  .mb-xl-0 {
    margin-bottom: 0 !important;
  }

  .mb-xl-1 {
    margin-bottom: 0.25rem !important;
  }

  .mb-xl-2 {
    margin-bottom: 0.5rem !important;
  }

  .mb-xl-3 {
    margin-bottom: 1rem !important;
  }

  .mb-xl-4 {
    margin-bottom: 1.5rem !important;
  }

  .mb-xl-5 {
    margin-bottom: 3rem !important;
  }

  .mb-xl-auto {
    margin-bottom: auto !important;
  }

  .ms-xl-0 {
    margin-left: 0 !important;
  }

  .ms-xl-1 {
    margin-left: 0.25rem !important;
  }

  .ms-xl-2 {
    margin-left: 0.5rem !important;
  }

  .ms-xl-3 {
    margin-left: 1rem !important;
  }

  .ms-xl-4 {
    margin-left: 1.5rem !important;
  }

  .ms-xl-5 {
    margin-left: 3rem !important;
  }

  .ms-xl-auto {
    margin-left: auto !important;
  }

  .p-xl-0 {
    padding: 0 !important;
  }

  .p-xl-1 {
    padding: 0.25rem !important;
  }

  .p-xl-2 {
    padding: 0.5rem !important;
  }

  .p-xl-3 {
    padding: 1rem !important;
  }

  .p-xl-4 {
    padding: 1.5rem !important;
  }

  .p-xl-5 {
    padding: 3rem !important;
  }

  .px-xl-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }

  .px-xl-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }

  .px-xl-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }

  .px-xl-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }

  .px-xl-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .px-xl-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }

  .py-xl-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .py-xl-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }

  .py-xl-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }

  .py-xl-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .py-xl-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }

  .py-xl-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }

  .pt-xl-0 {
    padding-top: 0 !important;
  }

  .pt-xl-1 {
    padding-top: 0.25rem !important;
  }

  .pt-xl-2 {
    padding-top: 0.5rem !important;
  }

  .pt-xl-3 {
    padding-top: 1rem !important;
  }

  .pt-xl-4 {
    padding-top: 1.5rem !important;
  }

  .pt-xl-5 {
    padding-top: 3rem !important;
  }

  .pe-xl-0 {
    padding-right: 0 !important;
  }

  .pe-xl-1 {
    padding-right: 0.25rem !important;
  }

  .pe-xl-2 {
    padding-right: 0.5rem !important;
  }

  .pe-xl-3 {
    padding-right: 1rem !important;
  }

  .pe-xl-4 {
    padding-right: 1.5rem !important;
  }

  .pe-xl-5 {
    padding-right: 3rem !important;
  }

  .pb-xl-0 {
    padding-bottom: 0 !important;
  }

  .pb-xl-1 {
    padding-bottom: 0.25rem !important;
  }

  .pb-xl-2 {
    padding-bottom: 0.5rem !important;
  }

  .pb-xl-3 {
    padding-bottom: 1rem !important;
  }

  .pb-xl-4 {
    padding-bottom: 1.5rem !important;
  }

  .pb-xl-5 {
    padding-bottom: 3rem !important;
  }

  .ps-xl-0 {
    padding-left: 0 !important;
  }

  .ps-xl-1 {
    padding-left: 0.25rem !important;
  }

  .ps-xl-2 {
    padding-left: 0.5rem !important;
  }

  .ps-xl-3 {
    padding-left: 1rem !important;
  }

  .ps-xl-4 {
    padding-left: 1.5rem !important;
  }

  .ps-xl-5 {
    padding-left: 3rem !important;
  }

  .gap-xl-0 {
    gap: 0 !important;
  }

  .gap-xl-1 {
    gap: 0.25rem !important;
  }

  .gap-xl-2 {
    gap: 0.5rem !important;
  }

  .gap-xl-3 {
    gap: 1rem !important;
  }

  .gap-xl-4 {
    gap: 1.5rem !important;
  }

  .gap-xl-5 {
    gap: 3rem !important;
  }

  .text-xl-start {
    text-align: left !important;
  }

  .text-xl-end {
    text-align: right !important;
  }

  .text-xl-center {
    text-align: center !important;
  }
}

@media (min-width: 1400px) {
  .float-xxl-start {
    float: left !important;
  }

  .float-xxl-end {
    float: right !important;
  }

  .float-xxl-none {
    float: none !important;
  }

  .d-xxl-inline {
    display: inline !important;
  }

  .d-xxl-inline-block {
    display: inline-block !important;
  }

  .d-xxl-block {
    display: block !important;
  }

  .d-xxl-grid {
    display: grid !important;
  }

  .d-xxl-table {
    display: table !important;
  }

  .d-xxl-table-row {
    display: table-row !important;
  }

  .d-xxl-table-cell {
    display: table-cell !important;
  }

  .d-xxl-flex {
    display: flex !important;
  }

  .d-xxl-inline-flex {
    display: inline-flex !important;
  }

  .d-xxl-none {
    display: none !important;
  }

  .flex-xxl-fill {
    flex: 1 1 auto !important;
  }

  .flex-xxl-row {
    flex-direction: row !important;
  }

  .flex-xxl-column {
    flex-direction: column !important;
  }

  .flex-xxl-row-reverse {
    flex-direction: row-reverse !important;
  }

  .flex-xxl-column-reverse {
    flex-direction: column-reverse !important;
  }

  .flex-xxl-grow-0 {
    flex-grow: 0 !important;
  }

  .flex-xxl-grow-1 {
    flex-grow: 1 !important;
  }

  .flex-xxl-shrink-0 {
    flex-shrink: 0 !important;
  }

  .flex-xxl-shrink-1 {
    flex-shrink: 1 !important;
  }

  .flex-xxl-wrap {
    flex-wrap: wrap !important;
  }

  .flex-xxl-nowrap {
    flex-wrap: nowrap !important;
  }

  .flex-xxl-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  .justify-content-xxl-start {
    justify-content: flex-start !important;
  }

  .justify-content-xxl-end {
    justify-content: flex-end !important;
  }

  .justify-content-xxl-center {
    justify-content: center !important;
  }

  .justify-content-xxl-between {
    justify-content: space-between !important;
  }

  .justify-content-xxl-around {
    justify-content: space-around !important;
  }

  .justify-content-xxl-evenly {
    justify-content: space-evenly !important;
  }

  .align-items-xxl-start {
    align-items: flex-start !important;
  }

  .align-items-xxl-end {
    align-items: flex-end !important;
  }

  .align-items-xxl-center {
    align-items: center !important;
  }

  .align-items-xxl-baseline {
    align-items: baseline !important;
  }

  .align-items-xxl-stretch {
    align-items: stretch !important;
  }

  .align-content-xxl-start {
    align-content: flex-start !important;
  }

  .align-content-xxl-end {
    align-content: flex-end !important;
  }

  .align-content-xxl-center {
    align-content: center !important;
  }

  .align-content-xxl-between {
    align-content: space-between !important;
  }

  .align-content-xxl-around {
    align-content: space-around !important;
  }

  .align-content-xxl-stretch {
    align-content: stretch !important;
  }

  .align-self-xxl-auto {
    align-self: auto !important;
  }

  .align-self-xxl-start {
    align-self: flex-start !important;
  }

  .align-self-xxl-end {
    align-self: flex-end !important;
  }

  .align-self-xxl-center {
    align-self: center !important;
  }

  .align-self-xxl-baseline {
    align-self: baseline !important;
  }

  .align-self-xxl-stretch {
    align-self: stretch !important;
  }

  .order-xxl-first {
    order: -1 !important;
  }

  .order-xxl-0 {
    order: 0 !important;
  }

  .order-xxl-1 {
    order: 1 !important;
  }

  .order-xxl-2 {
    order: 2 !important;
  }

  .order-xxl-3 {
    order: 3 !important;
  }

  .order-xxl-4 {
    order: 4 !important;
  }

  .order-xxl-5 {
    order: 5 !important;
  }

  .order-xxl-last {
    order: 6 !important;
  }

  .m-xxl-0 {
    margin: 0 !important;
  }

  .m-xxl-1 {
    margin: 0.25rem !important;
  }

  .m-xxl-2 {
    margin: 0.5rem !important;
  }

  .m-xxl-3 {
    margin: 1rem !important;
  }

  .m-xxl-4 {
    margin: 1.5rem !important;
  }

  .m-xxl-5 {
    margin: 3rem !important;
  }

  .m-xxl-auto {
    margin: auto !important;
  }

  .mx-xxl-0 {
    margin-right: 0 !important;
    margin-left: 0 !important;
  }

  .mx-xxl-1 {
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
  }

  .mx-xxl-2 {
    margin-right: 0.5rem !important;
    margin-left: 0.5rem !important;
  }

  .mx-xxl-3 {
    margin-right: 1rem !important;
    margin-left: 1rem !important;
  }

  .mx-xxl-4 {
    margin-right: 1.5rem !important;
    margin-left: 1.5rem !important;
  }

  .mx-xxl-5 {
    margin-right: 3rem !important;
    margin-left: 3rem !important;
  }

  .mx-xxl-auto {
    margin-right: auto !important;
    margin-left: auto !important;
  }

  .my-xxl-0 {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .my-xxl-1 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .my-xxl-2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
  }

  .my-xxl-3 {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }

  .my-xxl-4 {
    margin-top: 1.5rem !important;
    margin-bottom: 1.5rem !important;
  }

  .my-xxl-5 {
    margin-top: 3rem !important;
    margin-bottom: 3rem !important;
  }

  .my-xxl-auto {
    margin-top: auto !important;
    margin-bottom: auto !important;
  }

  .mt-xxl-0 {
    margin-top: 0 !important;
  }

  .mt-xxl-1 {
    margin-top: 0.25rem !important;
  }

  .mt-xxl-2 {
    margin-top: 0.5rem !important;
  }

  .mt-xxl-3 {
    margin-top: 1rem !important;
  }

  .mt-xxl-4 {
    margin-top: 1.5rem !important;
  }

  .mt-xxl-5 {
    margin-top: 3rem !important;
  }

  .mt-xxl-auto {
    margin-top: auto !important;
  }

  .me-xxl-0 {
    margin-right: 0 !important;
  }

  .me-xxl-1 {
    margin-right: 0.25rem !important;
  }

  .me-xxl-2 {
    margin-right: 0.5rem !important;
  }

  .me-xxl-3 {
    margin-right: 1rem !important;
  }

  .me-xxl-4 {
    margin-right: 1.5rem !important;
  }

  .me-xxl-5 {
    margin-right: 3rem !important;
  }

  .me-xxl-auto {
    margin-right: auto !important;
  }

  .mb-xxl-0 {
    margin-bottom: 0 !important;
  }

  .mb-xxl-1 {
    margin-bottom: 0.25rem !important;
  }

  .mb-xxl-2 {
    margin-bottom: 0.5rem !important;
  }

  .mb-xxl-3 {
    margin-bottom: 1rem !important;
  }

  .mb-xxl-4 {
    margin-bottom: 1.5rem !important;
  }

  .mb-xxl-5 {
    margin-bottom: 3rem !important;
  }

  .mb-xxl-auto {
    margin-bottom: auto !important;
  }

  .ms-xxl-0 {
    margin-left: 0 !important;
  }

  .ms-xxl-1 {
    margin-left: 0.25rem !important;
  }

  .ms-xxl-2 {
    margin-left: 0.5rem !important;
  }

  .ms-xxl-3 {
    margin-left: 1rem !important;
  }

  .ms-xxl-4 {
    margin-left: 1.5rem !important;
  }

  .ms-xxl-5 {
    margin-left: 3rem !important;
  }

  .ms-xxl-auto {
    margin-left: auto !important;
  }

  .p-xxl-0 {
    padding: 0 !important;
  }

  .p-xxl-1 {
    padding: 0.25rem !important;
  }

  .p-xxl-2 {
    padding: 0.5rem !important;
  }

  .p-xxl-3 {
    padding: 1rem !important;
  }

  .p-xxl-4 {
    padding: 1.5rem !important;
  }

  .p-xxl-5 {
    padding: 3rem !important;
  }

  .px-xxl-0 {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }

  .px-xxl-1 {
    padding-right: 0.25rem !important;
    padding-left: 0.25rem !important;
  }

  .px-xxl-2 {
    padding-right: 0.5rem !important;
    padding-left: 0.5rem !important;
  }

  .px-xxl-3 {
    padding-right: 1rem !important;
    padding-left: 1rem !important;
  }

  .px-xxl-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .px-xxl-5 {
    padding-right: 3rem !important;
    padding-left: 3rem !important;
  }

  .py-xxl-0 {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .py-xxl-1 {
    padding-top: 0.25rem !important;
    padding-bottom: 0.25rem !important;
  }

  .py-xxl-2 {
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
  }

  .py-xxl-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .py-xxl-4 {
    padding-top: 1.5rem !important;
    padding-bottom: 1.5rem !important;
  }

  .py-xxl-5 {
    padding-top: 3rem !important;
    padding-bottom: 3rem !important;
  }

  .pt-xxl-0 {
    padding-top: 0 !important;
  }

  .pt-xxl-1 {
    padding-top: 0.25rem !important;
  }

  .pt-xxl-2 {
    padding-top: 0.5rem !important;
  }

  .pt-xxl-3 {
    padding-top: 1rem !important;
  }

  .pt-xxl-4 {
    padding-top: 1.5rem !important;
  }

  .pt-xxl-5 {
    padding-top: 3rem !important;
  }

  .pe-xxl-0 {
    padding-right: 0 !important;
  }

  .pe-xxl-1 {
    padding-right: 0.25rem !important;
  }

  .pe-xxl-2 {
    padding-right: 0.5rem !important;
  }

  .pe-xxl-3 {
    padding-right: 1rem !important;
  }

  .pe-xxl-4 {
    padding-right: 1.5rem !important;
  }

  .pe-xxl-5 {
    padding-right: 3rem !important;
  }

  .pb-xxl-0 {
    padding-bottom: 0 !important;
  }

  .pb-xxl-1 {
    padding-bottom: 0.25rem !important;
  }

  .pb-xxl-2 {
    padding-bottom: 0.5rem !important;
  }

  .pb-xxl-3 {
    padding-bottom: 1rem !important;
  }

  .pb-xxl-4 {
    padding-bottom: 1.5rem !important;
  }

  .pb-xxl-5 {
    padding-bottom: 3rem !important;
  }

  .ps-xxl-0 {
    padding-left: 0 !important;
  }

  .ps-xxl-1 {
    padding-left: 0.25rem !important;
  }

  .ps-xxl-2 {
    padding-left: 0.5rem !important;
  }

  .ps-xxl-3 {
    padding-left: 1rem !important;
  }

  .ps-xxl-4 {
    padding-left: 1.5rem !important;
  }

  .ps-xxl-5 {
    padding-left: 3rem !important;
  }

  .gap-xxl-0 {
    gap: 0 !important;
  }

  .gap-xxl-1 {
    gap: 0.25rem !important;
  }

  .gap-xxl-2 {
    gap: 0.5rem !important;
  }

  .gap-xxl-3 {
    gap: 1rem !important;
  }

  .gap-xxl-4 {
    gap: 1.5rem !important;
  }

  .gap-xxl-5 {
    gap: 3rem !important;
  }

  .text-xxl-start {
    text-align: left !important;
  }

  .text-xxl-end {
    text-align: right !important;
  }

  .text-xxl-center {
    text-align: center !important;
  }
}

@media (min-width: 1200px) {
  .fs-1 {
    font-size: 2.5rem !important;
  }

  .fs-2 {
    font-size: 2rem !important;
  }

  .fs-3 {
    font-size: 1.75rem !important;
  }

  .fs-4 {
    font-size: 1.5rem !important;
  }
}

@media print {
  .d-print-inline {
    display: inline !important;
  }

  .d-print-inline-block {
    display: inline-block !important;
  }

  .d-print-block {
    display: block !important;
  }

  .d-print-grid {
    display: grid !important;
  }

  .d-print-table {
    display: table !important;
  }

  .d-print-table-row {
    display: table-row !important;
  }

  .d-print-table-cell {
    display: table-cell !important;
  }

  .d-print-flex {
    display: flex !important;
  }

  .d-print-inline-flex {
    display: inline-flex !important;
  }

  .d-print-none {
    display: none !important;
  }
}

#wrapper {
  overflow-x: hidden;
}

#sidebar-wrapper {
  min-height: 100vh;
  margin-left: -15rem;
  transition: margin 0.25s ease-out;
}

#sidebar-wrapper .sidebar-heading {
  padding: 0.875rem 1.25rem;
  font-size: 1.2rem;
}

#sidebar-wrapper .list-group {
  width: 15rem;
}

#page-content-wrapper {
  min-width: 100vw;
}

body.sb-sidenav-toggled #wrapper #sidebar-wrapper {
  margin-left: 0;
}

@media (min-width: 768px) {
  #sidebar-wrapper {
    margin-left: 0;
  }

  #page-content-wrapper {
    min-width: 0;
    width: 100%;
  }

  body.sb-sidenav-toggled #wrapper #sidebar-wrapper {
    margin-left: -15rem;
  }
}


/* Sidebar section titles */
.sidebar-title {
  font-weight: bold;
  background: #f8f9fa;
  border-left: 3px solid #0d6efd;
}

/* Search box animation */
/* Thay thế các quy tắc cũ bằng các quy tắc này */
.search-collapsible {
  width: 150px;
  transition: width 0.3s ease;
}

.search-collapsible:focus,
.search-collapsible.expanded {
  width: 600px;
}

/* User popup */
.user-menu {
  position: relative;
}

.user-icon {
  font-size: 1.8rem;
  cursor: pointer;
}

.user-popup {
  display: none;
  position: absolute;
  right: 0;
  top: 40px;
  background: #fff;
  border: 1px solid #dee2e6;
  border-radius: 6px;
  padding: 10px;
  width: 150px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
  z-index: 999;
}

.user-popup .big-icon {
  font-size: 2.5rem;
  margin-bottom: 10px;
}

.user-action {
  display: block;
  padding: 5px;
  color: #000;
  text-decoration: none;
}

.user-action:hover {
  background: #f8f9fa;
}


/* Sidebar */
.custom-sidebar {
  background-color: #2C2C2C !important;
  color: #E0E0E0;
}

.custom-sidebar .list-group-item {
  background-color: #2C2C2C;
  color: #E0E0E0;
  border: none;
}

.custom-sidebar .list-group-item:hover {
  background-color: #3A3A3A;
}

/* Content area */
.custom-content {
  background-color: #191A1C;
  min-height: 100vh;
  color: #E0E0E0;
}

/* Navbar */
.custom-navbar {
  background-color: #2C2C2C !important;
  color: #E0E0E0;
}

.custom-navbar .nav-link,
.custom-navbar .navbar-brand {
  color: #E0E0E0 !important;
}

/* Text */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
a {
  color: #E0E0E0;
}

/* Buttons */
.btn-signin {
  background-color: #FF6740;
  color: #fff;
  border: none;
}

.btn-signin:hover {
  background-color: #e55d38;
  color: #fff;
}

.btn-register {
  background-color: #3A3A3A;
  color: #fff;
  border: none;
}

.btn-register:hover {
  background-color: #4A4A4A;
  color: #fff;
}


/* Popup user */
.user-popup {
  transform: scale(1.2);
  /* tăng toàn popup 20% */
  transform-origin: top right;
  /* mở rộng từ góc phải trên */
  background-color: #2C2C2C;
  border: 1px solid #3A3A3A;
  border-radius: 10px;
  padding: 20px;
  color: #E0E0E0;
  min-width: 220px;
  /* popup to hơn mặc định */
}

/* Icon trong popup */
.user-popup .big-icon {
  font-size: 3rem;
  /* tăng kích thước icon lớn hơn (20% so với mặc định 2.5rem) */
  display: block;
  margin: 0 auto 10px auto;
  color: #E0E0E0;
}

/* Chữ Guest */
.user-popup p {
  font-size: 1.2rem;
  /* tăng 20% so với mặc định 1rem */
  font-weight: 500;
  text-align: center;
  margin: 0;
  color: #E0E0E0;
}

/* Action links */
.user-popup .user-action {
  display: block;
  text-align: center;
  margin: 8px 0;
  padding: 8px 0;
  border-radius: 6px;
  font-weight: bold;
  text-decoration: none;
}

.user-popup .user-action:first-of-type {
  background-color: #FF6740;
  color: #fff;
}

.user-popup .user-action:last-of-type {
  background-color: #3A3A3A;
  color: #fff;
}

.profile-banner {
  background-image: url("../assets/default_banner.png");
  background-size: cover;
  background-position: center;
  height: 200px;
}


/* Search popup */
#search-popup {
  background-color: #2C2C2C;
  border: 1px solid #3A3A3A;
  border-radius: 10px;
  padding: 10px;
  color: #E0E0E0;
  min-width: 300px;

  position: absolute;
  top: 100%;
  left: 0;
}

.search-result-item {
  display: flex;
  align-items: center;
  padding: 10px 0;
  border-bottom: 1px solid #3A3A3A;
}

.search-result-item:last-child {
  border-bottom: none;
}

.search-result-cover {
  width: 50px;
  height: 75px;
  object-fit: cover;
  border-radius: 4px;
  margin-right: 10px;
}

.search-result-info {
  flex: 1;
}

.search-result-title {
  font-weight: bold;
  color: #ffffff;
  margin-bottom: 5px;
  text-decoration: none;
}

.search-result-title:hover {
  text-decoration: underline;
  color: #ffc107;
  /* Màu vàng cam cho nổi bật */
}

.search-result-stats {
  font-size: 0.9rem;
  color: #cccccc;
}

.search-result-status {
  display: flex;
  align-items: center;
  color: #cccccc;
}

.status-dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 5px;
  background-color: #999999;
  /* fallback */
}

/* Styling for search result groups */
.search-group-title {
  color: #fff;
  font-weight: bold;
  font-size: 0.9rem;
  margin-top: 15px;
  margin-bottom: 5px;
  padding-left: 5px;
  border-left: 3px solid #6c757d;
}

/* Specific styles for Creator search items */
.search-result-item.creator-item {
  padding: 8px 10px;
}

.search-result-item.creator-item .search-icon {
  font-size: 20px;
  color: #adb5bd;
  margin-right: 10px;
}

.search-result-item.creator-item .search-result-title {
  font-weight: normal;
  color: #E0E0E0;
}

/* Bỏ gạch chân cho tất cả link trong search popup */
.search-result-item {
  text-decoration: none;
}

/* Đảm bảo tiêu đề cũng không bị gạch chân */
.search-result-title {
  text-decoration: none;
}

/* Giữ lại hiệu ứng gạch chân khi di chuột vào */
.search-result-title:hover {
  text-decoration: underline;
}

/* Đảm bảo các mục tìm kiếm creator cũng không bị gạch chân */
.search-result-item.creator-item {
  text-decoration: none;
}

/* Add to existing style.css */
.alert-container .alert {
  margin-bottom: 10px;
}
=== Folder: app\static\flags ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\af.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ar.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\az.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\be.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\bg.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\bn.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ca.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\cs.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\cv.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\da.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\de.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\el.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\en.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\eo.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\es-la.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\es.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\et.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\eu.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\fa.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\fi.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\flags-download.py ---
import os
import requests

# Danh sách iso hợp lệ
VALID_ISO_ALPHA2 = set([
    "af","ax","al","dz","as","ad","ao","ai","aq","ag","ar","am","aw","au","at","az",
    "bs","bh","bd","bb","by","be","bz","bj","bm","bt","bo","bq","ba","bw","bv","br",
    "io","bn","bg","bf","bi","kh","cm","ca","cv","ky","cf","td","cl","cn","cx","cc",
    "co","km","cg","cd","ck","cr","ci","hr","cu","cw","cy","cz","dk","dj","dm","do",
    "ec","eg","sv","gq","er","ee","et","fk","fo","fj","fi","fr","gf","pf","tf","ga",
    "gm","ge","de","gh","gi","gr","gl","gd","gp","gu","gt","gg","gn","gw","gy","ht",
    "hm","va","hn","hk","hu","is","in","id","ir","iq","ie","im","il","it","jm","jp",
    "je","jo","kz","ke","ki","kp","kr","kw","kg","la","lv","lb","ls","lr","ly","li",
    "lt","lu","mo","mk","mg","mw","my","mv","ml","mt","mh","mq","mr","mu","yt","mx",
    "fm","md","mc","mn","me","ms","ma","mz","mm","na","nr","np","nl","nc","nz","ni",
    "ne","ng","nu","nf","mp","no","om","pk","pw","ps","pa","pg","py","pe","ph","pn",
    "pl","pt","pr","qa","re","ro","ru","rw","bl","sh","kn","lc","mf","pm","vc","ws",
    "sm","st","sa","sn","rs","sc","sl","sg","sx","sk","si","sb","so","za","gs","ss",
    "es","lk","sd","sr","sj","se","ch","sy","tw","tj","tz","th","tl","tg","tk","to",
    "tt","tn","tr","tm","tc","tv","ug","ua","ae","gb","us","uy","uz","vu","ve","vn",
    "vg","vi","wf","eh","ye","zm","zw"
])

# mapping langcode -> country ISO alpha-2
lang_to_country = {
    "tr": "tr",
    "hu": "hu",
    "de": "de",
    "es-la": "es",
    "eu": "es",
    "jv": "id",
    "ja-ro": "jp",
    "cs": "cz",
    "da": "dk",
    "sq": "al",
    "be": "by",
    "he": "il",
    "af": "za",
    "tl": "ph",
    "ka": "ge",
    "ko": "kr",
    "te": "in",
    "it": "it",
    "nl": "nl",
    "vi": "vn",
    "ta": "in",
    "zh-ro": "cn",
    "ro": "ro",
    "la": "la",  # 'la' là Latin, không là quốc gia → có thể bỏ
    "ca": "es",
    "mn": "mn",
    "bg": "bg",
    "uk": "ua",
    "zh": "cn",
    "en": "gb",
    "ar": "sa",
    "hr": "hr",
    "th": "th",
    "zh-hk": "hk",
    "bn": "bd",
    "el": "gr",
    "ur": "pk",
    "pl": "pl",
    "lt": "lt",
    "cv": "ru",
    "fr": "fr",
    "eo": "es",  # Esperanto → dùng Spain như fallback?
    "id": "id",
    "et": "ee",
    "pt": "pt",
    "my": "mm",
    "ga": "ie",
    "??": None,
    "az": "az",
    "kk": "kz",
    "ms": "my",
    "sl": "si",
    "ru": "ru",
    "ne": "np",
    "uz": "uz",
    "fa": "ir",
    "ja": "jp",
    "hi": "in",
    "sk": "sk",
    "pt-br": "br",
    "es": "es",
    "sv": "se",
    "no": "no",
    "sr": "rs",
    "ko-ro": "kr",
    "fi": "fi"
}

# Kích thước thử, theo flagcdn API
SIZE_VARIANTS = [
    "16x12",
    "32x24",
    "64x48",
    "w20",
    "w40",
    "w80"
]

output_dir = os.path.dirname(os.path.abspath(__file__))

for lang, country in lang_to_country.items():
    if country is None:
        print(f"⚠️ No mapping for lang '{lang}' — skipping.")
        continue

    iso = country.lower()
    if iso not in VALID_ISO_ALPHA2:
        print(f"⚠️ ISO code '{iso}' invalid or not in list — lang '{lang}'.")
        continue

    success = False
    for size in SIZE_VARIANTS:
        if "x" in size:
            url = f"https://flagcdn.com/{size}/{iso}.png"
        else:  # w20, w40, etc
            url = f"https://flagcdn.com/{size}/{iso}.png"

        filename = os.path.join(output_dir, f"{lang}.png")
        try:
            r = requests.get(url, timeout=5)
            if r.status_code == 200:
                with open(filename, "wb") as f:
                    f.write(r.content)
                print(f"✅ Tải thành công lang '{lang}' (iso '{iso}') với size '{size}' → {filename}")
                success = True
                break
            else:
                print(f"   ❌ {lang}: size '{size}' → {url} trả về status {r.status_code}")
        except Exception as e:
            print(f"   ❌ {lang}: lỗi với url {url}: {e}")
    if not success:
        print(f"❌ Không tìm được ảnh cho lang '{lang}' — thử hết size.")


--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\fr.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ga.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\he.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\hi.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\hr.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\hu.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\id.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\it.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ja-ro.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ja.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\jv.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ka.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\kk.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ko-ro.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ko.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\la.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\lt.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\mn.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ms.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\my.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ne.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\nl.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\no.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\pl.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\pt-br.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\pt.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ro.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ru.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\sk.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\sl.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\sq.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\sr.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\sv.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ta.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\te.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\th.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\tl.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\tr.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\uk.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\ur.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\uz.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\vi.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\zh-hk.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\zh-ro.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\flags\zh.png ---
[Lỗi đọc file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

=== Folder: app\static\js ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\add_to_list.js ---
// mini-demo/app/static/js/add_to_list.js
(function () {
    // Utility: small alert helper (use existing flash/toast if you have one)
    function toast(msg) {
        try {
            // if bootstrap toast exists in your project, you can implement nicer toast
            alert(msg);
        } catch (e) {
            console.log(msg);
        }
    }

    // Elements
    const modalEl = document.getElementById("addToListModal");
    if (!modalEl) return; // modal not present
    const bsModal = new bootstrap.Modal(modalEl);
    const bodyEl = document.getElementById("addToListBody");
    const confirmBtn = document.getElementById("addToListConfirmBtn");
    const createBtn = document.getElementById("createListFromModalBtn");
    const loadingElHtml = `<div class="text-center py-3">Loading lists…</div>`;

    // State per open
    let state = {
        mangaId: null,
        lists: [], // array of {id, name, contains, item_count, description}
        originalContains: {}, // map id -> bool
        checkedMap: {}, // id -> bool (current UI selection)
    };

    // Helper to fetch lists (with contains)
    async function fetchListsForManga(mangaId) {
        const resp = await fetch(`/api/lists?manga_id=${encodeURIComponent(mangaId)}`, {
            credentials: "same-origin",
        });
        if (!resp.ok) throw new Error("Failed to load lists");
        return resp.json();
    }

    // Build rows markup
    function buildListRows(lists) {
        if (!lists || lists.length === 0) {
            return `<div class="text-center text-muted py-3">You don't have any lists yet. Create one to start adding mangas.</div>`;
        }
        const rows = lists.map(l => {
            const checked = l.contains ? "checked" : "";
            return `
          <div class="d-flex align-items-center py-2 border-bottom">
            <div class="form-check me-3">
              <input class="form-check-input add-list-checkbox" data-list-id="${l.id}" type="checkbox" ${checked} id="add_list_cb_${l.id}">
            </div>
            <div class="flex-grow-1">
              <div class="fw-semibold">${escapeHtml(l.name)}</div>
              <div class="small text-muted">${escapeHtml(l.description || '')}</div>
            </div>
            <div class="text-end small text-muted ms-3">
              ${l.item_count} items
            </div>
          </div>
        `;
        });
        return rows.join("\n");
    }

    // escape small function
    function escapeHtml(s) {
        if (!s) return "";
        return s.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;");
    }

    // Open modal entry: call this when user clicks .add-to-list button
    async function openAddToListModal(mangaId) {
        state.mangaId = mangaId;
        bodyEl.innerHTML = loadingElHtml;
        confirmBtn.disabled = true;
        try {
            const data = await fetchListsForManga(mangaId);
            // use only my_lists for modifications
            const lists = data.my_lists || [];
            state.lists = lists;
            state.originalContains = {};
            state.checkedMap = {};
            lists.forEach(l => {
                state.originalContains[l.id] = !!l.contains;
                state.checkedMap[l.id] = !!l.contains;
            });
            bodyEl.innerHTML = buildListRows(lists);

            // attach events to checkboxes
            bodyEl.querySelectorAll(".add-list-checkbox").forEach(cb => {
                cb.addEventListener("change", (ev) => {
                    const id = cb.dataset.listId;
                    state.checkedMap[id] = cb.checked;
                    // enable confirm only if there is any change
                    confirmBtn.disabled = !hasStateChanged();
                });
            });

            confirmBtn.disabled = !hasStateChanged();
            bsModal.show();
        } catch (err) {
            console.error(err);
            bodyEl.innerHTML = `<div class="text-danger text-center py-3">Failed to load lists. Try again later.</div>`;
            confirmBtn.disabled = true;
            bsModal.show();
        }
    }

    // Determine if any check changed
    function hasStateChanged() {
        for (const id in state.checkedMap) {
            if (state.checkedMap[id] !== !!state.originalContains[id]) return true;
        }
        return false;
    }

    // Build arrays to add/remove
    function computeDiffs() {
        const toAdd = [];
        const toRemove = [];
        for (const id in state.checkedMap) {
            const now = !!state.checkedMap[id];
            const before = !!state.originalContains[id];
            if (now && !before) toAdd.push(id);
            if (!now && before) toRemove.push(id);
        }
        return { toAdd, toRemove };
    }

    // Confirm handler: call POST/DELETE per list
    async function confirmHandler() {
        confirmBtn.disabled = true;
        confirmBtn.innerHTML = 'Working...';

        const { toAdd, toRemove } = computeDiffs();
        const promises = [];

        toAdd.forEach(listId => {
            const p = fetch(`/api/lists/${listId}/items`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "same-origin",
                body: JSON.stringify({ "manga_id": state.mangaId }),
            }).then(r => r.json().then(j => ({ ok: r.ok, status: r.status, body: j })));
            promises.push(p);
        });

        toRemove.forEach(listId => {
            const p = fetch(`/api/lists/${listId}/items/${encodeURIComponent(state.mangaId)}`, {
                method: "DELETE",
                credentials: "same-origin",
            }).then(async r => {
                // try parse json body if any
                let body = null;
                try { body = await r.json(); } catch (e) { body = null; }
                return { ok: r.ok, status: r.status, body };
            });
            promises.push(p);
        });

        const results = await Promise.allSettled(promises);
        // summarize
        let added = 0, removed = 0, failed = 0;
        results.forEach((res, idx) => {
            if (res.status !== "fulfilled") {
                failed++;
                return;
            }
            const val = res.value;
            if (!val.ok && val.status >= 400) {
                failed++;
                return;
            }
            // decide whether it was add or remove by index mapping is tricky — use toAdd/toRemove lengths
            // easier: count success by matching val.body.message or status codes
            // but since we don't have mapping here, use simple heuristic:
            // if status 201 or body.success true -> treat as add; if status 200 with message 'not found' -> remove success
            if (val.status === 201 || (val.body && val.body.success)) added++;
            else if (val.status === 200 || val.status === 204) {
                // could be add (200 on already exists) or delete success; attempt to infer from body.message
                if (val.body && val.body.message && val.body.message === "already exists") {
                    // already existed -> treat as add (no increment)
                    // no change to counters
                } else {
                    // treat as remove or generic success
                    removed++;
                }
            } else {
                // fallback count as success
                added++;
            }
        });

        // finalization: reload lists in place if any succeeded to update counts (simple approach)
        if (added > 0 || removed > 0) {
            // optionally refresh UI: emit a custom event or reload parts
            // we will simply reload the page fragment by calling library loader if exists
            if (typeof window.reloadLibraryLists === "function") {
                window.reloadLibraryLists();
            }
        }

        // show summary
        toast(`Done — added: ${added}, removed: ${removed}, failed: ${failed}`);
        confirmBtn.innerHTML = 'Confirm';
        bsModal.hide();
    }

    // Wire confirm / create btn
    confirmBtn.addEventListener("click", confirmHandler);
    createBtn && createBtn.addEventListener("click", (e) => {
        // open new list modal if exists in DOM
        const newListModalEl = document.getElementById("newListModal");
        if (newListModalEl) {
            const newListBs = new bootstrap.Modal(newListModalEl);
            newListBs.show();
            // keep add-modal open logic: you may want to close addToList modal or leave open
        } else {
            // redirect to library page create flow if you prefer
            window.location.href = "/library";
        }
    });

    // Attach click handler to all .add-to-list buttons (delegation)
    document.addEventListener("click", function (e) {
        const target = e.target.closest(".add-to-list");
        if (!target) return;
        e.preventDefault();
        const mangaId = target.dataset.mangaId || target.getAttribute("data-manga-id");
        if (!mangaId) {
            console.warn("add-to-list clicked but manga id missing");
            return;
        }
        // if user not authenticated, the button link likely points to login; let default happen
        // else open modal
        openAddToListModal(mangaId);
    });

    // expose small function for external callers (optional)
    window.openAddToListModal = openAddToListModal;

})();

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\comments.js ---
// app/static/js/comments.js
$(document).ready(function () {
    // Spoiler toggle: click to reveal
    $(document).on('click', '.comment-content.spoiler', function () {
        $(this).toggleClass('revealed');
    });

    // Submit new comment (AJAX) - Dùng click trên button thay vì form submit
    $(document).on('click', '#btn-submit-comment', function (e) {
        const form = $('#comment-add-form');
        const content = $('#comment-content-input').val().trim();
        const is_spoiler_raw = $('#is-spoiler').is(':checked') ? '1' : '0';
        const action = form.attr('action');

        if (!content || content.length < 5) {
            alert('Comment is too short (minimum 5 characters).');
            return;
        }

        console.log('Posting comment...'); // Debug: kiểm tra console

        $.ajax({
            url: action,
            method: 'POST',
            data: {
                content: content,
                is_spoiler: is_spoiler_raw
            },
            dataType: 'json',
            success: function (data) {
                console.log('Success:', data); // Debug
                if (data.success) {
                    const c = data.comment;
                    const newHtml = buildCommentHtml(c);
                    $('#comments-list').prepend(newHtml);
                    $('#comment-content-input').val('');
                    $('#is-spoiler').prop('checked', false);
                    window.location.href = action.replace('/comments', '') + '#comments';
                } else {
                    alert(data.message || 'Error adding comment.');
                }
            },
            error: function (xhr) {
                console.error('Error:', xhr.responseText); // Debug
                let msg = 'Error adding comment.';
                try {
                    msg = JSON.parse(xhr.responseText).message || msg;
                } catch (e) { }
                alert(msg);
            }
        });
    });

    // Sort comments: change window.location to include sort param
    $('#sort-select').change(function () {
        const sort = $(this).val();
        const params = new URLSearchParams(window.location.search);
        params.set('sort', sort);
        params.set('page', '1');
        window.location.search = params.toString();
    });

    // Search comments client-side
    $('#search-comments').on('input', function () {
        const q = $(this).val().toLowerCase();
        $('.comment').each(function () {
            const text = $(this).find('.comment-content').text().toLowerCase();
            $(this).toggle(text.indexOf(q) !== -1);
        });
    });

    // Like/Dislike
    $(document).on('click', '.comment-like, .comment-dislike', function () {
        const btn = $(this);
        const commentId = btn.data('comment-id');
        const isLike = btn.hasClass('comment-like');
        const url = isLike ? `/comment/${commentId}/like` : `/comment/${commentId}/dislike`;

        $.post(url, function (data) {
            if (data.success) {
                const parent = $(`[data-comment-id="${commentId}"]`);
                parent.find('.comment-like span').text(data.like_count);
                parent.find('.comment-dislike span').text(data.dislike_count);
            } else {
                alert(data.message || 'Error processing reaction.');
            }
        }).fail(function (xhr) {
            let m = 'Error processing reaction.';
            try {
                m = JSON.parse(xhr.responseText).message || m;
            } catch (e) { }
            alert(m);
        });
    });

    // Edit comment (convert content area into form)
    $(document).on('click', '.comment-edit', function () {
        const commentId = $(this).data('comment-id');
        const container = $(`[data-comment-id="${commentId}"]`);
        const contentEl = container.find('.comment-content');
        const oldContent = contentEl.text().trim();

        const formHtml = `
            <form class="edit-comment-form">
                <textarea class="form-control mb-2" rows="4">${escapeHtml(oldContent)}</textarea>
                <div class="d-flex">
                    <button class="btn btn-sm btn-primary me-2 save-edit" type="submit">Save</button>
                    <button class="btn btn-sm btn-secondary cancel-edit" type="button">Cancel</button>
                </div>
            </form>
        `;
        contentEl.data('orig', oldContent);
        contentEl.html(formHtml);
    });

    // Cancel edit
    $(document).on('click', '.cancel-edit', function () {
        const container = $(this).closest('.comment');
        const contentEl = container.find('.comment-content');
        const orig = contentEl.data('orig') || '';
        contentEl.html(orig);
    });

    // Save edit (AJAX PUT)
    $(document).on('submit', '.edit-comment-form', function (e) {
        e.preventDefault();
        const form = $(this);
        const newContent = form.find('textarea').val().trim();
        const container = form.closest('.comment');
        const commentId = container.data('comment-id');
        if (!newContent || newContent.length < 5) {
            alert('Comment is too short (min 5 chars).');
            return;
        }
        $.ajax({
            url: `/comment/${commentId}`,
            method: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify({
                content: newContent
            }),
            success: function (data) {
                if (data.success) {
                    container.find('.comment-content').html(escapeHtml(newContent));
                } else {
                    alert(data.message || 'Error updating comment.');
                }
            },
            error: function (xhr) {
                let m = 'Error updating comment.';
                try {
                    m = JSON.parse(xhr.responseText).message || m;
                } catch (e) { }
                alert(m);
            }
        });
    });

    // Delete comment (AJAX DELETE)
    $(document).on('click', '.comment-delete', function () {
        if (!confirm('Are you sure you want to delete this comment?')) return;
        const commentId = $(this).data('comment-id');
        $.ajax({
            url: `/comment/${commentId}`,
            method: 'DELETE',
            success: function (data) {
                if (data.success) {
                    const container = $(`[data-comment-id="${commentId}"]`);
                    container.find('.comment-content').html('<p class="text-muted">[Deleted]</p>');
                    container.find('.comment-actions').empty();
                } else {
                    alert(data.message || 'Error deleting comment.');
                }
            },
            error: function (xhr) {
                let m = 'Error deleting comment.';
                try {
                    m = JSON.parse(xhr.responseText).message || m;
                } catch (e) { }
                alert(m);
            }
        });
    });

    // Report comment (open prompt -> send reason)
    $(document).on('click', '.comment-report', function () {
        const commentId = $(this).data('comment-id');
        const reason = prompt('Please enter the reason for reporting this comment:');
        if (!reason || reason.trim().length < 5) {
            alert('Report reason must be at least 5 characters.');
            return;
        }
        $.post(`/comment/${commentId}/report`, {
            reason: reason.trim()
        }, function (data) {
            if (data.success) {
                alert('Report submitted. Thank you.');
            } else {
                alert(data.message || 'Error submitting report.');
            }
        }).fail(function (xhr) {
            let m = 'Error submitting report.';
            try {
                m = JSON.parse(xhr.responseText).message || m;
            } catch (e) { }
            alert(m);
        });
    });

    // Helper: build comment HTML from returned JSON (for prepend after create)
    function buildCommentHtml(c) {
        const spoilerClass = c.IsSpoiler ? 'spoiler' : '';
        const avatar = c.Avatar ? c.Avatar : '/static/assets/default_avatar.png';
        const created = c.CreatedAt ? new Date(c.CreatedAt).toLocaleString() : '';
        const html = `
        <div class="comment card mb-2" data-comment-id="${c.CommentId}">
            <div class="card-body d-flex">
                <div class="me-3">
                    <img src="${avatar}" class="comment-avatar rounded-circle" width="48" height="48">
                </div>
                <div class="flex-fill">
                    <div class="d-flex align-items-start">
                        <div>
                            <span class="fw-bold">${escapeHtml(c.Username)}</span>
                            <div class="text-muted small">${escapeHtml(created)}</div>
                        </div>
                        <div class="ms-auto comment-actions">
                            <button class="btn btn-sm btn-outline-success comment-like" data-comment-id="${c.CommentId}">👍 <span>${c.LikeCount}</span></button>
                            <button class="btn btn-sm btn-outline-danger comment-dislike" data-comment-id="${c.CommentId}">👎 <span>${c.DislikeCount}</span></button>
                            <button class="btn btn-sm btn-outline-warning comment-report" data-comment-id="${c.CommentId}">Report</button>
                        </div>
                    </div>
                    <div class="comment-content mt-2 ${spoilerClass}">
                        ${escapeHtml(c.Content)}
                    </div>
                </div>
            </div>
        </div>
        `;
        return html;
    }

    // Utility: escape HTML
    function escapeHtml(str) {
        if (!str) return '';
        return String(str)
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\n/g, '<br>');
    }
});
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\library.js ---
document.addEventListener("DOMContentLoaded", function () {
    const myListsContainer = document.getElementById("myListsContainer");
    const followedListsContainer = document.getElementById("followedListsContainer");

    const newListBtn = document.getElementById("newListBtn");
    const newListModal = new bootstrap.Modal(document.getElementById("newListModal"));
    const newListForm = document.getElementById("newListForm");

    const editListModal = new bootstrap.Modal(document.getElementById("editListModal"));
    const editListForm = document.getElementById("editListForm");
    let editListId = null;

    const deleteListModal = new bootstrap.Modal(document.getElementById("deleteListModal"));
    const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    let deleteListId = null;

    // ==== Helpers ====
    function renderCard(l, isOwner) {
        const col = document.createElement("div");
        col.className = "col-md-4";
        col.innerHTML = `
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">${l.name}</h5>
                    <p class="card-text">${l.description || ""}</p>
                    <small class="mb-2">${l.item_count} items • ${l.follower_count} followers</small>
                    <div class="mt-auto d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary view-btn" data-slug="${l.slug}">View</button>
                        ${isOwner ? `
                            <button class="btn btn-sm btn-outline-secondary edit-btn" data-id="${l.id}">Edit</button>
                            <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${l.id}">Delete</button>
                        ` : `
                            <button class="btn btn-sm btn-outline-warning unfollow-btn" data-id="${l.id}">Unfollow</button>
                        `}
                    </div>
                </div>
            </div>
        `;
        return col;
    }

    function loadLists() {
        fetch("/api/lists")
            .then(r => r.json())
            .then(data => {
                myListsContainer.innerHTML = "";
                data.my_lists.forEach(l => {
                    myListsContainer.appendChild(renderCard(l, true));
                });
                followedListsContainer.innerHTML = "";
                data.followed_lists.forEach(l => {
                    followedListsContainer.appendChild(renderCard(l, false));
                });
                bindCardEvents();
            });
    }

    function bindCardEvents() {
        document.querySelectorAll(".edit-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                editListId = btn.dataset.id;
                // fetch list detail
                fetch(`/api/lists/${editListId}`)
                    .then(r => r.json())
                    .then(l => {
                        document.getElementById("editListId").value = l.id;
                        document.getElementById("editListName").value = l.name;
                        document.getElementById("editListDescription").value = l.description || "";
                        document.getElementById("editListVisibility").value = l.visibility;
                        editListModal.show();
                    });
            });
        });

        document.querySelectorAll(".delete-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                deleteListId = btn.dataset.id;
                deleteListModal.show();
            });
        });

        document.querySelectorAll(".unfollow-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                fetch(`/api/lists/${btn.dataset.id}/follow`, { method: "DELETE" })
                    .then(() => loadLists());
            });
        });

        document.querySelectorAll(".view-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                window.location.href = `/api/public/${btn.dataset.slug}`;
            });
        });

    }

    // ==== Create List ====
    newListBtn.addEventListener("click", () => {
        newListForm.reset();
        newListModal.show();
    });

    newListForm.addEventListener("submit", function (e) {
        e.preventDefault();
        const payload = {
            name: document.getElementById("listName").value,
            description: document.getElementById("listDescription").value,
            visibility: document.getElementById("listVisibility").value
        };
        fetch("/api/lists", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(r => {
                if (!r.ok) throw new Error("Create failed");
                return r.json();
            })
            .then(() => {
                newListModal.hide();
                loadLists();
            })
            .catch(err => alert(err));
    });

    // ==== Edit List ====
    editListForm.addEventListener("submit", function (e) {
        e.preventDefault();
        const payload = {
            name: document.getElementById("editListName").value,
            description: document.getElementById("editListDescription").value,
            visibility: document.getElementById("editListVisibility").value
        };
        fetch(`/api/lists/${editListId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(r => {
                if (!r.ok) throw new Error("Update failed");
            })
            .then(() => {
                editListModal.hide();
                loadLists();
            })
            .catch(err => alert(err));
    });

    // ==== Delete List ====
    confirmDeleteBtn.addEventListener("click", () => {
        if (!deleteListId) return;
        fetch(`/api/lists/${deleteListId}`, { method: "DELETE" })
            .then(() => {
                deleteListModal.hide();
                loadLists();
            });
    });

    loadLists();
});

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\list_public.js ---
// list_public.js — handles list detail page behaviour
(() => {
    const ctx = window._LIST_CONTEXT || {};
    if (!ctx.listId) return;

    const listId = ctx.listId;
    const isOwner = ctx.isOwner === true || ctx.isOwner === 'true' || ctx.isOwner === "True";

    const container = document.getElementById('listItemsContainer');
    const sortSelect = document.getElementById('sortSelect');
    const addMangaBtn = document.getElementById('addMangaBtn');
    const addMangaModalEl = document.getElementById('addMangaModal');
    const addMangaModal = addMangaModalEl ? new bootstrap.Modal(addMangaModalEl) : null;
    const addMangaResults = document.getElementById('addMangaResults');
    const addMangaSearch = document.getElementById('addMangaSearch');
    const addMangaConfirmBtn = document.getElementById('addMangaConfirmBtn');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    const confirmDeleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    let confirmDeleteTarget = null; // { type: 'single'|'bulk', ids: [...] }

    let itemsCache = []; // loaded items
    let selectedForAdd = {}; // in search modal
    let selectedForDelete = new Set(); // selected checkboxes on page

    // --- load items from API ---
    async function loadItems() {
        const sort = sortSelect ? sortSelect.value : 'recent';
        const resp = await fetch(`/api/lists/${listId}/items?sort=${encodeURIComponent(sort)}`);
        if (!resp.ok) {
            console.error('Failed to load list items');
            container.innerHTML = '<div class="text-muted p-4">Failed to load items.</div>';
            return;
        }
        const data = await resp.json();
        itemsCache = data.items || [];
        renderItems();
        updateBulkState();
    }

    function renderItems() {
        container.innerHTML = '';
        if (!itemsCache || itemsCache.length === 0) {
            container.innerHTML = '<div class="text-muted p-4">No items in this list yet.</div>';
            return;
        }
        itemsCache.forEach(it => {
            const col = document.createElement('div');
            col.className = 'col-md-3';
            col.innerHTML = `
          <div class="card h-100 manga-card card-pos" data-manga-id="${it.manga_id}">
            <input type="checkbox" class="form-check-input select-checkbox" data-manga-id="${it.manga_id}">
            <img src="${it.cover_url}" class="cover card-img-top" alt="${escapeHtml(it.title)}" onerror="this.src='/static/assets/default_cover.png'">
            <div class="card-body">
              <h6 class="card-title">${escapeHtml(it.title)}</h6>
            </div>
            <div class="card-footer">
              <div class="small text-muted">${formatDate(it.added_at)}</div>
              <div>
                <button class="btn btn-sm btn-outline-light add-to-list-btn">Add to list</button>
                ${isOwner ? `<button class="btn btn-sm btn-danger remove-from-list-btn">Remove</button>` : ``}
              </div>
            </div>
          </div>
        `;
            container.appendChild(col);
        });

        // attach handlers
        container.querySelectorAll('.add-to-list-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const m = e.target.closest('.manga-card').dataset.mangaId;
                // reuse global add-to-list modal if available
                if (typeof window.openAddToListModal === 'function') {
                    window.openAddToListModal(m);
                } else {
                    alert('Add to list not available');
                }
            });
        });

        container.querySelectorAll('.remove-from-list-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const card = e.target.closest('.manga-card');
                const mid = card.dataset.mangaId;
                confirmDeleteTarget = { type: 'single', ids: [mid], element: card };
                document.getElementById('confirmDeleteText').textContent = 'Remove this manga from the list?';
                confirmDeleteModal.show();
            });
        });

        // checkbox selection
        container.querySelectorAll('.select-checkbox').forEach(cb => {
            cb.addEventListener('change', (e) => {
                const id = e.target.dataset.mangaId;
                if (e.target.checked) selectedForDelete.add(id); else selectedForDelete.delete(id);
                updateBulkState();
            });
        });
    }

    function updateBulkState() {
        if (!bulkDeleteBtn) return;
        bulkDeleteBtn.disabled = selectedForDelete.size === 0;
    }

    // --- helpers ---
    function coverUrl(coverId) {
        if (!coverId) return '/static/assets/default_cover.png';
        // cover route is under blueprint 'manga'
        return `/manga/cover/${coverId}/image`;
    }

    function escapeHtml(s) {
        if (!s) return '';
        return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }

    function formatDate(iso) {
        if (!iso) return '';
        try { const d = new Date(iso); return d.toLocaleDateString(); } catch (e) { return ''; }
    }

    // --- sort handler ---
    if (sortSelect) {
        sortSelect.addEventListener('change', () => loadItems());
    }

    // --- Add Manga modal (search) ---
    if (addMangaBtn && addMangaModal) {
        addMangaBtn.addEventListener('click', () => {
            selectedForAdd = {};
            addMangaResults.innerHTML = '<div class="text-muted p-3">Type to search...</div>';
            addMangaSearch.value = '';
            addMangaModal.show();
        });

        // debounce search
        let timer = null;
        addMangaSearch && addMangaSearch.addEventListener('input', (e) => {
            clearTimeout(timer);
            const q = e.target.value.trim();
            if (!q) { addMangaResults.innerHTML = '<div class="text-muted p-3">Type to search...</div>'; return; }
            timer = setTimeout(() => searchManga(q), 300);
        });

        async function searchManga(q) {
            addMangaResults.innerHTML = '<div class="text-center p-3 text-muted">Searching…</div>';
            const resp = await fetch(`/api/search/manga?q=${encodeURIComponent(q)}&limit=24`);
            if (!resp.ok) { addMangaResults.innerHTML = '<div class="text-danger p-3">Search failed.</div>'; return; }
            const data = await resp.json();
            const results = data.results || [];
            if (results.length === 0) { addMangaResults.innerHTML = '<div class="text-muted p-3">No results.</div>'; return; }

            addMangaResults.innerHTML = '';
            results.forEach(r => {
                const col = document.createElement('div');
                col.className = 'col-md-4';
                col.innerHTML = `
            <div class="card h-100 manga-card" data-manga-id="${r.manga_id}">
              <input type="checkbox" class="form-check-input select-search-checkbox" data-manga-id="${r.manga_id}">
              <img src="${coverUrl(r.cover_id)}" class="cover card-img-top" alt="${escapeHtml(r.title)}" onerror="this.src='/static/assets/default_cover.png'">
              <div class="card-body">
                <h6 class="card-title">${escapeHtml(r.title)}</h6>
              </div>
            </div>
          `;
                addMangaResults.appendChild(col);
            });

            // attach checkbox handlers
            addMangaResults.querySelectorAll('.select-search-checkbox').forEach(cb => {
                cb.addEventListener('change', (e) => {
                    const id = e.target.dataset.mangaId;
                    if (e.target.checked) selectedForAdd[id] = true; else delete selectedForAdd[id];
                });
            });
        }

        addMangaConfirmBtn.addEventListener('click', async () => {
            const ids = Object.keys(selectedForAdd);
            if (!ids || ids.length === 0) { alert('Select at least one manga'); return; }
            addMangaConfirmBtn.disabled = true;
            try {
                const promises = ids.map(id => fetch(`/api/lists/${listId}/items`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ manga_id: id })
                }));
                const results = await Promise.all(promises);
                // simple success handling
                const successCount = results.filter(r => r.ok).length;
                alert(`Added ${successCount} / ${ids.length}`);
                addMangaModal.hide();
                loadItems();
            } catch (e) {
                alert('Failed to add');
            } finally {
                addMangaConfirmBtn.disabled = false;
            }
        });
    }

    // --- bulk delete ---
    if (bulkDeleteBtn) {
        bulkDeleteBtn.addEventListener('click', () => {
            if (selectedForDelete.size === 0) return;
            confirmDeleteTarget = { type: 'bulk', ids: Array.from(selectedForDelete) };
            document.getElementById('confirmDeleteText').textContent = `Delete ${selectedForDelete.size} selected items?`;
            confirmDeleteModal.show();
        });
    }

    // confirm delete yes
    document.getElementById('confirmDeleteYes').addEventListener('click', async () => {
        if (!confirmDeleteTarget) return;
        const ids = confirmDeleteTarget.ids || [];
        if (confirmDeleteTarget.type === 'single') {
            // call single delete endpoint
            try {
                const listIdLocal = listId;
                const mid = ids[0];
                const resp = await fetch(`/api/lists/${listIdLocal}/items/${encodeURIComponent(mid)}`, { method: 'DELETE' });
                if (resp.ok) {
                    // remove element from DOM
                    if (confirmDeleteTarget.element) confirmDeleteTarget.element.remove();
                    // refresh items
                    await loadItems();
                } else {
                    alert('Delete failed');
                }
            } catch (e) { alert('Delete failed'); }
        } else {
            // bulk delete via DELETE with body
            try {
                const resp = await fetch(`/api/lists/${listId}/items`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ manga_ids: ids })
                });
                if (resp.ok) {
                    const j = await resp.json();
                    alert(`Removed ${j.removed} items`);
                    selectedForDelete.clear();
                    updateBulkState();
                    loadItems();
                } else {
                    alert('Delete failed');
                }
            } catch (e) {
                alert('Delete failed');
            }
        }
        confirmDeleteModal.hide();
        confirmDeleteTarget = null;
    });

    // single remove from item card can also reuse confirm modal flow. Already wired.
    if (container) {
        container.addEventListener("click", function (e) {
            const card = e.target.closest(".manga-card");
            if (!card) return;

            if (e.target.closest("input, button")) return;

            const mangaId = card.dataset.mangaId;
            if (mangaId) {
                window.location.href = `/manga/${mangaId}`;
            }
        });
    }

    const toggleSelectBtn = document.getElementById('toggleSelectBtn');

    if (toggleSelectBtn) {
        toggleSelectBtn.addEventListener('click', () => {
            const checkboxes = container.querySelectorAll('.select-checkbox');
            const allSelected = Array.from(checkboxes).every(cb => cb.checked);

            checkboxes.forEach(cb => {
                cb.checked = !allSelected;
                const id = cb.dataset.mangaId;
                if (cb.checked) {
                    selectedForDelete.add(id);
                } else {
                    selectedForDelete.delete(id);
                }
            });

            updateBulkState();
            toggleSelectBtn.textContent = allSelected ? 'Select All' : 'Deselect All';
        });
    }

    // initial load
    loadItems();

})();

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\manga_detail.js ---
document.addEventListener('DOMContentLoaded', function () {
    // Header background
    const header = document.querySelector('.manga-detail-header');
    const coverUrl = header.getAttribute('data-cover-url');
    if (coverUrl) {
        header.style.backgroundImage =
            `linear-gradient(to bottom, rgba(0,0,0,0.8), rgba(0,0,0,0.8)), url('${coverUrl}')`;
    }

    // Status dot color
    const statusDot = document.querySelector('.status-dot');
    if (statusDot) {
        const status = statusDot.getAttribute('data-status') || 'Unknown';
        console.log('Status detected:', status);

        switch (status) {
            case "ongoing":
                statusDot.style.backgroundColor = "#00cc00";
                break;
            case "canceled":
                statusDot.style.backgroundColor = "#ff0000";
                break;
            case "hiatus":
                statusDot.style.backgroundColor = "#cc9900";
                break;
            case "completed":
                statusDot.style.backgroundColor = "#0099ff";
                break;
            default:
                statusDot.style.backgroundColor = "#999999";
        }
    }

    // Tabs
    const tabs = document.querySelectorAll('.tab');
    const tabPanes = document.querySelectorAll('.tab-pane');

    tabs.forEach(tab => {
        tab.addEventListener('click', function (e) {
            e.preventDefault();
            tabs.forEach(t => t.classList.remove('active'));
            tabPanes.forEach(p => p.classList.remove('active'));
            this.classList.add('active');
            const paneId = this.getAttribute('data-tab');
            document.getElementById(paneId).classList.add('active');
        });
    });
});


document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll(".manga-tabs .tab");
    const panes = document.querySelectorAll(".tab-pane");

    tabs.forEach(tab => {
        tab.addEventListener("click", function (e) {
            e.preventDefault();

            // active tab
            tabs.forEach(t => t.classList.remove("active"));
            tab.classList.add("active");

            // active pane
            panes.forEach(p => p.classList.remove("active"));
            const targetId = tab.getAttribute("data-tab");
            const pane = document.getElementById(targetId);
            pane.classList.add("active");

            // nếu có data-url (tab Art) → load AJAX
            const url = tab.dataset.url;
            if (url && targetId === "art" && !pane.dataset.loaded) {
                fetch(url)
                    .then(resp => resp.text())
                    .then(html => {
                        pane.innerHTML = html;
                        pane.dataset.loaded = "1"; // đánh dấu đã load
                        initLocaleForm(pane, url);
                    })
                    .catch(err => {
                        pane.innerHTML = `<p class="text-danger">Error loading art.</p>`;
                        console.error(err);
                    });
            }
        });
    });

    // Khởi tạo submit filter form trong art tab
    function initLocaleForm(pane, baseUrl) {
        const form = pane.querySelector("form");
        if (!form) return;
        form.addEventListener("submit", function (e) {
            e.preventDefault();
            const params = new URLSearchParams(new FormData(form));
            fetch(`${baseUrl}?${params.toString()}`)
                .then(resp => resp.text())
                .then(html => {
                    pane.innerHTML = html;
                    initLocaleForm(pane, baseUrl); // gắn lại listener sau khi replace DOM
                });
        });
    }
});

document.addEventListener("DOMContentLoaded", function () {
    const ratingBox = document.querySelector(".your-rating");
    if (!ratingBox) return; // user not authenticated

    const mangaId = ratingBox.dataset.mangaId;
    const select = document.getElementById("user-rating-select");
    const saveBtn = document.getElementById("user-rating-save");
    const removeBtn = document.getElementById("user-rating-remove");
    const msg = document.getElementById("user-rating-msg");

    // Gửi POST khi bấm Save
    saveBtn.addEventListener("click", function () {
        const score = select.value;
        if (!score) {
            msg.textContent = "Please select a score first.";
            msg.style.color = "red";
            return;
        }

        fetch(`/manga/${mangaId}/rating`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
            },
            body: JSON.stringify({ score: parseInt(score) })
        })
            .then((res) => res.json())
            .then((data) => {
                if (data.success) {
                    msg.textContent = "Rating saved!";
                    msg.style.color = "limegreen";
                    removeBtn.style.display = "inline-block";
                } else {
                    msg.textContent = data.message || "Error saving rating.";
                    msg.style.color = "red";
                }
            })
            .catch(() => {
                msg.textContent = "Network error.";
                msg.style.color = "red";
            });
    });

    // Gửi DELETE khi bấm Remove
    removeBtn.addEventListener("click", function () {
        fetch(`/manga/${mangaId}/rating`, {
            method: "DELETE",
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        })
            .then((res) => res.json())
            .then((data) => {
                if (data.success) {
                    msg.textContent = "Rating removed.";
                    msg.style.color = "orange";
                    select.value = "";
                    removeBtn.style.display = "none";
                } else {
                    msg.textContent = data.message || "Error removing rating.";
                    msg.style.color = "red";
                }
            })
            .catch(() => {
                msg.textContent = "Network error.";
                msg.style.color = "red";
            });
    });
});


document.addEventListener('DOMContentLoaded', () => {
    const startBtn = document.getElementById('start-reading');
    if (startBtn) {
        startBtn.addEventListener('click', () => {
            const mangaId = startBtn.dataset.mangaId;
            fetch(`/reader/${mangaId}/available-langs`)
                .then(res => res.json())
                .then(data => {
                    if (data.langs.length === 0) {
                        new bootstrap.Modal(document.getElementById('no-chapter-modal')).show();
                        return;
                    }
                    // Show modal and populate radios
                    const form = document.getElementById('lang-form');
                    form.innerHTML = ''; // Clear
                    data.langs.forEach(lang => {
                        const div = document.createElement('div');
                        div.className = 'form-check';
                        div.innerHTML = `<input class="form-check-input" type="radio" name="lang" id="${lang}" value="${lang}">
                                         <label class="form-check-label" for="${lang}">${lang.toUpperCase()}</label>`;
                        form.appendChild(div);
                    });
                    const modal = new bootstrap.Modal(document.getElementById('lang-modal'));
                    modal.show();

                    document.getElementById('submit-lang').addEventListener('click', () => {
                        const selected = document.querySelector('input[name="lang"]:checked');
                        if (selected) {
                            window.location.href = `/reader/${mangaId}/start?lang=${selected.value}`;
                        }
                    });
                });
        });
    }

    const continueBtn = document.getElementById('continue-reading');
    if (continueBtn) {
        continueBtn.addEventListener('click', () => {
            const mangaId = continueBtn.dataset.mangaId;
            fetch(`/reader/${mangaId}/continue`)
                .then(res => res.json())
                .then(data => {
                    if (data.chapter_id) {
                        window.location.href = `/reader/${mangaId}/${data.chapter_id}`;
                    }
                });
        });
    }

    const continueGuest = document.getElementById('continue-reading-guest');
    if (continueGuest) {
        continueGuest.addEventListener('click', () => {
            new bootstrap.Modal(document.getElementById('login-required-modal')).show();
        });
    }
});
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\reader.js ---
document.addEventListener('DOMContentLoaded', () => {
    const data = JSON.parse(document.getElementById('reader-data').textContent);
    const longStrip = document.getElementById('long-strip');
    const progressBar = document.getElementById('read-progress');
    const loadingSpinner = document.getElementById('loading-spinner');
    const chapterImages = document.getElementById('chapter-images');

    // Show images after load
    loadingSpinner.classList.add('d-none');
    chapterImages.classList.remove('d-none');

    // Scroll progress
    longStrip.addEventListener('scroll', () => {
        const scrollTop = longStrip.scrollTop;
        const scrollHeight = longStrip.scrollHeight - longStrip.clientHeight;
        const progress = (scrollTop / scrollHeight) * 100;
        progressBar.style.width = `${progress}%`;

        if (data.is_authenticated) {
            // Save last page (approx)
            const lastPage = Math.floor((progress / 100) * chapterImages.children.length);
            fetch('/reader/save-history', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ manga_id: data.manga_id, chapter_id: data.chapter_id, last_page })
            });
        }
    });

    // Prev/Next
    document.getElementById('prev-chapter').addEventListener('click', () => {
        fetch(`/reader/${data.manga_id}/prev/${data.chapter_id}?lang=${data.lang}`)
            .then(res => res.json())
            .then(resp => {
                if (resp.chapter_id) {
                    window.location.href = `/reader/${data.manga_id}/${resp.chapter_id}`;
                } else {
                    window.location.href = `/manga/${data.manga_id}`;
                }
            });
    });

    document.getElementById('next-chapter').addEventListener('click', () => {
        fetch(`/reader/${data.manga_id}/next/${data.chapter_id}?lang=${data.lang}`)
            .then(res => res.json())
            .then(resp => {
                if (resp.chapter_id) {
                    window.location.href = `/reader/${data.manga_id}/${resp.chapter_id}`;
                } else {
                    window.location.href = `/manga/${data.manga_id}`;
                }
            });
    });
});
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\static\js\scripts.js ---
/*!
* MangaDex Clone - Custom Scripts
* Dựa trên Start Bootstrap - Simple Sidebar
*/

// Khi DOM load xong
window.addEventListener('DOMContentLoaded', event => {

    // Toggle Sidebar
    const sidebarToggle = document.body.querySelector('#sidebarToggle');
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', event => {
            event.preventDefault();
            document.body.classList.toggle('sb-sidenav-toggled');
            // Lưu trạng thái vào localStorage để giữ khi refresh
            localStorage.setItem(
                'sb|sidebar-toggle',
                document.body.classList.contains('sb-sidenav-toggled')
            );
        });
    }

    // User Popup Toggle
    const userIcon = document.getElementById("userIcon");
    const userPopup = document.getElementById("userPopup");

    if (userIcon && userPopup) {
        // Click icon user -> toggle popup
        userIcon.addEventListener("click", (e) => {
            e.stopPropagation(); // tránh bubble lên document
            userPopup.style.display = (userPopup.style.display === "block") ? "none" : "block";
        });

        // Click ra ngoài -> đóng popup
        document.addEventListener("click", (e) => {
            if (!userPopup.contains(e.target) && !userIcon.contains(e.target)) {
                userPopup.style.display = "none";
            }
        });
    }
});
document.addEventListener("DOMContentLoaded", function () {
    const el = document.getElementById('flash-messages');
    if (!el) return;
    try {
        const messages = JSON.parse(el.textContent || '[]');
        messages.forEach(msg => alert(msg));
    } catch (e) {
        console.error('Failed to parse flash messages', e);
    }
});

document.addEventListener('DOMContentLoaded', function () {
    const modal = new bootstrap.Modal(document.getElementById('add-modal'));
    const modalTitle = document.getElementById('modalLabel');
    const modalBody = document.getElementById('modal-body');

    document.querySelectorAll('.add-to-list').forEach(button => {
        button.addEventListener('click', function (ev) {
            const mangaId = this.dataset.mangaId || this.getAttribute('data-manga-id');

            if (!window.isAuthenticated) {
                modalTitle.textContent = 'Require Login';
                modalBody.innerHTML = `
                    <p class="fs-5 mb-4">You need to sign in to access this feature.</p>
                    <div class="d-flex justify-content-center gap-3">
                        <a href="/login" class="btn btn-signin fw-bold px-4">Sign in</a>
                        <a href="/register" class="btn btn-register fw-bold px-4">Register</a>
                    </div>
                `;
                modal.show();
                return;
            }

            // If a new implementation exists, prefer it:
            if (typeof window.openAddToListModal === 'function') {
                // prevent the old modal from showing
                ev.preventDefault();
                // call the new modal handler (this will show #addToListModal)
                window.openAddToListModal(mangaId);
                return;
            }

            // Fallback: show the old placeholder modal (backwards-compatible)
            modalTitle.textContent = 'Add to List';
            modalBody.innerHTML = '<p>Coming soon. (Empty for now)</p>';
            modal.show();
        });
    });
});



// Debounce function (giữ nguyên)
function debounce(func, delay) {
    let timer;
    return function () {
        clearTimeout(timer);
        timer = setTimeout(func, delay);
    };
}

// Search box event (updated to include Creator search)
document.addEventListener('DOMContentLoaded', function () {
    const searchBox = document.getElementById('searchBox');
    const searchPopup = document.getElementById('search-popup');

    // Thêm logic để đóng popup khi nhấn phím ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === "Escape") {
            searchPopup.style.display = 'none';
        }
    });

    if (searchBox && searchPopup) {
        const performSearch = async () => {
            const query = searchBox.value.trim();

            if (query.length < 2) {
                searchPopup.style.display = 'none';
                return;
            }

            // Đặt chiều rộng của pop-up bằng chiều rộng của search box
            const searchBoxWidth = searchBox.getBoundingClientRect().width;
            searchPopup.style.width = `${searchBoxWidth}px`;

            try {
                // Gửi 2 yêu cầu API song song với Promise.all
                const [mangaResponse, creatorsResponse] = await Promise.all([
                    // SỬA LỖI TẠI ĐÂY: Sử dụng đúng endpoint `/search`
                    fetch(`/search?title=${encodeURIComponent(query)}`),
                    fetch(`/search_creators?query=${encodeURIComponent(query)}`)
                ]);

                if (!mangaResponse.ok || !creatorsResponse.ok) {
                    throw new Error('Network response was not ok');
                }

                const mangaResults = await mangaResponse.json();
                const creatorsResults = await creatorsResponse.json();

                let htmlContent = '';

                // === Phần hiển thị kết quả Manga ===
                if (mangaResults.length > 0) {
                    htmlContent += '<div class="search-group-title">Manga</div>';
                    mangaResults.forEach(r => {
                        htmlContent += `
                            <a href="/manga/${r.id}" class="search-result-item">
                                <img src="${r.cover_url}" alt="${r.title}" class="search-result-cover">
                                <div class="search-result-info">
                                    <span class="search-result-title">${r.title}</span>
                                    <div class="search-result-stats">
                                        ⭐ ${r.rating} | ❤️ ${r.follows}
                                    </div>
                                    <div class="search-result-status">
                                        <span class="status-dot" data-status="${r.status.toLowerCase()}"></span> ${r.status}
                                    </div>
                                </div>
                            </a>
                        `;
                    });
                }

                // === Phần hiển thị kết quả Creator ===
                if (creatorsResults.length > 0) {
                    htmlContent += '<div class="search-group-title">Creators</div>';
                    creatorsResults.forEach(creator => {
                        htmlContent += `
                            <a href="/creator/${creator.creator_id}" class="search-result-item creator-item">
                                <i class="bi bi-person-circle search-icon"></i>
                                <span class="search-result-title">${creator.name}</span>
                            </a>
                        `;
                    });
                }

                // Hiển thị kết quả hoặc thông báo không tìm thấy
                if (htmlContent) {
                    searchPopup.innerHTML = htmlContent;
                    searchPopup.style.display = 'block';

                    // Set status dot colors cho manga
                    document.querySelectorAll('.status-dot').forEach(dot => {
                        let status = dot.getAttribute('data-status').toLowerCase();
                        switch (status) {
                            case "ongoing": dot.style.backgroundColor = "#00cc00"; break;
                            case "canceled": dot.style.backgroundColor = "#ff0000"; break;
                            case "hiatus": dot.style.backgroundColor = "#cc9900"; break;
                            case "completed": dot.style.backgroundColor = "#0099ff"; break;
                            default: dot.style.backgroundColor = "#999999";
                        }
                    });

                } else {
                    searchPopup.innerHTML = '<div class="no-results">Không có kết quả nào.</div>';
                    searchPopup.style.display = 'block';
                }

            } catch (error) {
                console.error('Search failed:', error);
                searchPopup.style.display = 'none';
            }
        };

        // Gắn lại event listener cho searchBox, sử dụng debounce
        searchBox.addEventListener('input', debounce(performSearch, 500));


        searchBox.addEventListener('blur', function () {
            // Chỉ thu nhỏ lại nếu không có chữ bên trong
            if (searchBox.value.trim() === '') {
                searchBox.classList.remove('expanded');
            }
        });

        document.addEventListener('click', function (e) {
            if (!searchBox.contains(e.target) && !searchPopup.contains(e.target)) {
                searchPopup.style.display = 'none';
            }
        });

    }
});
=== Folder: app\templates ===

--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\advanced_search.html ---
{% extends "base.html" %}

{% block title %}Advanced Search | MangaDex Clone{% endblock %}

{% block content %}
<div class="text-center py-5 text-white">
    <h1>Advanced Search</h1>
    <p>No content available yet.</p>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\art.html ---
{% extends "manga_detail.html" %}

{% block tab_content %}
<div class="tab-pane" id="art">
    <p class="text-center text-gray">No content available yet.</p>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\base.html ---
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>{% block title %}MangaDex Clone{% endblock %}</title>
    <!-- Favicon-->
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', filename='assets/favicon.ico') }}" />
    <!-- Bootstrap core CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <!-- Core theme CSS -->
    <link href="{{ url_for('static', filename='css/styles.css') }}" rel="stylesheet" />
    <link rel="stylesheet" href="{{ url_for('static', filename='css/add_to_list.css') }}">

    {% block styles %}{% endblock %}
</head>

<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar-->
        <div class="custom-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading border-bottom"><a href="{{ url_for('main.home') }}"
                    class="text-decoration-none text-white">MangaDex Clone</a></div>
            <div class="list-group list-group-flush">

                <!-- Follows Section -->
                <div class="sidebar-section">
                    <div class="list-group-item sidebar-title">
                        <i class="bi bi-heart"></i> Follows
                    </div>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.updates') }}">Updates</a>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.library') }}">Library</a>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.reading_history') }}">Reading History</a>

                </div>

                <!-- Titles Section -->
                <div class="sidebar-section">
                    <div class="list-group-item sidebar-title">
                        <i class="bi bi-book"></i> Titles
                    </div>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.advanced_search') }}">Advanced Search</a>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.recently_added') }}">Recently Added</a>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.latest_updates') }}">Latest Updates</a>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3"
                        href="{{ url_for('main.random') }}">Random</a>
                </div>

                <!-- MangaDex Section -->
                <div class="sidebar-section">
                    <div class="list-group-item sidebar-title">
                        <i class="bi bi-globe"></i> MangaDex
                    </div>
                    <a class="list-group-item list-group-item-action list-group-item-light p-3" href="#!">About Us</a>
                </div>
            </div>
        </div>

        <!-- Page content wrapper-->
        <div id="page-content-wrapper" class="custom-content">
            <!-- Top navigation-->
            <nav class="navbar navbar-expand-lg border-bottom custom-navbar">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="sidebarToggle">Toggle Menu</button>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation"><span
                            class="navbar-toggler-icon"></span></button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav ms-auto mt-2 mt-lg-0">

                            <!-- Search bar -->
                            <li class="nav-item" style="position: relative;"> <input type="text" id="searchBox"
                                    class="form-control search-collapsible" placeholder="Search manga...">
                                <div id="search-popup" class="user-popup" style="display: none; z-index: 1000;"></div>
                            </li>

                            <!-- User icon popup -->
                            <li class="nav-item ms-3">
                                <div class="user-menu">
                                    <i class="bi bi-person-circle user-icon" id="userIcon"></i>
                                    <div class="user-popup" id="userPopup">
                                        <a
                                            href="{{ url_for('main.profile') if current_user.is_authenticated else url_for('main.require_login') }}">
                                            <i class="bi bi-person-circle big-icon"></i>
                                            <p>{{ current_user.Username if current_user.is_authenticated else "Guest" }}
                                            </p>
                                        </a>
                                        <hr>
                                        {% if not current_user.is_authenticated %}
                                        <a href="{{ url_for('auth.login') }}" class="user-action">Sign in</a>
                                        <a href="{{ url_for('auth.register') }}" class="user-action">Register</a>
                                        {% else %}
                                        <a href="{{ url_for('auth.logout') }}" class="user-action">Logout</a>
                                        {% endif %}
                                    </div>

                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <!-- Page content-->
            <div class="container-fluid">
                {% block content %}
                {% endblock %}
            </div>
        </div>
    </div>
    <!-- Add/Remove to/from Lists modal -->
    <div class="modal fade" id="addToListModal" tabindex="-1" aria-labelledby="addToListLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-md">
            <div class="modal-content text-dark">
                <div class="modal-header">
                    <h5 class="modal-title" id="addToListLabel">Add to your MDLists</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="addToListBody">
                    <!-- content injected by JS -->
                    <div class="text-center py-3" id="addToListLoading">Loading lists…</div>
                </div>
                <div class="modal-footer">
                    <div class="me-auto">
                        <button type="button" class="btn btn-sm btn-outline-secondary"
                            id="createListFromModalBtn">Create new list</button>
                    </div>
                    <button type="button" class="btn btn-secondary" id="addToListCancelBtn"
                        data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="addToListConfirmBtn">Confirm</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Bootstrap core JS-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Core theme JS-->
    <script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
    <script src="{{ url_for('static', filename='js/add_to_list.js') }}"></script>
    {% block scripts %}{% endblock %}


    <!-- Flash messages -->
    {% with messages = get_flashed_messages() %}
    {% if messages %}
    <script type="application/json" id="flash-messages">{{ messages|tojson }}</script>
    {% endif %}
    {% endwith %}

</body>

</html>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\chapters.html ---
<!-- app/templates/chapters.html -->
<div class="tab-pane active" id="chapters">
    <h2>Chapters</h2>
    <ul>
        {% for chapter in chapters %}
        <li>{{ chapter.Title }} - {{ chapter.ChapterNumber }}</li>
        {% endfor %}
    </ul>
</div>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\comments.html ---
{% set mid = manga.MangaId if manga is defined else (manga_id if manga_id is defined else None) %}

<div class="comments-section container-fluid py-3">

    <!-- Debug info -->
    <div class="debug-info mb-3 text-muted">
        <p>Authenticated: {{ is_authenticated }}</p>
        <p>Current User ID: {{ current_user.get_id() if is_authenticated else 'N/A' }}</p>
    </div>

    <!-- Comment form -->
    <div class="comment-form mb-3">
        {% if is_authenticated %}
        <form id="comment-add-form" method="post" action="{{ url_for('comment_bp.add_comment', manga_id=mid) }}">
            <div class="d-flex">
                <div class="me-2">
                    <img src="{{ current_user.Avatar if current_user and current_user.Avatar else url_for('static', filename='assets/default_avatar.png') }}"
                        class="comment-avatar" alt="avatar" width="48" height="48">
                </div>
                <div class="flex-fill">
                    <textarea name="content" id="comment-content-input" class="form-control mb-2" rows="4"
                        placeholder="Write your comment..."></textarea>
                    <div class="d-flex align-items-center">
                        <label class="me-3"><input type="checkbox" name="is_spoiler" id="is-spoiler"> Mark as
                            spoiler</label>
                        <button type="button" class="btn btn-primary btn-sm ms-auto" id="btn-submit-comment">Post
                            Comment</button>
                    </div>
                    <small class="text-muted">Minimum 5 characters.</small>
                </div>
            </div>
        </form>
        {% else %}
        <div class="text-center py-3">
            <p>You must <a href="{{ url_for('auth.login') }}">Sign in</a> to post a comment.</p>
        </div>
        {% endif %}
    </div>

    <!-- Sort / Search -->
    <div class="d-flex mb-3 align-items-center">
        <div>
            <select id="sort-select" class="form-select form-select-sm">
                <option value="newest" {% if comments_sort=='newest' %}selected{% endif %}>Newest</option>
                <option value="oldest" {% if comments_sort=='oldest' %}selected{% endif %}>Oldest</option>
                <option value="most_liked" {% if comments_sort=='most_liked' %}selected{% endif %}>Most liked</option>
            </select>
        </div>
        <div class="ms-3 flex-grow-1">
            <input type="text" id="search-comments" class="form-control form-control-sm"
                placeholder="Search comments...">
        </div>
    </div>

    <!-- Comments list -->
    <div id="comments-list">
        {% if comments %}
        {% for c in comments %}
        <div class="comment card mb-2" data-comment-id="{{ c.CommentId }}">
            <div class="card-body d-flex">
                <div class="me-3">
                    {% if c.user and c.user.Avatar %}
                    <img src="{{ c.user.Avatar }}" class="comment-avatar rounded-circle" width="48" height="48">
                    {% else %}
                    <img src="{{ url_for('static', filename='assets/default_avatar.png') }}"
                        class="comment-avatar rounded-circle" width="48" height="48">
                    {% endif %}
                </div>
                <div class="flex-fill">
                    <div class="d-flex align-items-start">
                        <div>
                            <a href="{{ url_for('main.profile') if c.user is none else url_for('main.profile') }}"
                                class="fw-bold">{{ c.user.Username if c.user else 'Unknown' }}</a>
                            <div class="text-muted small">{{ c.CreatedAt.strftime('%Y-%m-%d %H:%M') if c.CreatedAt else
                                '' }}</div>
                            <!-- Debug UserId -->
                            <div class="text-muted small">Comment UserId: {{ c.UserId }}</div>
                            <div class="text-muted small">Condition: {{ 'True' if is_authenticated and
                                (current_user.get_id()|lower == (c.UserId|string)|lower) else 'False' }}</div>
                        </div>
                        <div class="ms-auto comment-actions">
                            <button class="btn btn-sm btn-outline-success comment-like"
                                data-comment-id="{{ c.CommentId }}">
                                👍 <span>{{ c.LikeCount or 0 }}</span>
                            </button>
                            <button class="btn btn-sm btn-outline-danger comment-dislike"
                                data-comment-id="{{ c.CommentId }}">
                                👎 <span>{{ c.DislikeCount or 0 }}</span>
                            </button>
                            {% if is_authenticated and (current_user.get_id()|lower == (c.UserId|string)|lower) %}
                            <button class="btn btn-sm btn-outline-secondary comment-edit"
                                data-comment-id="{{ c.CommentId }}">Edit</button>
                            <button class="btn btn-sm btn-outline-dark comment-delete"
                                data-comment-id="{{ c.CommentId }}">Delete</button>
                            {% endif %}
                            <button class="btn btn-sm btn-outline-warning comment-report"
                                data-comment-id="{{ c.CommentId }}">Report</button>
                        </div>
                    </div>
                    <div class="comment-content mt-2 {% if c.IsSpoiler %}spoiler{% endif %}">
                        {{ c.Content | e | replace('\n', '<br>') | safe }}
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
        {% else %}
        <p class="text-center text-muted">No comments yet. Be the first to comment!</p>
        {% endif %}
    </div>

    <!-- Pagination -->
    {% if comments_pagination and comments_pagination.pages > 1 %}
    <nav aria-label="Comments pagination" class="mt-3">
        <ul class="pagination pagination-sm">
            {% if comments_pagination.has_prev %}
            <li class="page-item">
                <a class="page-link"
                    href="{{ url_for('manga.manga_detail', manga_id=mid, page=comments_pagination.prev_num, sort=comments_sort) }}">&laquo;
                    Prev</a>
            </li>
            {% else %}
            <li class="page-item disabled"><span class="page-link">&laquo; Prev</span></li>
            {% endif %}
            <li class="page-item disabled"><span class="page-link">Page {{ comments_pagination.page }} / {{
                    comments_pagination.pages }}</span></li>
            {% if comments_pagination.has_next %}
            <li class="page-item">
                <a class="page-link"
                    href="{{ url_for('manga.manga_detail', manga_id=mid, page=comments_pagination.next_num, sort=comments_sort) }}">Next
                    &raquo;</a>
            </li>
            {% else %}
            <li class="page-item disabled"><span class="page-link">Next &raquo;</span></li>
            {% endif %}
        </ul>
    </nav>
    {% endif %}
</div>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\creator_detail.html ---
{% extends "base.html" %}

{% block title %}{{ creator.Name }} | MangaDex Clone{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/creator_detail.css') }}">
{% endblock %}

{% block content %}
<div class="creator-detail-container">
    <div class="creator-header">
        <h1 class="creator-name">{{ creator.Name }}</h1>
        <p class="creator-biography">
            {{ creator.BiographyEn if creator.BiographyEn else 'No biography available.' }}
        </p>
    </div>

    <hr class="separator">

    <div class="manga-list-section">
        <h2 class="section-title">Manga by {{ creator.Name }}</h2>
        {% if mangas %}
        <div class="manga-grid">
            {% for manga_item in mangas %}
            <a href="{{ url_for('manga.manga_detail', manga_id=manga_item.manga.MangaId) }}" class="manga-card">
                <div class="manga-cover-container">
                    <img src="{{ manga_item.cover_url }}" alt="Cover of {{ manga_item.manga.TitleEn }}"
                        class="manga-cover">
                </div>
                <div class="manga-info-overlay">
                    <h3 class="manga-title-overlay">{{ manga_item.manga.TitleEn }}</h3>
                    <div class="manga-stats-overlay">
                        <span class="rating">
                            ⭐ {{ (manga_item.stats.AverageRating if manga_item.stats and manga_item.stats.AverageRating
                            else (manga_item.stats.BayesianRating if manga_item.stats else 0))|round(1) }}
                        </span>
                        <span class="follows">
                            ❤️ {{ manga_item.stats.Follows if manga_item.stats and manga_item.stats.Follows else 0 }}
                        </span>
                    </div>
                </div>
            </a>
            {% endfor %}
        </div>
        {% else %}
        <p class="no-manga-found">No manga found for this creator.</p>
        {% endif %}
    </div>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\home.html ---
{% extends "base.html" %}

{% block title %}Home | MangaDex Clone{% endblock %}

{% block content %}
<div class="container-fluid py-4" data-auth="{{ is_authenticated | tojson | safe }}">
    <h1 class="text-white mb-4">Hot Manga Recently Updated</h1>

    {% if mangas %}
    <table class="table table-dark table-hover">
        <thead>
            <tr>
                <th class="text-center fs-5" style="font-size: 1.3em;" width="10%">Rank</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Title</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Your Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;" width="10%">List Option</th>
            </tr>
        </thead>
        <tbody>
            {% for data in mangas %}
            {% set manga = data.manga %}
            {% set stats = data.stats %}
            {% set index = loop.index0 %}
            <tr>
                <td class="text-center fs-3 fw-bold" style="font-size: 1.5em;">{{ (pagination.page - 1) * 10 + index + 1
                    }}</td>
                <td>
                    <div class="d-flex align-items-center">
                        <img src="{{ data.cover_url }}" alt="Cover of {{ manga.TitleEn }}" class="me-3"
                            style="width: 130px; height: auto; border-radius: 4px;">
                        <div>
                            <a href="{{ url_for('manga.manga_detail', manga_id=manga.MangaId) }}"
                                class="text-white fw-bold" style="font-size: 1.5em; text-decoration: none;">{{
                                manga.TitleEn }}</a>
                            <div class="mt-3 text-muted small">
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.ContentRating }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.PublicationDemographic }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.Status }}</span>
                                <span class="fs-5 fw-bold text-info">{{ manga.Year }}</span>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="text-center fs-5 text-light">{{ stats.AverageRating|round(2) }}</td>
                <td class="text-center fs-5 text-light">{{ data.your_score if data.your_score else 'N/A' }}</td>
                <td class="text-center">
                    <button class="btn btn-primary add-to-list" data-manga-id="{{ manga.MangaId }}">Add to My
                        List</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            {% if pagination.has_prev %}
            <li class="page-item"><a class="page-link text-white bg-dark"
                    href="{{ url_for('main.home', page=pagination.prev_num) }}">Previous</a></li>
            {% endif %}
            {% for p in pagination.iter_pages() %}
            {% if p %}
            <li class="page-item {{ 'active' if p == pagination.page else '' }}"><a class="page-link text-white bg-dark"
                    href="{{ url_for('main.home', page=p) }}">{{ p }}</a></li>
            {% else %}
            <li class="page-item disabled"><span class="page-link bg-dark">...</span></li>
            {% endif %}
            {% endfor %}
            {% if pagination.has_next %}
            <li class="page-item"><a class="page-link text-white bg-dark"
                    href="{{ url_for('main.home', page=pagination.next_num) }}">Next</a></li>
            {% endif %}
        </ul>
    </nav>
    {% else %}
    <p class="text-white">No hot manga in the last 4 months.</p>
    {% endif %}
</div>

<!-- Modal cho Add to List -->
<div class="modal fade" id="add-modal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="modalLabel"></h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Nội dung dynamic từ JS -->
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Lấy giá trị isAuthenticated từ data attribute
    window.isAuthenticated = JSON.parse(document.querySelector('[data-auth]').dataset.auth);
</script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\latest_updates.html ---
{% extends "base.html" %}

{% block title %}Latest Updates | MangaDex Clone{% endblock %}

{% block content %}
<div class="container-fluid py-4" data-auth="{{ is_authenticated | tojson | safe }}">
    <h1 class="text-white mb-4">Latest Updated Manga</h1>

    {% if mangas %}
    <table class="table table-dark table-hover">
        <thead>
            <tr>
                <th class="text-center fs-5" style="font-size: 1.3em;">Title</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Your Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;" width="10%">List Option</th>
            </tr>
        </thead>
        <tbody>
            {% for data in mangas %}
            {% set manga = data.manga %}
            {% set stats = data.stats %}
            <tr>
                <td>
                    <div class="d-flex align-items-center">
                        <img src="{{ data.cover_url }}" alt="Cover of {{ manga.TitleEn }}" class="me-3"
                            style="width: 130px; height: auto; border-radius: 4px;">
                        <div>
                            <a href="{{ url_for('manga.manga_detail', manga_id=manga.MangaId) }}"
                                class="text-white fw-bold" style="font-size: 1.5em; text-decoration: none;">
                                {{ manga.TitleEn }}
                            </a>
                            <div class="mt-3 text-muted small">
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.ContentRating }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.PublicationDemographic }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.Status }}</span>
                                <span class="fs-5 fw-bold text-info">{{ manga.Year }}</span>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="text-center fs-5 text-light">{{ stats.AverageRating|round(2) if stats.AverageRating else
                    'N/A' }}</td>
                <td class="text-center fs-5 text-light">{{ data.your_score if data.your_score else 'N/A' }}</td>
                <td class="text-center">
                    <button class="btn btn-primary add-to-list" data-manga-id="{{ manga.MangaId }}">Add to My
                        List</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            {% if pagination.has_prev %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.latest_updates', page=pagination.prev_num) }}">Previous</a>
            </li>
            {% endif %}
            {% for p in pagination.iter_pages() %}
            {% if p %}
            <li class="page-item {{ 'active' if p == pagination.page else '' }}">
                <a class="page-link text-white bg-dark" href="{{ url_for('main.latest_updates', page=p) }}">{{ p }}</a>
            </li>
            {% else %}
            <li class="page-item disabled"><span class="page-link bg-dark">...</span></li>
            {% endif %}
            {% endfor %}
            {% if pagination.has_next %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.latest_updates', page=pagination.next_num) }}">Next</a>
            </li>
            {% endif %}
        </ul>
    </nav>
    {% else %}
    <p class="text-white">No recently updated manga found.</p>
    {% endif %}
</div>

<!-- Modal for Add to List -->
<div class="modal fade" id="add-modal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="modalLabel"></h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Dynamic content from JS -->
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Set isAuthenticated from data attribute
    window.isAuthenticated = JSON.parse(document.querySelector('[data-auth]').dataset.auth);
</script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\library.html ---
{% extends "base.html" %}

{% block title %}Library | MangaDex Clone{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/library.css') }}">
<link rel="stylesheet" href="{{ url_for('static', filename='css/add_to_list.css') }}">

{% endblock %}

{% block content %}
<div class="container py-4 text-white">
    <h1 class="mb-4">Your Library</h1>

    <!-- Tabs -->
    <ul class="nav nav-tabs" id="libraryTabs" role="tablist">
        <li class="nav-item">
            <button class="nav-link active" id="my-lists-tab" data-bs-toggle="tab" data-bs-target="#my-lists"
                type="button" role="tab">My MDLists</button>
        </li>
        <li class="nav-item">
            <button class="nav-link" id="followed-lists-tab" data-bs-toggle="tab" data-bs-target="#followed-lists"
                type="button" role="tab">Followed MDLists</button>
        </li>
    </ul>

    <div class="tab-content mt-3" id="libraryTabsContent">
        <div class="tab-pane fade show active" id="my-lists" role="tabpanel">
            <button class="btn btn-primary mb-3" id="newListBtn">+ New MDList</button>
            <div id="myListsContainer" class="row g-3"></div>
        </div>
        <div class="tab-pane fade" id="followed-lists" role="tabpanel">
            <div id="followedListsContainer" class="row g-3"></div>
        </div>
    </div>
</div>

<!-- Modal: Create New List -->
<div class="modal fade" id="newListModal" tabindex="-1" aria-labelledby="newListLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="newListLabel">Create New MDList</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="newListForm">
                    <div class="mb-3">
                        <label for="listName" class="form-label">Title</label>
                        <input type="text" class="form-control" id="listName" required>
                    </div>
                    <div class="mb-3">
                        <label for="listDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="listDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="listVisibility" class="form-label">Visibility</label>
                        <select class="form-select" id="listVisibility">
                            <option value="public">Public</option>
                            <option value="unlisted">Unlisted</option>
                            <option value="private" selected>Private</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Edit List -->
<div class="modal fade" id="editListModal" tabindex="-1" aria-labelledby="editListLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="editListLabel">Edit MDList</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editListForm">
                    <input type="hidden" id="editListId">
                    <div class="mb-3">
                        <label for="editListName" class="form-label">Title</label>
                        <input type="text" class="form-control" id="editListName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editListDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editListDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editListVisibility" class="form-label">Visibility</label>
                        <select class="form-select" id="editListVisibility">
                            <option value="public">Public</option>
                            <option value="unlisted">Unlisted</option>
                            <option value="private">Private</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Confirm Delete -->
<div class="modal fade" id="deleteListModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title">Delete MDList</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this list?</p>
                <button id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ url_for('static', filename='js/library.js') }}"></script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\list_public.html ---
{% extends "base.html" %}

{% block title %}{{ list.Name }} | MDList{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/list.css') }}">
{% endblock %}

{% block content %}
<div class="container py-4 text-white">
    <div class="d-flex justify-content-between align-items-start mb-3">
        <div>
            <h1 class="mb-1">{{ list.Name }}</h1>
            <div class="mb-2 list-meta">{{ list.Description }}</div>
            <div class="list-meta">
                Owner: {{ list.owner.Username if list.owner else "Unknown" }}
                &nbsp;•&nbsp; {{ list.ItemCount }} items &nbsp;•&nbsp; {{ list.FollowerCount }} followers
            </div>
        </div>
        <div class="d-flex gap-2">
            {% if current_user.is_authenticated and list.UserId == current_user.UserId %}
            <button class="btn btn-primary" id="addMangaBtn">+ Add Manga</button>
            <button class="btn btn-outline-danger" id="bulkDeleteBtn" disabled>Delete Selected</button>
            <button class="btn btn-outline-light" id="toggleSelectBtn">Select All</button>
            {% endif %}
            <div>
                <select id="sortSelect" class="form-select form-select-sm">
                    <option value="recent" selected>Recently added</option>
                    <option value="title">Title (A–Z)</option>
                    <option value="added">Added (new→old)</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Grid of manga -->
    <div class="row g-3" id="listItemsContainer">
        {% for item in items %}
        <div class="col-md-3">
            <div class="card h-100 manga-card card-pos position-relative">
                <a href="{{ url_for('manga.manga_detail', manga_id=item.manga.MangaId) }}" class="stretched-link"></a>

                <input type="checkbox" class="form-check-input select-checkbox"
                    data-manga-id="{{ item.manga.MangaId }}">
                <img src="{{ item.cover_url }}" class="cover card-img-top" alt="{{ item.manga.TitleEn }}">
                <div class="card-body">
                    <h6 class="card-title">{{ item.manga.TitleEn }}</h6>
                </div>
                <div class="card-footer">
                    <div class="small text-muted">{{ item.added_date }}</div>
                    <div>
                        <button class="btn btn-sm btn-outline-light add-to-list-btn">Add to list</button>
                        <button class="btn btn-sm btn-danger remove-from-list-btn">Remove</button>
                    </div>
                </div>
            </div>
        </div>


        {% endfor %}
    </div>

</div>

<!-- Modal: Add manga via search -->
<div class="modal fade" id="addMangaModal" tabindex="-1" aria-labelledby="addMangaLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="addMangaLabel">Add manga to "{{ list.Name }}"</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <input id="addMangaSearch" class="form-control" placeholder="Search manga by title..."
                        autocomplete="off">
                </div>
                <div id="addMangaResults" class="row g-3"></div>
            </div>
            <div class="modal-footer">
                <button id="addMangaConfirmBtn" class="btn btn-primary">Add selected</button>
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Confirm Delete -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content text-dark">
            <div class="modal-header">
                <h5 class="modal-title">Confirm delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmDeleteText">Are you sure?</p>
                <div class="text-end">
                    <button id="confirmDeleteYes" class="btn btn-danger">Delete</button>
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>


{% endblock %}

{% block scripts %}
<script id="list-context" type="application/json">
    {{ {
        "listId": list.ListId,
        "isOwner": current_user.is_authenticated and list.UserId == current_user.UserId
    } | tojson }}
</script>

<script>
    window._LIST_CONTEXT = JSON.parse(
        document.getElementById("list-context").textContent
    );
</script>

<script src="{{ url_for('static', filename='js/list_public.js') }}"></script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\login.html ---
<!DOCTYPE html>
<html lang="en" class="login-pf">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Login | MangaDex Clone</title>
    <link rel="icon" href="{{ url_for('static', filename='assets/MD-logo.png') }}">
    <link href="{{ url_for('static', filename='css/auth.css') }}" rel="stylesheet">
</head>

<body class="auth-body login-bg">
    <div class="auth-wrapper">
        <!-- Logo -->
        <div class="auth-logo">
            <a href="{{ url_for('main.home') }}">
                <img src="{{ url_for('static', filename='assets/MD-logo.png') }}" alt="MangaDex Logo">
                <span>MangaDex</span>
            </a>
        </div>

        <!-- Card -->
        <div class="auth-card">
            <h1 class="auth-title">Sign in to your account</h1>
            <form method="post" action="{{ url_for('auth.login') }}">
                <div class="form-group">
                    <label for="username">Username or email</label>
                    <input type="text" id="username" name="username" class="pf-c-form-control" required>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" class="pf-c-form-control" required>
                </div>

                <div class="form-options">
                    <label><input type="checkbox" name="remember"> Remember me</label>
                    <a href="#" class="link-orange">Forgot Password?</a>
                </div>

                <button type="submit" class="pf-c-button pf-m-primary btn-orange">Sign In</button>

                <div class="form-extra">
                    <a href="#" class="link-gray">Try Another Way</a>
                </div>

                <div class="form-register">
                    <span>New user? <a href="{{ url_for('auth.register') }}" class="link-orange">Register</a></span>
                </div>
            </form>
        </div>
    </div>
</body>

</html>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\manga_art.html ---
<!-- manga_art.html -->
<div>
    <!-- Locale filter -->
    <form method="get" class="mb-3">
        <label><strong>Locale:</strong></label><br>
        {% for loc in all_locales %}
        <label class="me-3">
            <input type="checkbox" name="locale" value="{{ loc }}" {% if loc in selected_locales %}checked{% endif %}>
            {{ loc }}
        </label>
        {% endfor %}
        <button type="submit" class="btn btn-primary btn-sm">Apply</button>
    </form>

    <!-- Gallery -->
    <div class="row">
        {% for cover in covers %}
        <div class="col-md-3 col-sm-4 col-6 mb-4">
            <div class="card h-100 cover-card">
                <img src="{{ url_for('manga.cover_image', cover_id=cover.cover_id) }}" class="card-img-top"
                    alt="Cover {{ cover.volume }}">
                <div class="card-body p-2">
                    <p class="mb-1"><strong>Volume:</strong> {{ cover.volume or '-' }}</p>
                    <p class="mb-1"><strong>Locale:</strong> {{ cover.locale or '-' }}</p>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\manga_detail.html ---
{# app/templates/manga_detail.html #}
{% extends "base.html" %}

{% block title %}{{ manga.TitleEn }} | MangaDex Clone{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/manga_detail.css') }}">
<link rel="stylesheet" href="{{ url_for('static', filename='css/comments.css') }}">
<link rel="stylesheet" href="{{ url_for('static', filename='css/add_to_list.css') }}">
<link rel="stylesheet" href="{{ url_for('static', filename='css/auth.css') }}">
{% endblock %}

{% block content %}
<div class="manga-detail-container">
    <div class="manga-main">
        <!-- Header Section -->
        <div class="manga-detail-header" data-cover-url="{{ manga_cover_url }}">
            <div class="manga-cover-thumbnail">
                <img src="{{ manga_cover_url }}" alt="Cover of {{ manga.TitleEn }}" class="cover-img">
            </div>
            <div class="manga-info">
                <h1 class="manga-title">{{ manga.TitleEn }}</h1>
                <div class="manga-actions">
                    <a href="#" class="btn btn-primary add-to-list" data-manga-id="{{ manga.MangaId }}">
                        Add To Library
                    </a>
                    {% if has_chapters %}
                    <button id="start-reading" class="btn btn-secondary" data-manga-id="{{ manga.MangaId }}">Start
                        Reading</button>
                    {% if is_authenticated %}
                    <button id="continue-reading" class="btn btn-info" data-manga-id="{{ manga.MangaId }}">Continue
                        Reading</button>
                    {% else %}
                    <button id="continue-reading-guest" class="btn btn-info">Continue Reading</button>
                    {% endif %}
                    {% else %}
                    <button class="btn btn-secondary disabled">No Chapters</button>
                    {% endif %}
                </div>
                <div class="manga-meta">
                    <span class="content-rating">{{ manga.ContentRating if manga.ContentRating else 'N/A' }}</span>
                    {% for tag in content_tags %}
                    <span class="tag-badge">{{ tag.NameEn }}</span>
                    {% endfor %}
                </div>
                <div class="manga-meta">
                    <span class="status-dot" data-status="{{ manga.Status | default('Unknown') }}"></span>
                    <span class="publication">
                        Publication: {{ manga.Year if manga.Year else 'N/A' }}, {{ manga.Status if manga.Status else
                        'N/A' }}
                    </span>
                </div>

                <!-- === UPDATED: Manga stats + Your rating widget === -->
                <div class="manga-stats">
                    <span class="stat-rating">
                        ⭐ {{ (manga_stats.AverageRating if manga_stats and manga_stats.AverageRating else
                        (manga_stats.BayesianRating if manga_stats else 0))|round(1) }}
                    </span>
                    <span class="stat-follows">
                        ❤️ {{ manga_stats.Follows if manga_stats and manga_stats.Follows else 0 }}
                    </span>

                    <div class="your-rating" data-manga-id="{{ manga.MangaId }}">
                        {% if is_authenticated %}
                        <label for="user-rating-select">Your score:</label>
                        <select id="user-rating-select" name="score" aria-label="Your score (1-10)">
                            <option value="">N/A</option>
                            {% for i in range(1,11) %}
                            <option value="{{ i }}">{{ i }}</option>
                            {% endfor %}
                        </select>
                        <button id="user-rating-save" class="btn btn-success btn-sm">Save</button>
                        <button id="user-rating-remove" class="btn btn-outline-danger btn-sm"
                            style="display:none;">Remove</button>
                        <span id="user-rating-msg" class="rating-msg" aria-live="polite"></span>
                        {% else %}
                        <span class="please-login">
                            <a href="{{ url_for('auth.login') }}">Login to rate</a>
                        </span>
                        {% endif %}
                    </div>
                </div>
                <!-- === END UPDATED === -->

            </div>
        </div>

        <!-- Description Section -->
        <div class="manga-description">
            {{ manga_description|safe if manga_description else 'No description available' }}
        </div>

        <!-- Tabs Section -->
        <div class="manga-tabs">
            <a href="#chapters" class="tab active" data-tab="chapters">Chapters</a>
            <a href="#comments" class="tab" data-tab="comments">Comments</a>
            <a href="#art" class="tab" data-tab="art"
                data-url="{{ url_for('manga.manga_art', manga_id=manga.MangaId) }}">Art</a>
            <a href="#related" class="tab" data-tab="related">Related</a>
        </div>

        <div class="tab-content">
            <div class="tab-pane active" id="chapters">
                {% if chapters %}
                <h2>Chapters</h2>
                <ul>
                    {% for chapter in chapters %}
                    <li>{{ chapter.Title }} - {{ chapter.ChapterNumber }}</li>
                    {% endfor %}
                </ul>
                {% else %}
                <p class="text-center text-gray">This feature is under development.</p>
                {% endif %}
            </div>

            <div class="tab-pane" id="comments">
                {# Inline include: comments partial expects variables passed from manga_detail route:
                comments, comments_pagination, comments_sort, is_authenticated #}
                {% include 'comments.html' %}
            </div>

            <div class="tab-pane" id="art">
                <p class="text-center text-gray">This feature is under development.</p>
            </div>

            <div class="tab-pane" id="related">
                <p class="text-center text-gray">This feature is under development.</p>
            </div>
        </div>
    </div>

    <!-- Sidebar (unchanged) -->
    <div class="manga-sidebar">
        <div class="sidebar-section">
            <h3>Authors</h3>
            <ul class="tag-list">
                {% for author in authors %}
                {% if author %}
                <li><a href="{{ url_for('main.creator_detail', creator_id=author.CreatorId) }}" class="tag-link">{{
                        author.Name }}</a></li>
                {% endif %}
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Artists</h3>
            <ul class="tag-list">
                {% for artist in artists %}
                {% if artist %}
                <li><a href="{{ url_for('main.creator_detail', creator_id=artist.CreatorId) }}" class="tag-link">{{
                        artist.Name }}</a></li>
                {% endif %}
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Genres</h3>
            <ul class="tag-list">
                {% for tag in genres %}
                <li><a href="#" class="tag-link">{{ tag.NameEn }}</a></li>
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Themes</h3>
            <ul class="tag-list">
                {% for tag in themes %}
                <li><a href="#" class="tag-link">{{ tag.NameEn }}</a></li>
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Demographic</h3>
            <ul class="tag-list">
                <li><a href="#" class="tag-link">{{ manga.PublicationDemographic if manga.PublicationDemographic else
                        'N/A' }}</a></li>
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Format</h3>
            <ul class="tag-list">
                {% for tag in formats %}
                <li><a href="#" class="tag-link">{{ tag.NameEn }}</a></li>
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Track</h3>
            <ul class="track-list">
                {% for link in manga_links %}
                <li><a href="{{ link.Url }}" class="track-link" target="_blank">{{ link.ProviderFullName }}</a></li>
                {% endfor %}
            </ul>
        </div>
        <div class="sidebar-section">
            <h3>Alternative Titles</h3>
            <ul class="alt-title-list">
                {% for alt_title in alt_titles %}
                <li>
                    <img src="{{ url_for('static', filename='flags/' + alt_title.LangCode + '.png') }}"
                        alt="{{ alt_title.LangCode }} flag" class="flag-icon">
                    <span>{{ alt_title.AltTitle }}</span>
                </li>
                {% endfor %}
            </ul>
        </div>
    </div>
</div>

<!-- Modals -->
<div class="modal fade" id="lang-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title">Select Language</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="lang-form">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="lang" id="en" value="en">
                        <label class="form-check-label" for="en">English</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="lang" id="vi" value="vi">
                        <label class="form-check-label" for="vi">Vietnamese</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="submit-lang">Start</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="no-chapter-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title">No Chapters</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>No chapters available yet.</p>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="login-required-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title">Login Required</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Please login to use Continue Reading.</p>
            </div>
            <div class="modal-footer">
                <a href="{{ url_for('auth.login') }}" class="btn btn-primary">Login</a>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block scripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="{{ url_for('static', filename='js/comments.js') }}"></script>
<script src="{{ url_for('static', filename='js/manga_detail.js') }}"></script>
<script src="{{ url_for('static', filename='js/add_to_list.js') }}"></script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\profile.html ---
{% extends "base.html" %}

{% block title %}Profile | MangaDex Clone{% endblock %}

{% block content %}
<div class="profile-page py-5">
    <!-- Banner -->
    <div class="profile-banner">
        <div class="profile-header d-flex align-items-end p-4">
            <!-- Avatar -->
            <img src="{{ user.Avatar or url_for('static', filename='assets/default_avatar.png') }}"
                alt="Avatar of {{ user.Username }}" class="profile-avatar me-3 img-fluid"
                style="width: 100px; height: 100px; object-fit: cover;">

            <!-- Username + Role -->
            <div>
                <h2 class="text-white fw-bold">{{ user.Username }}</h2>
                <span class="badge bg-secondary">{{ user.Role }}</span>
            </div>
        </div>
    </div>

    <!-- Actions -->
    <div class="profile-actions d-flex gap-3 mt-4 px-4">
        <a href="{{ url_for('main.follow', user_id=user.UserId) }}" class="btn btn-signin">Follow</a>
        <a href="{{ url_for('main.message', user_id=user.UserId) }}" class="btn btn-secondary">Message</a>
        <a href="{{ url_for('main.report', user_id=user.UserId) }}" class="btn btn-dark">Report</a>
    </div>

    <!-- Info Section -->
    <div class="profile-info mt-4 px-4">
        <div class="info-item d-flex justify-content-between py-2">
            <span class="text-muted">User ID</span>
            <span class="text-white">{{ user.UserId }}</span>
        </div>
        <div class="info-item d-flex justify-content-between py-2">
            <span class="text-muted">Email</span>
            <span class="text-white">{{ user.Email }}</span>
        </div>
        <div class="info-item d-flex justify-content-between py-2">
            <span class="text-muted">Created At</span>
            <span class="text-white">{{ user.CreatedAt.strftime("%B %d, %Y") if user.CreatedAt else "N/A" }}</span>
        </div>
        <div class="info-item d-flex justify-content-between py-2">
            <span class="text-muted">Status</span>
            <span class="text-white">
                {% if user.IsLocked %}
                <span class="text-danger">Locked</span>
                {% else %}
                <span class="text-success">Active</span>
                {% endif %}
            </span>
        </div>
    </div>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\random.html ---
{% extends "base.html" %}

{% block title %}Random | MangaDex Clone{% endblock %}

{% block content %}
<div class="text-center py-5 text-white">
    <h1>Random Manga</h1>
    <p>No content available yet.</p>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\reader.html ---
{% extends "base.html" %}

{% block title %}{{ chapter.Title }} | {{ manga.TitleEn }} | MangaDex Clone{% endblock %}

{% block styles %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/reader.css') }}">
{% endblock %}

{% block content %}
<div class="reader-container py-4 text-white">
    <div class="reader-header mb-3">
        <a href="{{ url_for('main.manga_detail', manga_id=manga.MangaId) }}" class="btn btn-outline-light me-2">← Back
            to Manga</a>
        <h2 class="d-inline">{{ manga.TitleEn }} - Vol. {{ chapter.Volume or 'N/A' }} Ch. {{ chapter.ChapterNumber }}:
            {{ chapter.Title or 'Untitled' }}</h2>
    </div>

    <div id="long-strip" class="long-strip overflow-auto bg-dark p-3 rounded" style="height: 70vh;">
        <div id="loading-spinner" class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading chapter...</p>
        </div>
        <div id="chapter-images" class="d-none">
            {% if image_urls %}
            {% for url in image_urls %}
            <img src="{{ url }}" alt="Page" class="chapter-page img-fluid mx-auto d-block mb-3" loading="lazy">
            {% endfor %}
            {% else %}
            <p class="text-danger text-center">Failed to load chapter images. Please try again.</p>
            {% endif %}
        </div>
    </div>

    <div class="reader-footer mt-3 d-flex justify-content-between align-items-center">
        <button id="prev-chapter" class="btn btn-secondary" {% if not has_prev %}disabled{% endif %}>Previous
            Chapter</button>
        <div class="progress w-50" style="height: 8px;">
            <div id="read-progress" class="progress-bar bg-primary" role="progressbar" style="width: 0%;"></div>
        </div>
        <button id="next-chapter" class="btn btn-primary" {% if not has_next %}disabled{% endif %}>Next Chapter</button>
    </div>
</div>

<script id="reader-data" type="application/json">
    {{ {
        "manga_id": manga.MangaId,
        "chapter_id": chapter.ChapterId,
        "lang": chapter.TranslatedLang,
        "has_prev": has_prev,
        "has_next": has_next,
        "is_authenticated": current_user.is_authenticated
    } | tojson }}
</script>
{% endblock %}

{% block scripts %}
<script src="{{ url_for('static', filename='js/reader.js') }}"></script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\reading_history.html ---
{% extends "base.html" %}

{% block title %}Reading History | MangaDex Clone{% endblock %}

{% block content %}
<div class="text-center py-5 text-white">
    <h1>Reading History</h1>
    <p>No content available yet.</p>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\recently_added.html ---
{% extends "base.html" %}

{% block title %}Recently Added | MangaDex Clone{% endblock %}

{% block content %}
<div class="container-fluid py-4" data-auth="{{ is_authenticated | tojson | safe }}">
    <h1 class="text-white mb-4">Recently Added Manga</h1>

    {% if mangas %}
    <table class="table table-dark table-hover">
        <thead>
            <tr>
                <th class="text-center fs-5" style="font-size: 1.3em;">Title</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Your Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;" width="10%">List Option</th>
            </tr>
        </thead>
        <tbody>
            {% for data in mangas %}
            {% set manga = data.manga %}
            {% set stats = data.stats %}
            <tr>
                <td>
                    <div class="d-flex align-items-center">
                        <img src="{{ data.cover_url }}" alt="Cover of {{ manga.TitleEn }}" class="me-3"
                            style="width: 130px; height: auto; border-radius: 4px;">
                        <div>
                            <a href="{{ url_for('manga.manga_detail', manga_id=manga.MangaId) }}"
                                class="text-white fw-bold" style="font-size: 1.5em; text-decoration: none;">
                                {{ manga.TitleEn }}
                            </a>
                            <div class="mt-3 text-muted small">
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.ContentRating }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.PublicationDemographic }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.Status }}</span>
                                <span class="fs-5 fw-bold text-info">{{ manga.Year }}</span>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="text-center fs-5 text-light">{{ stats.AverageRating|round(2) if stats.AverageRating else
                    'N/A' }}</td>
                <td class="text-center fs-5 text-light">{{ data.your_score if data.your_score else 'N/A' }}</td>
                <td class="text-center">
                    <button class="btn btn-primary add-to-list" data-manga-id="{{ manga.MangaId }}">Add to My
                        List</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            {% if pagination.has_prev %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.recently_added', page=pagination.prev_num) }}">Previous</a>
            </li>
            {% endif %}
            {% for p in pagination.iter_pages() %}
            {% if p %}
            <li class="page-item {{ 'active' if p == pagination.page else '' }}">
                <a class="page-link text-white bg-dark" href="{{ url_for('main.recently_added', page=p) }}">{{ p }}</a>
            </li>
            {% else %}
            <li class="page-item disabled"><span class="page-link bg-dark">...</span></li>
            {% endif %}
            {% endfor %}
            {% if pagination.has_next %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.recently_added', page=pagination.next_num) }}">Next</a>
            </li>
            {% endif %}
        </ul>
    </nav>
    {% else %}
    <p class="text-white">No recently added manga found.</p>
    {% endif %}
</div>

<!-- Modal for Add to List -->
<div class="modal fade" id="add-modal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="modalLabel"></h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Dynamic content from JS -->
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Set isAuthenticated from data attribute
    window.isAuthenticated = JSON.parse(document.querySelector('[data-auth]').dataset.auth);
</script>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\register.html ---
<!DOCTYPE html>
<html lang="en" class="login-pf">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Register | MangaDex Clone</title>
    <link rel="icon" href="{{ url_for('static', filename='assets/MD-logo.png') }}">
    <link href="{{ url_for('static', filename='css/auth.css') }}" rel="stylesheet">
</head>

<body class="auth-body login-bg">
    <div class="auth-wrapper">
        <!-- Logo -->
        <div class="auth-logo">
            <a href="{{ url_for('main.home') }}">
                <img src="{{ url_for('static', filename='assets/MD-logo.png') }}" alt="MangaDex Logo">
                <span>MangaDex</span>
            </a>
        </div>

        <!-- Card -->
        <div class="auth-card register-card">
            <p class="required-note"><span class="required">*</span> Required fields</p>
            <h1 class="auth-title">Register</h1>
            <form method="post" action="{{ url_for('auth.register') }}">
                <div class="form-group">
                    <label for="username">Username <span class="required">*</span></label>
                    <input type="text" id="username" name="username" class="pf-c-form-control" required>
                </div>

                <div class="form-group">
                    <label for="password">Password <span class="required">*</span></label>
                    <input type="password" id="password" name="password" class="pf-c-form-control" required>
                </div>

                <div class="form-group">
                    <label for="password_confirm">Confirm password <span class="required">*</span></label>
                    <input type="password" id="password_confirm" name="password_confirm" class="pf-c-form-control"
                        required>
                </div>

                <div class="form-group">
                    <label for="email">Email <span class="required">*</span></label>
                    <input type="email" id="email" name="email" class="pf-c-form-control" required>
                </div>

                <div class="form-options">
                    <a href="{{ url_for('auth.login') }}" class="link-orange">« Back to Login</a>
                </div>

                <button type="submit" class="pf-c-button pf-m-primary btn-orange">Register</button>

                <div class="form-extra small-text">
                    <span class="link-gray">Privacy · Terms</span>
                </div>
            </form>
        </div>
    </div>
</body>

</html>
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\related.html ---
{% extends "manga_detail.html" %}

{% block tab_content %}
<div class="tab-pane" id="related">
    <p class="text-center text-gray">No content available yet.</p>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\require_login.html ---
{% extends "base.html" %}

{% block title %}{{ title }} | MangaDex Clone{% endblock %}

{% block content %}
<div class="require-login text-center py-5">
    <!-- Tiêu đề -->
    <div class="mb-4">
        <a href="javascript:history.back()" class="btn btn-sm btn-secondary">
            ← Back
        </a>
        <h1 class="mt-3 text-light">{{ title }}</h1>
    </div>

    <!-- Thông báo chính -->
    <p class="fs-5 mb-4 text-light">
        You need to sign in to access this page.
    </p>

    <!-- Nút hành động -->
    <div class="d-flex justify-content-center gap-3">
        <a href="{{ url_for('auth.login') }}" class="btn btn-signin fw-bold px-4">
            Sign in
        </a>
        <a href="{{ url_for('auth.register') }}" class="btn btn-register fw-bold px-4">
            Register
        </a>
    </div>
</div>
{% endblock %}
--- File: D:\TDMU\2025-2026\HKI_2025-2026\DACSN\coursework\Demo\mini-demo\app\templates\updates.html ---
{% extends "base.html" %}

{% block title %}Updates | MangaDex Clone{% endblock %}

{% block content %}
<div class="container-fluid py-4" data-auth="{{ is_authenticated | tojson | safe }}">
    <h1 class="text-white mb-4">Your Followed Manga Updates</h1>

    {% if mangas %}
    <table class="table table-dark table-hover">
        <thead>
            <tr>
                <th class="text-center fs-5" style="font-size: 1.3em;">Title</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;">Your Score</th>
                <th class="text-center fs-5" style="font-size: 1.3em;" width="10%">List Option</th>
            </tr>
        </thead>
        <tbody>
            {% for data in mangas %}
            {% set manga = data.manga %}
            {% set stats = data.stats %}
            <tr>
                <td>
                    <div class="d-flex align-items-center">
                        <img src="{{ data.cover_url }}" alt="Cover of {{ manga.TitleEn }}" class="me-3"
                            style="width: 130px; height: auto; border-radius: 4px;">
                        <div>
                            <a href="{{ url_for('manga.manga_detail', manga_id=manga.MangaId) }}"
                                class="text-white fw-bold" style="font-size: 1.5em; text-decoration: none;">
                                {{ manga.TitleEn }}
                            </a>
                            <div class="mt-3 text-muted small">
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.ContentRating }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.PublicationDemographic }}</span>
                                <span class="me-2 fs-5 fw-bold text-info">{{ manga.Status }}</span>
                                <span class="fs-5 fw-bold text-info">{{ manga.Year }}</span>
                            </div>
                        </div>
                    </div>
                </td>
                <td class="text-center fs-5 text-light">{{ stats.AverageRating|round(2) if stats.AverageRating else
                    'N/A' }}</td>
                <td class="text-center fs-5 text-light">{{ data.your_score if data.your_score else 'N/A' }}</td>
                <td class="text-center">
                    <button class="btn btn-primary add-to-list" data-manga-id="{{ manga.MangaId }}">Add to My
                        List</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            {% if pagination.has_prev %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.updates', page=pagination.prev_num) }}">Previous</a>
            </li>
            {% endif %}
            {% for p in pagination.iter_pages() %}
            {% if p %}
            <li class="page-item {{ 'active' if p == pagination.page else '' }}">
                <a class="page-link text-white bg-dark" href="{{ url_for('main.updates', page=p) }}">{{ p }}</a>
            </li>
            {% else %}
            <li class="page-item disabled"><span class="page-link bg-dark">...</span></li>
            {% endif %}
            {% endfor %}
            {% if pagination.has_next %}
            <li class="page-item">
                <a class="page-link text-white bg-dark"
                    href="{{ url_for('main.updates', page=pagination.next_num) }}">Next</a>
            </li>
            {% endif %}
        </ul>
    </nav>
    {% else %}
    <p class="text-white">No updates found in your lists.</p>
    {% endif %}
</div>

<!-- Modal for Add to List -->
<div class="modal fade" id="add-modal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="modalLabel"></h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Dynamic content from JS -->
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    window.isAuthenticated = JSON.parse(document.querySelector('[data-auth]').dataset.auth);
</script>
{% endblock %}